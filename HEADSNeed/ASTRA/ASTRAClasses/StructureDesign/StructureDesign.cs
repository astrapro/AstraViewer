using System;
using System.Collections.Generic;
using System.Collections;
using System.Text;
using System.IO;
using HEADSNeed.ASTRA.ASTRAClasses;
using MovingLoadAnalysis.DataStructure;
using MovingLoadAnalysis;

using System.Windows.Forms;

namespace HEADSNeed.ASTRA.ASTRAClasses.StructureDesign
{
    public class StructureDesign
    {
        CAnalysis Analysis { get; set; }

        Hashtable mbrTab { get; set; }

        string Input_File { get; set; }
        public StructureDesign(string file_name)
        {
            Input_File = file_name;
            Analysis = new CAnalysis(file_name);
        }

        public string Working_Folder
        {
            get
            {
                return Path.GetDirectoryName(Input_File);
            }
        }

        public string Temp_Folder
        {
            get
            {
                string ds = Path.Combine(Working_Folder, "TEMP");
                if (!Directory.Exists(ds))
                    Directory.CreateDirectory(ds);
                return ds;
            }
        }

        public string Dummy_File
        {
            get
            {

                return Path.Combine(Temp_Folder, "DUMMY.TXT");
            }
        }
        public string Members_File
        {
            get
            {
                return Path.Combine(Temp_Folder, "MEMBERS.TXT");
            }
        }
        public string Beams_Columns_File
        {
            get
            {
                return Path.Combine(Temp_Folder, "BEAMS_COLUMNS.TXT");
            }
        }
        public string Floors_File
        {
            get
            {
                return Path.Combine(Temp_Folder, "FLOORS.TXT");
            }
        }

        public void Create_Members()
        {
            //JointCoordinateCollection jcc = new JointCoordinateCollection();
            //Analysis = new CAnalysis(file_name);

            MovingLoadAnalysis.JointNodeCollection jnc = new MovingLoadAnalysis.JointNodeCollection();

            MovingLoadAnalysis.JointNode jc = new MovingLoadAnalysis.JointNode();

            MovingLoadAnalysis.Member mbr;
            kMemberCollection mc = new kMemberCollection();

            int jcount = Analysis.Joints.Count;

            jnc = Analysis.Joints;
            jcount = jnc[jcount - 1].NodeNo;

            List<string> members = new List<string>();

            ASTRADoc doc = new ASTRADoc(Analysis.AnalysisFileName);
            string kStr = "";
            string mText = "";
            int mno = 1;



            mbrTab = new Hashtable();

            for (int i = 0; i < Analysis.Members.Count; i++)
            {
                var mb = Analysis.Members[i];

                kStr = mb.MemberNo + "  ";
                mText = "";

                jc = new MovingLoadAnalysis.JointNode();
                jc.NodeNo = ++jcount;
                jc.XYZ = (mb.StartNode.XYZ + mb.EndNode.XYZ) / 2.0;
                jnc.Add(jc);


                mbr = new MovingLoadAnalysis.Member();
                mbr.MemberNo = mno++;
                mbr.StartNode.NodeNo = mb.StartNode.NodeNo;
                mbr.EndNode.NodeNo = jc.NodeNo;

                kStr += mbr.MemberNo + "  ";
                mText += mbr.MemberNo + "  ";
                mc.Add(mbr);

                mbr = new MovingLoadAnalysis.Member();
                mbr.MemberNo = mno++;
                mbr.StartNode.NodeNo = jc.NodeNo;
                mbr.EndNode.NodeNo = mb.EndNode.NodeNo;

                kStr += mbr.MemberNo;
                mText += mbr.MemberNo;
                mc.Add(mbr);

                members.Add(kStr);

                mbrTab.Add(mb.MemberNo, mText);
            }
            mc.SetCoordinates(jnc);
            string ss = "";

            List<string> file_content = new List<string>(File.ReadAllLines(Analysis.AnalysisFileName));
            List<string> list = new List<string>();

            //list.Add("ASTRA SPACE EXAMPLE");
            //list.Add("UNIT KN M");
            //list.Add("JOINT COORDINATE");

            bool flag = true;
            for (int j = 0; j < file_content.Count; j++)
            {
                if (file_content[j].StartsWith("JOINT COOR"))
                {
                    list.Add(file_content[j]);
                    for (int i = 0; i < jnc.Count; i++)
                    {
                        list.Add(jnc[i].ToString());
                    }
                    flag = false;
                }
                else if (file_content[j].StartsWith("MEMBER INCI") ||
                    file_content[j].StartsWith("MEMBER CONN"))
                {
                    list.Add(file_content[j]);
                    for (int i = 0; i < mc.Count; i++)
                    {
                        list.Add(mc[i].ToString());
                    }
                    flag = false;
                }
                else
                {
                    if (flag)
                    {

                        if (file_content[j].StartsWith("MEMB LOAD") ||
                          file_content[j].StartsWith("MEMBER LOAD"))
                        {
                            //flag = true;

                            while (!file_content[j].StartsWith("JOINT") &&
                                      !file_content[j].StartsWith("LOAD") &&
                                      !file_content[j].StartsWith("PRINT") &&
                                      file_content.Count < j)
                            {
                                kStr = Replace_Member(file_content[j]);
                                list.Add(kStr);
                                j++;
                            }
                            //list.Add(file_content[j]);
                        }
                        list.Add(file_content[j]);
                    }
                    else
                    {
                        if (file_content[j].StartsWith("UNIT") ||
                            file_content[j].StartsWith("SECTION") ||
                            file_content[j].StartsWith("MEMBER PROP"))
                        {
                            flag = true;


                            while (!file_content[j].StartsWith("MAT"))
                            {
                                kStr = Replace_Member(file_content[j]);
                                list.Add(kStr);
                                j++;
                            }
                            list.Add(file_content[j]);
                        }

                    }
                }

            }

            //list.Add("MEMBER INCIDENCES");
            //for (int i = 0; i < mc.Count; i++)
            //{
            //    list.Add(mc[i].ToString());
            //}
            //list.Add("FINISH");


            //string folder = Path.Combine(Path.GetDirectoryName(Analysis.AnalysisFileName), "TEMP");

            //if (!Directory.Exists(folder))
            //    Directory.CreateDirectory(folder);


            //string fname = Path.Combine(folder, "dummy.txt");
            System.IO.File.WriteAllLines(Dummy_File, list.ToArray());

            //fname = Path.Combine(folder, "members.txt");
            System.IO.File.WriteAllLines(Members_File, members.ToArray());
        }

        public void Write_Beam_Column_Members()
        {
            List<int> beams = new List<int>();
            List<int> columns = new List<int>();

            for (int i = 0; i < Analysis.Members.Count; i++)
            {
                var mb = Analysis.Members[i];

                if (mb.StartNode.Y == mb.EndNode.Y)
                    beams.Add(mb.MemberNo);
                else
                    columns.Add(mb.MemberNo);
            }

            List<string> list = new List<string>();

            string folder = Path.Combine(Path.GetDirectoryName(Analysis.AnalysisFileName), "TEMP");

            if (!Directory.Exists(folder))
                Directory.CreateDirectory(folder);


            string fname = Path.Combine(folder, "beam_columns.txt");


            if (beams.Count > 0)
                list.Add("BEAM MEMBERS");
            foreach (var item in beams)
            {
                list.Add(item.ToString());
            }
            if (columns.Count > 0)
                list.Add("COLUMN MEMBERS");
            foreach (var item in columns)
            {
                list.Add(item.ToString());
            }

            System.IO.File.WriteAllLines(Beams_Columns_File, list.ToArray());

        }
        public void Write_Floors()
        {
            kMemberCollection beams = new kMemberCollection();
            kMemberCollection columns = new kMemberCollection();

            //List<kMember> beams

            for (int i = 0; i < Analysis.Members.Count; i++)
            {
                var mb = Analysis.Members[i];

                if (mb.StartNode.Y == mb.EndNode.Y)
                    beams.Add(mb);
                else
                    columns.Add(mb);
            }

            List<string> list = new List<string>();



            double brg_ang = beams[0].StartNode.XYZ.GetAngle(beams[0].EndNode.XYZ);
            brg_ang = beams[7].StartNode.XYZ.GetAngle(beams[7].EndNode.XYZ);
            brg_ang = beams[8].StartNode.XYZ.GetAngle(beams[8].EndNode.XYZ);
            brg_ang = beams[10].StartNode.XYZ.GetAngle(beams[0].EndNode.XYZ);



            //brg_ang = columns[0].StartNode.XYZ.Direction(columns[0].EndNode.XYZ);

            VectorDraw.Geometry.Vector vec = columns[0].StartNode.XYZ.Direction(columns[0].EndNode.XYZ);

            vec = beams[0].StartNode.XYZ.Direction(beams[0].EndNode.XYZ);

            vec = beams[1].StartNode.XYZ.Direction(beams[1].EndNode.XYZ);


            vec = beams[2].StartNode.XYZ.Direction(beams[2].EndNode.XYZ);
            vec = beams[7].StartNode.XYZ.Direction(beams[7].EndNode.XYZ);
            vec = beams[1].StartNode.XYZ.Direction(beams[1].EndNode.XYZ);
            vec = beams[7].EndNode.XYZ.Direction(beams[7].StartNode.XYZ);
            vec = beams[7].EndNode.XYZ.Direction(beams[7].StartNode.XYZ);

            brg_ang = brg_ang * (180 / Math.PI);
            brg_ang = brg_ang * (Math.PI / 180);

            kMemberCollection floor = new kMemberCollection();

            VectorDraw.Geometry.Vector v1, v2;
            if (beams.Count > 0)
            {
                var mb = beams[0];
                v1 = mb.StartNode.XYZ.Direction(mb.EndNode.XYZ);

                floor.Clear();
                floor.Add(mb);

                for (int i = 1; i < beams.Count; i++)
                {
                    if (mb.EndNode.NodeNo == beams[i].StartNode.NodeNo)
                    {
                        v2 = beams[i].StartNode.XYZ.Direction(beams[i].EndNode.XYZ);
                        if (v1 != v2)
                        {
                            floor.Add(beams[i]);
                            mb = beams[i];
                            v1 = mb.StartNode.XYZ.Direction(mb.EndNode.XYZ);
                            i = 1;

                            if (floor.Count == 4) break;
                        }
                    }
                }
            }






            System.IO.File.WriteAllLines(Floors_File, list.ToArray());

        }

        public string Replace_Member(string kStr)
        {
            MyStrings sText = new MyStrings(MyStrings.RemoveAllSpaces(kStr), ';');

            List<string> list = new List<string>();

            for (int c = 0; c < sText.Count; c++)
            {

                kStr = sText.StringList[c];

                MyStrings mlist = new MyStrings(MyStrings.RemoveAllSpaces(kStr), ' ');

                string ss = "";



                List<int> lsint = MyStrings.Get_Array_Intiger(kStr);
                try
                {

                    if (lsint.Count == 0) return kStr;


                    foreach (var item in lsint)
                    {
                        ss += mbrTab[item] + " ";

                    }




                    for (int i = 0; i < mlist.Count; i++)
                    {
                        if (mlist.StringList[i].StartsWith("PR") ||
                            mlist.StringList[i].StartsWith("XD") ||
                            mlist.StringList[i].StartsWith("YD") ||
                            mlist.StringList[i].StartsWith("ZD") ||
                            mlist.StringList[i].StartsWith("AX") ||
                            mlist.StringList[i].StartsWith("IX") ||
                            mlist.StringList[i].StartsWith("IY") ||
                            mlist.StringList[i].StartsWith("IZ") ||
                            mlist.StringList[i].StartsWith("UNI") ||
                            mlist.StringList[i].StartsWith("CON"))
                        {
                            ss = MyList.Get_Array_Text(MyList.Get_Array_Intiger(ss)) + " " + mlist.GetString(i);
                            break;
                        }
                        //else
                        //{
                        //    ss += mbrTab[mlist.GetInt(i)] + " ";
                        //}
                    }
                    kStr = ss;

                    list.Add(ss);
                }
                catch (Exception ex) { }

            }

            if (list.Count > 0)
            {
                kStr = "";
                foreach (var item in list)
                {
                    kStr += item + ";";

                }
            }



            return kStr;
        }
    }

    public class SlabDesign
    {

        public SlabDesign()
        {
            D = 0.0;
            fck = 0.0;
            gamma = 0.0;
            fy = 0.0;
            wll = 0.0;
            d1 = 0.0;
            d2 = 0.0;
            d3 = 0.0;
            cover = 0.0;
            dlf = 0.0;
            llf = 0.0;

            BOQ = new Slab_BOQ();
        }

        public string Beam_Nos { get; set; }
        public ASTRADoc AST_DOC { get; set; }

        //spacings
        public double s1, s2, s3, s4;
        public double D, fck, gamma, fy, wll, d1, d2, d3, d4, dlf, llf;
        public double cover;
        public int case_index = 1;
        public double Floor_Level { get; set; }
        public double Lx, Ly;


        public string Report_File { get; set; }

        public DataGridView dgv_dls { get; set; }

        public bool IS_DESIGN_OK { get; set; }

        public Slab_BOQ BOQ { get; set; }

        //Chiranjit [2015 04 28]
        public List<string> Design_Summary { get; set; }
        public List<string> BOQ_Summary { get; set; }


        public void Calculate_Program()
        {
            IS_DESIGN_OK = true;

            Steel_Reinforcement ssr = new Steel_Reinforcement();

            MyList ml = new MyList(Beam_Nos.Replace(',', ' ').TrimEnd(), ' ');

            SlabConfig sconf = new SlabConfig();

            sconf.Set_Members(Beam_Nos, AST_DOC);


            MemberIncidenceCollection mic = new MemberIncidenceCollection();


            mic = sconf.Get_All_Members();
            //int beam1 = MyList.StringToInt(txt_slab_beam1.Text, 0);
            //int beam2 = MyList.StringToInt(txt_slab_beam2.Text, 0);
            //int beam3 = MyList.StringToInt(txt_slab_beam3.Text, 0);
            //int beam4 = MyList.StringToInt(txt_slab_beam4.Text, 0);

            BOQ = new Slab_BOQ();
            BOQ.BeamNos = Beam_Nos;
            BOQ.Steel_Reinforcement.Clear();

            if (false)
            {
                int beam1 = ml.GetInt(0);
                int beam2 = ml.GetInt(1);
                int beam3 = ml.GetInt(2);
                int beam4 = ml.GetInt(3);
                #region  Beam Check
                MemberIncidence mi = AST_DOC.Members.Get_Member(beam1);


                if (mi == null)
                {
                    MessageBox.Show("Beam 1 data not accepted.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                MemberIncidence mi2 = AST_DOC.Members.Get_Member(beam2);

                if (mi2 == null)
                {
                    MessageBox.Show("Beam 2 data not accepted.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                MemberIncidence mi3 = AST_DOC.Members.Get_Member(beam3);
                if (mi3 == null)
                {
                    MessageBox.Show("Beam 3 data not accepted.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                MemberIncidence mi4 = AST_DOC.Members.Get_Member(beam4);

                if (mi4 == null)
                {
                    MessageBox.Show("Beam 4 data not accepted.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }


                mic.Add(mi);
                mic.Add(mi2);
                mic.Add(mi3);
                mic.Add(mi4);


                string msg = "";
                bool flag = false;

                int coor_flag = 0;


                if ((mi.EndNode.NodeNo == mi2.StartNode.NodeNo) ||
                    (mi.EndNode.NodeNo == mi2.EndNode.NodeNo))
                {
                    flag = true;
                    coor_flag = 0;
                }
                else if ((mi.StartNode.NodeNo == mi2.StartNode.NodeNo) ||
                    (mi.StartNode.NodeNo == mi2.EndNode.NodeNo))
                {
                    flag = true;
                    coor_flag = 1;
                }
                else
                {
                    flag = false;

                    msg = string.Format("Beam 1 : {0} [{1} {2}], Beam 2 : {3} [{4} {5}] Joint Mismatch....\n\n",
                        mi.MemberNo, mi.StartNode.NodeNo, mi.EndNode.NodeNo,
                        mi2.MemberNo, mi2.StartNode.NodeNo, mi2.EndNode.NodeNo);
                }
                if (flag)
                {
                    if ((mi2.EndNode.NodeNo == mi3.StartNode.NodeNo) ||
                         (mi2.EndNode.NodeNo == mi3.EndNode.NodeNo) ||
                         (mi2.StartNode.NodeNo == mi3.StartNode.NodeNo) ||
                         (mi2.StartNode.NodeNo == mi3.EndNode.NodeNo))
                    {
                        flag = true;
                    }
                    else
                    {
                        flag = false;

                        msg = string.Format("Beam 2 : {0} [{1} {2}], Beam 3 : {3} [{4} {5}] Joint Mismatch....\n\n",
                               mi2.MemberNo, mi2.StartNode.NodeNo, mi2.EndNode.NodeNo,
                            mi3.MemberNo, mi3.StartNode.NodeNo, mi3.EndNode.NodeNo);
                    }
                }
                if (flag)
                {
                    if ((mi3.StartNode.NodeNo == mi4.StartNode.NodeNo) ||
                         (mi3.StartNode.NodeNo == mi4.EndNode.NodeNo) ||
                         (mi3.EndNode.NodeNo == mi4.StartNode.NodeNo) ||
                         (mi3.EndNode.NodeNo == mi4.EndNode.NodeNo))
                    {
                        flag = true;
                    }
                    else
                    {
                        msg = string.Format("Beam 3 : {0} [{1} {2}], Beam 4 : {3} [{4} {5}] Joint Mismatch....\n\n",
                              mi3.MemberNo, mi3.StartNode.NodeNo, mi3.EndNode.NodeNo,
                              mi4.MemberNo, mi4.StartNode.NodeNo, mi4.EndNode.NodeNo);

                        flag = false;
                    }
                }
                if (flag)
                {

                    if ((mi4.StartNode.NodeNo == mi.StartNode.NodeNo) ||
                         (mi4.EndNode.NodeNo == mi.StartNode.NodeNo))
                    {
                        flag = true;
                    }
                    else if ((mi4.StartNode.NodeNo == mi.EndNode.NodeNo) ||
                         (mi4.EndNode.NodeNo == mi.EndNode.NodeNo))
                    {
                        flag = true;
                    }
                    else
                    {
                        flag = false;

                        msg = string.Format("Beam 4 : {0} [{1} {2}], Beam 1 : {3} [{4} {5}] Joint Mismatch....\n\n",
                            //msg = string.Format("Beam 4 [{0} {1}], Beam 1 [{2} {3}] Joint Mismatch....\n\n",
                              mi4.MemberNo, mi4.StartNode.NodeNo, mi4.EndNode.NodeNo,
                              mi.MemberNo, mi.StartNode.NodeNo, mi.EndNode.NodeNo);

                    }
                }
                if (!flag)
                {
                    MessageBox.Show(msg + "Data not accepted.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    return;
                }
                #endregion  Beam Check
            }

            List<string> list = new List<string>();

            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*            DESIGN OF RCC SLAB              *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");

            #endregion

            #region  STEP 1 : Structure Data from Analysis Input File

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------------------------"));
            list.Add(string.Format("STEP 1 : Structure Data from Analysis Input File"));
            list.Add(string.Format("---------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------------------------------------------------------------------------"));
            list.Add(string.Format("  Beam#   Member#   Joint1        X         Y           Z      Joint2         X         Y           Z       Length"));
            list.Add(string.Format("--------------------------------------------------------------------------------------------------------------------"));
            for (int i = 0; i < mic.Count; i++)
            {
                list.Add(string.Format("{0,5} {1,9} {2,8} {3,12:f3} {4,10:f3} {5,10:f3} {6,8} {7,12:f3} {8,10:f3} {9,10:f3} {10,10:f3}", (i + 1),
                    mic[i].MemberNo,
                    mic[i].StartNode.NodeNo,
                    mic[i].StartNode.Point.x,
                    mic[i].StartNode.Point.y,
                    mic[i].StartNode.Point.z,
                    mic[i].EndNode.NodeNo,
                    mic[i].EndNode.Point.x,
                    mic[i].EndNode.Point.y,
                    mic[i].EndNode.Point.z,
                    mic[i].Length));
            }
            list.Add(string.Format("--------------------------------------------------------------------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion  STEP 1 : Structure Data from Analysis Input File


            #region User Input Data
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------"));
            list.Add(string.Format("USER INPUT DATA"));
            list.Add(string.Format("----------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("STRUCTURE DATA"));
            list.Add(string.Format("---------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add("Position & Case Type of Slab");
            list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add("Case 4");
            list.Add(string.Format("Case {0} {1}", case_index + 1, Get_Type(case_index)));

            list.Add(string.Format(""));
            //list.Add(string.Format("                                   Ly                      "));
            //list.Add(string.Format("                     -----------------------------"));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                  Lx |                           | Lx  "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     -----------------------------"));
            //list.Add(string.Format("                                   Ly              "));
            //list.Add(string.Format(""));
            //double Lx = Math.Min(mic[0].Length, mic[1].Length);
            //double Ly = Math.Max(mic[0].Length, mic[1].Length);

            double Lx = Math.Min(sconf.Length_A, sconf.Length_B);
            double Ly = Math.Max(sconf.Length_A, sconf.Length_B);

            list.Add(string.Format("Lx = {0:f3} m,     Ly = {1:f3} m", Lx, Ly));

            BOQ.Section_D = Lx;
            BOQ.Section_B = Ly;
            BOQ.Floor_ELevation = mic[0].StartNode.Y;
            BOQ.Slab_Thickness = D;
            BOQ.Floor_Area = Lx * Ly;

            //double D, fck, gamma, fy, wll, d1, d2, d3, d4, dlf, llf;

            //D = MyList.StringToDouble(txt_slab_D.Text, 0.0);
            //fck = MyList.StringToDouble(cmb_slab_fck.Text.Replace("M", ""), 0.0);
            //gamma = MyList.StringToDouble(txt_slab_gamma.Text, 0.0);
            //fy = MyList.StringToDouble(cmb_slab_fy.Text.Replace("Fe", ""), 0.0);
            //wll = MyList.StringToDouble(txt_slab_wll.Text, 0.0);
            //d1 = MyList.StringToDouble(txt_slab_d1.Text, 0.0);
            //d2 = MyList.StringToDouble(txt_slab_d2.Text, 0.0);
            //d3 = MyList.StringToDouble(txt_slab_d3.Text, 0.0);
            //d4 = MyList.StringToDouble(txt_slab_c.Text, 0.0);
            //dlf = MyList.StringToDouble(txt_slab_DLF.Text, 0.0);
            //llf = MyList.StringToDouble(txt_slab_LLF.Text, 0.0);



            list.Add(string.Format(""));
            list.Add(string.Format("DESIGN DATA"));
            list.Add(string.Format("------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall Thickness of Slab = D = {0} mm", D));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = M{0}", fy));
            list.Add(string.Format("Unit Weight of Concrete = γc = {0} kN/Cu.m", gamma));
            list.Add(string.Format("Live Load = WLL = {0} kN/Sq.m", wll));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bars in Shorter Direction at Bottom"));
            list.Add(string.Format("Diameter of Bars = d1 = {0} mm, Spacing = s1 = {1} mm", d1, s1));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bars in Longer Direction at Bottom"));
            list.Add(string.Format("Diameter of Bars = d2 = {0} mm, Spacing = s2 = {1} mm", d2, s2));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Bars in Edge Strip at Top"));
            list.Add(string.Format("Diameter of Bars = d3 = {0} mm, Spacing = s3 = {1} mm", d3, s3));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Bars in Corners at Top & Bottom"));
            list.Add(string.Format("Diameter of Bars = d4 = {0} mm, Spacing = s4 = {1} mm", cover, s4));




            //list.Add(string.Format("Diameter of Main Reinforcement Bars in Edge Strip at Bottom = d2 = {0} mm", d2));
            //list.Add(string.Format("Diameter of Main Reinforcement Bars in Corners at Top & Bottom = d3 = {0} mm", d3));
            list.Add(string.Format("Cover for Reinforcement = c = {0} mm", cover));
            list.Add(string.Format("Dead Load Factor = DLF = {0}", dlf));
            list.Add(string.Format("Live Load Factor = LLF = {0}", llf));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion User Input Data


            double LY_by_LX = Ly / Lx;
            list.Add(string.Format("Ly = {0:f3} m,    Lx = {1:f3} m,   Ly/Lx = {0:f3}/{1:f3} = {2:f3}", Ly, Lx, LY_by_LX));
            list.Add(string.Format(""));

            //if (LY_by_LX < 2.0)
            //    list.Add(string.Format("This is Two Way Slab Type"));
            //else
            //    list.Add(string.Format("This is One Way Slab Type"));
            list.Add(string.Format(""));



            #region  STEP 2 : Effective Depth

            list.Add(string.Format("-------------------------"));
            list.Add(string.Format("STEP 2 : Effective Depth"));
            list.Add(string.Format("-------------------------"));
            list.Add(string.Format(""));

            double d = D - (d1 / 2) - cover;
            list.Add(string.Format("Effective Depth = d = D - (d1 / 2) - c"));
            list.Add(string.Format("                    = {0} - ({1} / 2) - {2}", D, d1, cover));
            list.Add(string.Format("                    = {0:f3} mm", d));
            list.Add(string.Format(""));

            #endregion STEP 2 : Effective Depth

            #region STEP 3 : Design Load

            list.Add(string.Format("---------------------"));
            list.Add(string.Format("STEP 3 : Design Load"));
            list.Add(string.Format("---------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Define Dead Loads"));
            list.Add(string.Format("------------------"));

            double WDL = D / 1000 * gamma;
            //list.Add(string.Format("Dead Load = WDL = D x 1.0 x γ = ({0}/1000) x 1.0 x {1} = {2:f3} kN/Sq.m ", D, gamma, WDL));

            double dl_sw = WDL;
            list.Add(string.Format("Self Weight = (D/1000) x 1.0 x γ = ({0}/1000) x 1.0 x {1} = {2:f3} kN/Sq.m ", D, gamma, WDL));
            list.Add(string.Format(""));
            if (dgv_dls != null)
            {
                for (int i = 0; i < dgv_dls.RowCount - 1; i++)
                {
                    try
                    {
                        list.Add(string.Format("{0}   = {1:f3} kN/Sq.m", dgv_dls[0, i].Value, dgv_dls[1, i].Value));
                        WDL += MyList.StringToDouble(dgv_dls[1, i].Value.ToString(), 0.0);
                    }
                    catch (Exception exx) { }
                }
            }
            list.Add(string.Format(""));
            list.Add(string.Format("Total Dead Load = WDL = {0:f3} kN/Sq.m", WDL));
            list.Add(string.Format(""));




            list.Add(string.Format("Live Load = WLL = {0} kN/Sq.m", wll));
            list.Add(string.Format(""));

            double w = WDL * dlf + wll * llf;
            list.Add(string.Format("Design Load = w = WDL x DLF + WLL x LLF"));
            list.Add(string.Format("                = {0:f3} x {1} + {2:f3} x {3}", WDL, dlf, wll, llf));
            list.Add(string.Format("                = {0:f3} kN/Sq.m", w));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            #endregion STEP 2 : Design Load

            #region STEP 4 : Type of Slab

            //list.Add(string.Format("STEP 4 : Type of Slab"));
            list.Add(string.Format("------------------------------"));
            list.Add(string.Format("STEP 4 : Design Coefficients"));
            list.Add(string.Format("------------------------------"));
            list.Add(string.Format(""));
            //double LY_by_LX = Ly / Lx;
            //list.Add(string.Format("Ly = {0:f3} m,    Lx = {1:f3} m,   Ly/Lx = {0:f3}/{1:f3} = {2:f3}", Ly, Lx, LY_by_LX));
            //list.Add(string.Format(""));

            //if (LY_by_LX < 2.0)
            //    list.Add(string.Format("This is Two Way Slab Type"));
            //else
            //    list.Add(string.Format("This is One Way Slab Type"));
            //list.Add(string.Format(""));

            //To add more cases
            //list.Add(string.Format("Two Adjacent Edges are Discontinuous - Case 4"));





            //list.Add(string.Format("{0} - Case {1}", cmb_slab_type.Text, cmb_slab_type.SelectedIndex + 1));
            list.Add(string.Format("{0} - Case {1}", Get_Type(case_index), case_index + 1));
            list.Add(string.Format(""));


            double beta_x = 0.084;
            double beta_y = 0.063;
            double alpha_x = 0.047;
            double alpha_y = 0.035;

            Tables.Get_Bending_Moment_Coefficients(out beta_x, out  beta_y, out  alpha_x, out  alpha_y, LY_by_LX, case_index);

            beta_x = Math.Pow(LY_by_LX, 4.0) / (8 * (1 + Math.Pow(LY_by_LX, 4.0)));
            beta_y = Math.Pow(LY_by_LX, 2.0) / (8 * (1 + Math.Pow(LY_by_LX, 4.0)));


            list.Add(string.Format("βx = {0:f4},   βy = {1:f4},   ", beta_x, beta_y));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment Coefficients for Simply Supported Two-Way Slabs"));
            list.Add(string.Format(""));
            list.Add(string.Format("   βx = (Ly/Lx)^4 / (8 x (1 + (Ly/Lx)^4))"));
            list.Add(string.Format("      = ({0:f3})^4 / (8 x (1 + ({0:f3})^4))", LY_by_LX));
            list.Add(string.Format("      = {0:f3}", beta_x));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("   βy = (Ly/Lx)^2 / (8 x (1 + (Ly/Lx)^4))"));
            list.Add(string.Format("      = ({0:f3})^2 / (8 x (1 + ({0:f3})^4))", LY_by_LX));
            list.Add(string.Format("      = {0:f3}", beta_y));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("  αx = {0:f4},   αy = {1:f4},   (from TABLE 1)", alpha_x, alpha_y));
            #endregion STEP 3 : Type of Slab

            #region STEP 5 : Check for Shear


            list.Add(string.Format(""));
            list.Add(string.Format("------------------------"));
            list.Add(string.Format("STEP 5 : Check for Shear"));
            list.Add(string.Format("------------------------"));
            list.Add(string.Format(""));

            double gamma_x1 = 0.57;
            double gamma_x2 = 0.38;
            double gamma_x3 = 0.57;
            double gamma_x4 = 0.38;


            Tables.Get_Shear_Force_Coefficients(out gamma_x1, out  gamma_x2, out  gamma_x3, out  gamma_x4, LY_by_LX, case_index);


            double gamma_x_max = Math.Max(gamma_x1, gamma_x2);

            list.Add(string.Format(""));
            list.Add(string.Format("Case {0} ,  γx = {1:f4} and {2:f4},   γx_max = {3:f4}   (from Table 2)", case_index + 1, gamma_x1, gamma_x2, gamma_x_max));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Shear Force = V = γx_max  x  w  x Lx "));

            double V = gamma_x_max * w * Lx;
            list.Add(string.Format("                        = {0:f4}  x {1:f3} x {2:f3} ", gamma_x_max, w, Lx));
            list.Add(string.Format("                        = {0:f3} kN", V));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double v = (V * 1000) / (1000 * d);
            list.Add(string.Format("Shear Stress = v = (V x 1000) / (1000 x d)"));
            list.Add(string.Format("                 = ({0:f3} x 1000) / (1000 x {1:f3})", V, d));
            list.Add(string.Format("                 = {0:f3} N/Sq.mm", v));
            list.Add(string.Format(""));






            //Bar Diameter = 12 mm

            double Abar = Math.PI * d1 * d1 / 4.0;


            double p = (Abar * 100.0) / (D * d);
            //sw.WriteLine("Percentage of Steel = p = ({0} * 100) / ({1} * {2})", bar_ast, (b * 1000), d);
            //sw.WriteLine("                        = {0:f2}%", p);
            //sw.WriteLine();


            //double tab_value = 0.29; // from Table 3
            string ref_str = "";
            double tab_value = Tables.Permissible_Shear_Stress(p, (int)fck, ref ref_str);
            if (tab_value > v)
                list.Add(string.Format("Minimum Shear Strength for M{0} Grade Concrete = {1:f3} (TABLE 3) > {2:f3} , OK", fck, tab_value, v));
            else
            {
                list.Add(string.Format("Minimum Shear Strength for M{0} Grade Concrete = {1:f3} (TABLE 3) < {2:f3} , NOT OK", fck, tab_value, v));
                IS_DESIGN_OK = false;
            }
            list.Add(string.Format(""));


            #endregion STEP 4 : Check for Shear

            #region STEP 6 : Bending Moment

            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------"));
            list.Add(string.Format("STEP 6 : Bending Moment"));
            list.Add(string.Format("-----------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format("STEP 6.1 : Shorter Direction"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Continuous Edge"));
            list.Add(string.Format(""));


            double M1 = beta_x * w * Lx * Lx;
            list.Add(string.Format("   M1 = βx  x  w  x  Lx^2"));
            list.Add(string.Format("      = {0:f4}  x  {1:f3}  x  {2:f3}^2", beta_x, w, Lx));
            list.Add(string.Format("      = {0:f4} kN-m", M1));

            list.Add(string.Format(""));
            list.Add(string.Format("Positive Bending Moment at Mid Span"));
            list.Add(string.Format(""));
            double M2 = beta_y * w * Lx * Lx;
            list.Add(string.Format("   M2 = βy  x  w  x  Lx^2"));
            list.Add(string.Format("      = {0:f4}  x  {1:f3}  x  {2:f3}^2", beta_y, w, Lx));
            list.Add(string.Format("      = {0:f4} kN-m", M2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Discontinuous Edge"));
            list.Add(string.Format(""));

            double M3 = M2 / 2.0;
            list.Add(string.Format("   M3 =  (Positive BM at Mid Span) / 2 = M2 / 2 = {0:f3}/2 = {1:f3} kN-m", M2, M3));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format("STEP 6.2 : Longer Direction"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double alpha_min = Math.Min(alpha_x, alpha_y);
            list.Add(string.Format("αx = {0:f4},   αy = {1:f4},    α_min = {2:f4}", alpha_x, alpha_y, alpha_min));
            list.Add(string.Format(""));
            list.Add(string.Format("Positive Bending Moment at Mid Span"));
            list.Add(string.Format(""));


            double M4 = alpha_min * w * Lx * Lx;
            list.Add(string.Format("   M4 = α_min x w x Lx^2"));
            list.Add(string.Format("      = {0:f4} x {1:f3} x  {2:f3}^2", alpha_min, w, Lx));
            list.Add(string.Format("      = {0:f3} kN-m", M4));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Continuous Edge"));
            list.Add(string.Format(""));

            double M5 = (4.0 / 3.0) * M4;
            list.Add(string.Format("   M5 = (4 / 3) x M4 = (4 / 3) x {0:f3} = {1:f3} kN-m", M4, M5));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Discontinuous Edge"));
            list.Add(string.Format(""));
            double M6 = (1.0 / 2.0) * M4;
            list.Add(string.Format("   M6 = (1 / 2) x M4 = (1 / 2) x {0:f3} = {1:f3} kN-m", M4, M6));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion STEP 5 : Bending Moment

            #region STEP 7 : Reinforcement Steel

            list.Add(string.Format("----------------------------"));
            list.Add(string.Format("STEP 7 : Reinforcement Steel"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Diameter = {0} mm", d1));
            list.Add(string.Format(""));
            Abar = Math.PI * d1 * d1 / 4.0;
            list.Add(string.Format("Area of Bar = Abar = 3.1416 x {0}^2 / 4 = {1:f3} Sq.mm.", d1, Abar));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double M = M1;

            double j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            //double j = 0.5 + Math.Pow((0.25 - ((M * 1000000) / (0.87 * fck * 1000 * d1 * d1))), 0.5);
            double Ast = (M * 1000000) / (0.87 * fy * d * j);
            double Spacing = (1000 * Abar) / (Ast);










            List<double> list_j = new List<double>();
            List<double> list_Ast = new List<double>();
            List<double> list_spacing = new List<double>();




            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            #region   Short Direction (Mid Span)

            M = M1;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------"));
            list.Add(string.Format("STEP 7.1 Shorter Direction (Mid Span, at Bottom)"));
            list.Add(string.Format("-------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M1 = {0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M2 x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                             = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                             = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d1 = {0} mm. and spacing = s1 = {1} mm.)", d1, s1));
            list.Add(string.Format(""));
            Abar = Math.PI * d1 * d1 / 4.0;
            double Ast1 = Abar * (1000 / s1);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d1, s1));
            if (Ast1 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast1, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast1, Ast));
            }


            list.Add(string.Format(""));
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AS[1]";
            ssr.Number_Of_Bars = (int)(1000 / s1);
            ssr.Bar_Dia = d1;
            ssr.Length = Lx;

            BOQ.Steel_Reinforcement.Add(ssr);


            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AS[1]", d1, s1));

            #endregion Proposed Area of Steel


            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));
            #endregion   Short Direction (Mid Span)

            #region Longer Direction (Mid Span, at Bottom)

            M = M2;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format("STEP 7.2 : Longer Direction (Mid Span, at Bottom)"));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M2 = {0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d1 x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d2 = {0} mm. and spacing = s2 = {1} mm.)", d2, s2));
            list.Add(string.Format(""));
            Abar = Math.PI * d2 * d2 / 4.0;
            double Ast2 = Abar * (1000 / s2);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d2, s2));
            if (Ast2 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast2, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast2, Ast));
            }


            list.Add(string.Format(""));

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AS[2]";
            ssr.Number_Of_Bars = (int)(1000 / s2);
            ssr.Bar_Dia = d2;
            ssr.Length = Ly;

            BOQ.Steel_Reinforcement.Add(ssr);

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AS[2]", d2, s2));

            #endregion Proposed Area of Steel




            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));
            #endregion   Long Direction (Mid Span)


            #region Shorter Direction (Continuous Edge, at Top)

            M = M3;

            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format("STEP 7.3 : Shorter Direction (Continuous Edge, at Top)"));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M3 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d3 = {0} mm. and spacing = s3 = {1} mm.)", d3, s3));
            list.Add(string.Format(""));
            Abar = Math.PI * d3 * d3 / 4.0;
            double Ast3 = Abar * (1000 / s3);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d3, s3));
            if (Ast3 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast3, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast3, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AS[3]";
            ssr.Number_Of_Bars = (int)(1000 / s3);
            ssr.Bar_Dia = d3;
            ssr.Length = Lx;

            BOQ.Steel_Reinforcement.Add(ssr);


            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AS[3]", d3, s3));

            #endregion Proposed Area of Steel

            list.Add(string.Format(""));

            #endregion Shorter Direction (Continuous Edge)



            #region   Short Direction (Discontinuous Edge)

            M = M4;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format("STEP 7.4 : Short Direction (Discontinuous Edge, at Top)"));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M4 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d4 = {0} mm. and spacing = s4 = {1} mm.)", d4, s4));
            list.Add(string.Format(""));
            Abar = Math.PI * d4 * d4 / 4.0;
            double Ast4 = Abar * (1000 / s4);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d4, s4));
            if (Ast4 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast4, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast4, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AS[4]";
            ssr.Number_Of_Bars = (int)(1000 / s4);
            ssr.Bar_Dia = d4;
            ssr.Length = Lx;

            BOQ.Steel_Reinforcement.Add(ssr);

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AS[4]", d4, s4));

            #endregion Proposed Area of Steel




            list.Add(string.Format(""));
            #endregion   Short Direction (Discontinuous Edge)


            #region   Long Direction (Continuous Edge)

            M = M5;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------------------------"));
            list.Add(string.Format("STEP 7.5 : Longer Direction (Continuous Edge, at Top)"));
            list.Add(string.Format("------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M5 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));


            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d3 = {0} mm. and spacing = s3 = {1} mm.)", d3, s3));
            list.Add(string.Format(""));
            Abar = Math.PI * d3 * d3 / 4.0;
            double Ast5 = Abar * (1000 / s3);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d3, s3));
            if (Ast5 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast5, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast5, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AS[5]";
            ssr.Number_Of_Bars = (int)(1000 / s3);
            ssr.Bar_Dia = d3;
            ssr.Length = Ly;

            BOQ.Steel_Reinforcement.Add(ssr);
            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AS[5]", d3, s3));

            #endregion Proposed Area of Steel

            #endregion   Long Direction (Continuous Edge)

            #region Longer Direction (Discontinuous Edge, at Top)

            M = M6;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------------------------------"));
            list.Add(string.Format("STEP 7.6 : Longer Direction (Discontinuous Edge, at Top)"));
            list.Add(string.Format("---------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M6 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d1^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d1 x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d3 = {0} mm. and spacing = s3 = {1} mm.)", d3, s3));
            list.Add(string.Format(""));
            Abar = Math.PI * d3 * d3 / 4.0;
            double Ast6 = Abar * (1000 / s3);



            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d3, s3));
            if (Ast6 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast6, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast6, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AS[6]";
            ssr.Number_Of_Bars = (int)(1000 / s3);
            ssr.Bar_Dia = d3;
            ssr.Length = Ly;

            BOQ.Steel_Reinforcement.Add(ssr);
            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AS[6]", d3, s3));

            #endregion Proposed Area of Steel

            list.Add(string.Format(""));

            #endregion   Long Direction (Discontinuous Edge)

            list.Add(string.Format(""));

            double dis_reinf = (0.12 / 100) * 1000 * d;
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format("STEP 7.7 : Distribution Steel"));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format(""));

            double max_sp_steel = MyList.Get_Max_Value(list_Ast);
            list.Add(string.Format("Maximum Span Steel = {0:f3} Sq.mm", max_sp_steel));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Area of Steel for Distribution Reinforcement "));
            list.Add(string.Format(""));
            list.Add(string.Format("     = (0.12 / 100) x 1000 x d "));
            list.Add(string.Format("     = (0.0012) x 1000 x {0:f3} ", d));
            list.Add(string.Format("     = {0:f3} ", dis_reinf));
            list.Add(string.Format(""));

            #region Proposed Area of Steel
            list.Add(string.Format("Provided Area of Steel for Long Direction (Mid Span, at Bottom) = S_AS[7] = S_AS[2]", d3, s3));
            list.Add(string.Format(""));
            //Abar = Math.PI * d3 * d3 / 4.0;

            double Ast7 = Ast2;

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AS[7]";
            ssr.Number_Of_Bars = (int)(1000 / s2);
            ssr.Bar_Dia = d2;
            ssr.Length = Ly;
            BOQ.Steel_Reinforcement.Add(ssr);


            if (Ast7 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast7, Ast));
            else
            {
                IS_DESIGN_OK = true;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast7, Ast));
            }


            list.Add(string.Format(""));

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AS[7]", d2, s2));

            #endregion Proposed Area of Steel

            list.Add(string.Format(""));

            #endregion STEP 6 : Reinforcement Steel

            #region STEP 8 : Corner Reinforcements (Top & Bottom)


            list.Add(string.Format("STEP 8 : Corner Reinforcements (Top & Bottom)"));
            list.Add(string.Format("---------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Area of Steel for Corner Reinforcements (Top & Bottom)"));
            list.Add(string.Format(""));
            list.Add(string.Format("  As = Area of Steel >= (3/8) x Maximum Span Steel"));
            list.Add(string.Format("                      = (3/8) x {0:f3}", max_sp_steel));

            Ast = (3.0 / 8.0) * max_sp_steel;
            list.Add(string.Format("                      = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d4 = {0} mm. and spacing = s4 = {1} mm.)", d4, s4));
            list.Add(string.Format(""));
            Abar = Math.PI * d4 * d4 / 4.0;
            double Ast8 = Abar * (1000 / s4);

            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d4, s4));
            if (Ast8 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast8, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast8, Ast));
            }

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AS[8]";
            ssr.Number_Of_Bars = (int)(1000 / s4);
            ssr.Bar_Dia = d4;
            ssr.Length = Ly;
            BOQ.Steel_Reinforcement.Add(ssr);

            list.Add(string.Format(""));

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AS[8]", d4, s4));


            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion STEP 7 : Corner Reinforcements (Top & Bottom)

            #region STEP 9 : Reinforcement for Edge Strip

            list.Add(string.Format("STEP 9 : Reinforcement for Edge Strip"));
            list.Add(string.Format("-------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel >= Distribution Steel"));
            list.Add(string.Format(""));
            list.Add(string.Format("Or,"));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel = 0.5 x Shorter Direction Mid Span Reinforcement"));
            list.Add(string.Format(""));

            #endregion STEP 8 : Reinforcement for Edge Strip

            #region STEP 10 : Bill Of Quantity

            //list.Add(string.Format("STEP 10 : Bill Of Quantity"));
            //list.Add(string.Format("------------------------------"));
            list.AddRange(BOQ.Get_Text().ToArray());



            //list.Add(string.Format(""));
            //list.Add(string.Format("Structral Member: SLAB"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("SLAB Concrete"));
            //list.Add(string.Format(""));

            ////Ly
            //string beams = string.Format("{0},{1},{2},{3}", beam1, beam2, beam3, beam4);
            //list.Add(string.Format("S.No.      Beam Nos.                           Section       Floor              Slab        Floor         Quantity"));
            //list.Add(string.Format("                                                             Elevation        Thickness     Area        Area x Thickness  "));
            //list.Add(string.Format("                                                                                (mm)        (Sq.m)           (Cu.m)   "));
            //list.Add(string.Format(""));
            ////list.Add(string.Format(" 1. {0,20} {1:f3} {2:f3}  {3:f3}   {4:f3}  {5:f3}  {6:f3}                              3.8                 160              104.0             104.0 x 0.160"));
            //list.Add(string.Format(" 1. {0,20} {1:f3}x{2:f3}  {3:f3}   {4:f3}  {5:f3}  {6:f3}", beams, Ly, Lx, mi.StartNode.Z, D, Lx * Ly, Lx * Ly * D / 1000));
            ////list.Add(string.Format(" 2."));
            //list.Add(string.Format("                                                                      --------------------------------------------"));
            //list.Add(string.Format("                                                                      Total Concrete (Cu.m)"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("SLAB Steel Reinforcement"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("S.No. Bar Mark    Nos.   Dia    Length   Total Weight "));
            //list.Add(string.Format("                         (mm)   (m)      (Ton)"));
            //list.Add(string.Format("1.     SAst1      200     12    3.8      8 x (3.1416 x 0.016 x 0.016 / 4) x 3.8 x 7.9=...."));
            //list.Add(string.Format(""));
            //list.Add(string.Format("2."));
            //list.Add(string.Format("                                                                      ------------------------------------"));
            //list.Add(string.Format("                                                                      Total Steel (M.TON)"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));

            #endregion STEP 8 : Reinforcement for Edge Strip

            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("TABLE 1 : BENDING MOMENT COEFFICIENTS"));
            list.Add(string.Format("------------------------------------"));
            list.AddRange(Tables.Get_File_Bending_Moment_Coefficients().ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("TABLE 2 : SHEAR FORCE COEFFICIENTS"));
            list.Add(string.Format("------------------------------------"));
            list.AddRange(Tables.Get_File_Shear_Force_Coefficients().ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("TABLE 3 : PERMISSIBLE SHEAR STRESS"));
            list.Add(string.Format("------------------------------------"));
            list.AddRange(Tables.Get_File_Permissible_Shear_Stress().ToArray());
            list.Add(string.Format(""));
            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF REPORT        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion

            //rtb_BD_res.Lines = list.ToArray();
            if (Report_File != "")
            {

                //string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "temp");
                //if (!Directory.Exists(tmp_file))
                //    Directory.CreateDirectory(tmp_file);

                string fl_lev = mic[0].StartNode.Y.ToString("f3");

                //fl_lev = "FLOOR_LEVEL_" + fl_lev.Replace(".", "_");

                //tmp_file = Path.Combine(tmp_file, fl_lev);
                //if (!Directory.Exists(tmp_file))
                //    Directory.CreateDirectory(tmp_file);
                ////tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
                //tmp_file = Path.Combine(tmp_file, "S_" + Beam_Nos.Replace(" ", "_") + ".tmp");
                //return tmp_file;


                //File.WriteAllLines(tmp_file, list.ToArray());
                File.WriteAllLines(Get_Report_File(Beam_Nos, fl_lev), list.ToArray());
            }
            if (Report_File != "")
                File.WriteAllLines(Report_File, list.ToArray());
        }
        public void Design_Program_Individual()
        {
            IS_DESIGN_OK = true;

            Steel_Reinforcement ssr = new Steel_Reinforcement();

            MyList ml = new MyList(Beam_Nos.Replace(',', ' ').TrimEnd(), ' ');

            //SlabConfig sconf = new SlabConfig();

            //sconf.Set_Members(Beam_Nos, AST_DOC);


            BOQ = new Slab_BOQ();
            BOQ.BeamNos = Beam_Nos;
            BOQ.Steel_Reinforcement.Clear();
            List<string> list = Get_Banner();

            #region  STEP 1 : Structure Data from Analysis Input File

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------------------------"));
            list.Add(string.Format("STEP 1 : STRUCTURE DATA"));
            list.Add(string.Format("---------------------------------------------------"));

            #endregion  STEP 1 : Structure Data from Analysis Input File


            #region User Input Data
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------"));
            list.Add(string.Format("USER INPUT DATA"));
            list.Add(string.Format("----------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("STRUCTURE DATA"));
            list.Add(string.Format("---------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add("Position & Case Type of Slab");
            list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add("Case 4");
            list.Add(string.Format("Case {0} {1}", case_index + 1, Get_Type(case_index)));

            list.Add(string.Format(""));
            //list.Add(string.Format("                                   Ly                      "));
            //list.Add(string.Format("                     -----------------------------"));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                  Lx |                           | Lx  "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     -----------------------------"));
            //list.Add(string.Format("                                   Ly              "));
            //list.Add(string.Format(""));
            //double Lx = Math.Min(mic[0].Length, mic[1].Length);
            //double Ly = Math.Max(mic[0].Length, mic[1].Length);


            //Lx = Math.Min(sconf.Length_A, sconf.Length_B);
            //Ly = Math.Max(sconf.Length_A, sconf.Length_B);

            list.Add(string.Format("Lx = {0:f3} m,     Ly = {1:f3} m", Lx, Ly));

            BOQ.Section_D = Lx;
            BOQ.Section_B = Ly;
            //BOQ.Floor_ELevation = mic[0].StartNode.Y;
            BOQ.Slab_Thickness = D;
            BOQ.Floor_Area = Lx * Ly;

            //double D, fck, gamma, fy, wll, d1, d2, d3, d4, dlf, llf;

            //D = MyList.StringToDouble(txt_slab_D.Text, 0.0);
            //fck = MyList.StringToDouble(cmb_slab_fck.Text.Replace("M", ""), 0.0);
            //gamma = MyList.StringToDouble(txt_slab_gamma.Text, 0.0);
            //fy = MyList.StringToDouble(cmb_slab_fy.Text.Replace("Fe", ""), 0.0);
            //wll = MyList.StringToDouble(txt_slab_wll.Text, 0.0);
            //d1 = MyList.StringToDouble(txt_slab_d1.Text, 0.0);
            //d2 = MyList.StringToDouble(txt_slab_d2.Text, 0.0);
            //d3 = MyList.StringToDouble(txt_slab_d3.Text, 0.0);
            //d4 = MyList.StringToDouble(txt_slab_c.Text, 0.0);
            //dlf = MyList.StringToDouble(txt_slab_DLF.Text, 0.0);
            //llf = MyList.StringToDouble(txt_slab_LLF.Text, 0.0);



            list.Add(string.Format(""));
            list.Add(string.Format("DESIGN DATA"));
            list.Add(string.Format("------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall Thickness of Slab = D = {0} mm", D));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = M{0}", fy));
            list.Add(string.Format("Unit Weight of Concrete = γc = {0} kN/Cu.m", gamma));
            list.Add(string.Format("Live Load = WLL = {0} kN/Sq.m", wll));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bars in Shorter Direction at Bottom"));
            list.Add(string.Format("Diameter of Bars = d1 = {0} mm, Spacing = s1 = {1} mm", d1, s1));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bars in Longer Direction at Bottom"));
            list.Add(string.Format("Diameter of Bars = d2 = {0} mm, Spacing = s2 = {1} mm", d2, s2));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Bars in Edge Strip at Top"));
            list.Add(string.Format("Diameter of Bars = d3 = {0} mm, Spacing = s3 = {1} mm", d3, s3));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Bars in Corners at Top & Bottom"));
            list.Add(string.Format("Diameter of Bars = d4 = {0} mm, Spacing = s4 = {1} mm", cover, s4));




            //list.Add(string.Format("Diameter of Main Reinforcement Bars in Edge Strip at Bottom = d2 = {0} mm", d2));
            //list.Add(string.Format("Diameter of Main Reinforcement Bars in Corners at Top & Bottom = d3 = {0} mm", d3));
            list.Add(string.Format("Cover for Reinforcement = c = {0} mm", cover));
            list.Add(string.Format("Dead Load Factor = DLF = {0}", dlf));
            list.Add(string.Format("Live Load Factor = LLF = {0}", llf));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion User Input Data


            double LY_by_LX = Ly / Lx;
            list.Add(string.Format("Ly = {0:f3} m,    Lx = {1:f3} m,   Ly/Lx = {0:f3}/{1:f3} = {2:f3}", Ly, Lx, LY_by_LX));
            list.Add(string.Format(""));

            //if (LY_by_LX < 2.0)
            //    list.Add(string.Format("This is Two Way Slab Type"));
            //else
            //    list.Add(string.Format("This is One Way Slab Type"));
            list.Add(string.Format(""));



            #region  STEP 2 : Effective Depth

            list.Add(string.Format("-------------------------"));
            list.Add(string.Format("STEP 2 : Effective Depth"));
            list.Add(string.Format("-------------------------"));
            list.Add(string.Format(""));

            double d = D - (d1 / 2) - cover;
            list.Add(string.Format("Effective Depth = d = D - (d1 / 2) - c"));
            list.Add(string.Format("                    = {0} - ({1} / 2) - {2}", D, d1, cover));
            list.Add(string.Format("                    = {0:f3} mm", d));
            list.Add(string.Format(""));

            #endregion STEP 2 : Effective Depth

            #region STEP 3 : Design Load

            list.Add(string.Format("---------------------"));
            list.Add(string.Format("STEP 3 : Design Load"));
            list.Add(string.Format("---------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Define Dead Loads"));
            list.Add(string.Format("------------------"));

            double WDL = D / 1000 * gamma;
            //list.Add(string.Format("Dead Load = WDL = D x 1.0 x γ = ({0}/1000) x 1.0 x {1} = {2:f3} kN/Sq.m ", D, gamma, WDL));

            double dl_sw = WDL;
            list.Add(string.Format("Self Weight = (D/1000) x 1.0 x γ = ({0}/1000) x 1.0 x {1} = {2:f3} kN/Sq.m ", D, gamma, WDL));
            list.Add(string.Format(""));
            if (dgv_dls != null)
            {
                for (int i = 0; i < dgv_dls.RowCount - 1; i++)
                {
                    try
                    {
                        list.Add(string.Format("{0}   = {1:f3} kN/Sq.m", dgv_dls[0, i].Value, dgv_dls[1, i].Value));
                        WDL += MyList.StringToDouble(dgv_dls[1, i].Value.ToString(), 0.0);
                    }
                    catch (Exception exx) { }
                }
            }
            list.Add(string.Format(""));
            list.Add(string.Format("Total Dead Load = WDL = {0:f3} kN/Sq.m", WDL));
            list.Add(string.Format(""));




            list.Add(string.Format("Live Load = WLL = {0} kN/Sq.m", wll));
            list.Add(string.Format(""));

            double w = WDL * dlf + wll * llf;
            list.Add(string.Format("Design Load = w = WDL x DLF + WLL x LLF"));
            list.Add(string.Format("                = {0:f3} x {1} + {2:f3} x {3}", WDL, dlf, wll, llf));
            list.Add(string.Format("                = {0:f3} kN/Sq.m", w));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            #endregion STEP 2 : Design Load

            #region STEP 4 : Type of Slab

            //list.Add(string.Format("STEP 4 : Type of Slab"));
            list.Add(string.Format("------------------------------"));
            list.Add(string.Format("STEP 4 : Design Coefficients"));
            list.Add(string.Format("------------------------------"));
            list.Add(string.Format(""));

            //list.Add(string.Format("{0} - Case {1}", cmb_slab_type.Text, cmb_slab_type.SelectedIndex + 1));
            list.Add(string.Format("{0} - Case {1}", Get_Type(case_index), case_index + 1));
            list.Add(string.Format(""));


            double beta_x = 0.084;
            double beta_y = 0.063;
            double alpha_x = 0.047;
            double alpha_y = 0.035;

            Tables.Get_Bending_Moment_Coefficients(out beta_x, out  beta_y, out  alpha_x, out  alpha_y, LY_by_LX, case_index);

            beta_x = Math.Pow(LY_by_LX, 4.0) / (8 * (1 + Math.Pow(LY_by_LX, 4.0)));
            beta_y = Math.Pow(LY_by_LX, 2.0) / (8 * (1 + Math.Pow(LY_by_LX, 4.0)));


            list.Add(string.Format("βx = {0:f4},   βy = {1:f4},   ", beta_x, beta_y));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment Coefficients for Simply Supported Two-Way Slabs"));
            list.Add(string.Format(""));
            list.Add(string.Format("   βx = (Ly/Lx)^4 / (8 x (1 + (Ly/Lx)^4))"));
            list.Add(string.Format("      = ({0:f3})^4 / (8 x (1 + ({0:f3})^4))", LY_by_LX));
            list.Add(string.Format("      = {0:f3}", beta_x));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("   βy = (Ly/Lx)^2 / (8 x (1 + (Ly/Lx)^4))"));
            list.Add(string.Format("      = ({0:f3})^2 / (8 x (1 + ({0:f3})^4))", LY_by_LX));
            list.Add(string.Format("      = {0:f3}", beta_y));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("  αx = {0:f4},   αy = {1:f4},   (from TABLE 1)", alpha_x, alpha_y));
            #endregion STEP 3 : Type of Slab

            #region STEP 5 : Check for Shear


            list.Add(string.Format(""));
            list.Add(string.Format("------------------------"));
            list.Add(string.Format("STEP 5 : Check for Shear"));
            list.Add(string.Format("------------------------"));
            list.Add(string.Format(""));

            double gamma_x1 = 0.57;
            double gamma_x2 = 0.38;
            double gamma_x3 = 0.57;
            double gamma_x4 = 0.38;


            Tables.Get_Shear_Force_Coefficients(out gamma_x1, out  gamma_x2, out  gamma_x3, out  gamma_x4, LY_by_LX, case_index);


            double gamma_x_max = Math.Max(gamma_x1, gamma_x2);

            list.Add(string.Format(""));
            list.Add(string.Format("Case {0} ,  γx = {1:f4} and {2:f4},   γx_max = {3:f4}   (from Table 2)", case_index + 1, gamma_x1, gamma_x2, gamma_x_max));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Shear Force = V = γx_max  x  w  x Lx "));

            double V = gamma_x_max * w * Lx;
            list.Add(string.Format("                        = {0:f4}  x {1:f3} x {2:f3} ", gamma_x_max, w, Lx));
            list.Add(string.Format("                        = {0:f3} kN", V));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double v = (V * 1000) / (1000 * d);
            list.Add(string.Format("Shear Stress = v = (V x 1000) / (1000 x d)"));
            list.Add(string.Format("                 = ({0:f3} x 1000) / (1000 x {1:f3})", V, d));
            list.Add(string.Format("                 = {0:f3} N/Sq.mm", v));
            list.Add(string.Format(""));






            //Bar Diameter = 12 mm

            double Abar = Math.PI * d1 * d1 / 4.0;


            double p = (Abar * 100.0) / (D * d);
            //sw.WriteLine("Percentage of Steel = p = ({0} * 100) / ({1} * {2})", bar_ast, (b * 1000), d);
            //sw.WriteLine("                        = {0:f2}%", p);
            //sw.WriteLine();


            //double tab_value = 0.29; // from Table 3
            string ref_str = "";
            double tab_value = Tables.Permissible_Shear_Stress(p, (int)fck, ref ref_str);
            if (tab_value > v)
                list.Add(string.Format("Minimum Shear Strength for M{0} Grade Concrete = {1:f3} (TABLE 3) > {2:f3} , OK", fck, tab_value, v));
            else
            {
                list.Add(string.Format("Minimum Shear Strength for M{0} Grade Concrete = {1:f3} (TABLE 3) < {2:f3} , NOT OK", fck, tab_value, v));
                IS_DESIGN_OK = false;
            }
            list.Add(string.Format(""));


            #endregion STEP 4 : Check for Shear

            #region STEP 6 : Bending Moment

            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------"));
            list.Add(string.Format("STEP 6 : Bending Moment"));
            list.Add(string.Format("-----------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format("STEP 6.1 : Shorter Direction"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Continuous Edge"));
            list.Add(string.Format(""));


            double M1 = beta_x * w * Lx * Lx;
            list.Add(string.Format("   M1 = βx  x  w  x  Lx^2"));
            list.Add(string.Format("      = {0:f4}  x  {1:f3}  x  {2:f3}^2", beta_x, w, Lx));
            list.Add(string.Format("      = {0:f4} kN-m", M1));

            list.Add(string.Format(""));
            list.Add(string.Format("Positive Bending Moment at Mid Span"));
            list.Add(string.Format(""));
            double M2 = beta_y * w * Lx * Lx;
            list.Add(string.Format("   M2 = βy  x  w  x  Lx^2"));
            list.Add(string.Format("      = {0:f4}  x  {1:f3}  x  {2:f3}^2", beta_y, w, Lx));
            list.Add(string.Format("      = {0:f4} kN-m", M2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Discontinuous Edge"));
            list.Add(string.Format(""));

            double M3 = M2 / 2.0;
            list.Add(string.Format("   M3 =  (Positive BM at Mid Span) / 2 = M2 / 2 = {0:f3}/2 = {1:f3} kN-m", M2, M3));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format("STEP 6.2 : Longer Direction"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double alpha_min = Math.Min(alpha_x, alpha_y);
            list.Add(string.Format("αx = {0:f4},   αy = {1:f4},    α_min = {2:f4}", alpha_x, alpha_y, alpha_min));
            list.Add(string.Format(""));
            list.Add(string.Format("Positive Bending Moment at Mid Span"));
            list.Add(string.Format(""));


            double M4 = alpha_min * w * Lx * Lx;
            list.Add(string.Format("   M4 = α_min x w x Lx^2"));
            list.Add(string.Format("      = {0:f4} x {1:f3} x  {2:f3}^2", alpha_min, w, Lx));
            list.Add(string.Format("      = {0:f3} kN-m", M4));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Continuous Edge"));
            list.Add(string.Format(""));

            double M5 = (4.0 / 3.0) * M4;
            list.Add(string.Format("   M5 = (4 / 3) x M4 = (4 / 3) x {0:f3} = {1:f3} kN-m", M4, M5));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Discontinuous Edge"));
            list.Add(string.Format(""));
            double M6 = (1.0 / 2.0) * M4;
            list.Add(string.Format("   M6 = (1 / 2) x M4 = (1 / 2) x {0:f3} = {1:f3} kN-m", M4, M6));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion STEP 5 : Bending Moment

            #region STEP 7 : Reinforcement Steel

            list.Add(string.Format("----------------------------"));
            list.Add(string.Format("STEP 7 : Reinforcement Steel"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Diameter = {0} mm", d1));
            list.Add(string.Format(""));
            Abar = Math.PI * d1 * d1 / 4.0;
            list.Add(string.Format("Area of Bar = Abar = 3.1416 x {0}^2 / 4 = {1:f3} Sq.mm.", d1, Abar));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double M = M1;

            double j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            //double j = 0.5 + Math.Pow((0.25 - ((M * 1000000) / (0.87 * fck * 1000 * d1 * d1))), 0.5);
            double Ast = (M * 1000000) / (0.87 * fy * d * j);
            double Spacing = (1000 * Abar) / (Ast);


            List<double> list_j = new List<double>();
            List<double> list_Ast = new List<double>();
            List<double> list_spacing = new List<double>();



            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            #region Short Direction (Mid Span)

            M = M1;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format("STEP 7.1 : Shorter Direction (Mid Span, at Bottom)"));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M1 = {0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M2 x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                             = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                             = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d1 = {0} mm. and spacing = s1 = {1} mm.)", d1, s1));
            list.Add(string.Format(""));
            Abar = Math.PI * d1 * d1 / 4.0;
            double Ast1 = Abar * (1000 / s1);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d1, s1));
            if (Ast1 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast1, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast1, Ast));
            }


            list.Add(string.Format(""));
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[1]";
            ssr.Text = "Shorter Direction (Mid Span, at Bottom)";
            ssr.Number_Of_Bars = (int)(1000 / s1);
            ssr.Bar_Dia = d1;
            ssr.Length = Lx;

            BOQ.Steel_Reinforcement.Add(ssr);


            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Bottom = S_AST[1]", d1, s1));

            #endregion Proposed Area of Steel


            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));
            #endregion   Short Direction (Mid Span)

            #region Longer Direction (Mid Span, at Bottom)

            M = M2;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format("STEP 7.2 : Longer Direction (Mid Span, at Bottom)"));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M2 = {0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d1 x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d2 = {0} mm. and spacing = s2 = {1} mm.)", d2, s2));
            list.Add(string.Format(""));
            Abar = Math.PI * d2 * d2 / 4.0;
            double Ast2 = Abar * (1000 / s2);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d2, s2));
            if (Ast2 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast2, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast2, Ast));
            }


            list.Add(string.Format(""));

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[2]";
            ssr.Text = "Longer Direction (Mid Span, at Bottom)";
            ssr.Number_Of_Bars = (int)(1000 / s2);
            ssr.Bar_Dia = d2;
            ssr.Length = Ly;

            BOQ.Steel_Reinforcement.Add(ssr);

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Bottom = S_AST[2]", d2, s2));

            #endregion Proposed Area of Steel




            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));
            #endregion   Long Direction (Mid Span)

            #region Shorter Direction (Continuous Edge, at Top)

            M = M3;

            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format("STEP 7.3 : Shorter Direction (Continuous Edge, at Top)"));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M3 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d3 = {0} mm. and spacing = s3 = {1} mm.)", d3, s3));
            list.Add(string.Format(""));
            Abar = Math.PI * d3 * d3 / 4.0;
            double Ast3 = Abar * (1000 / s3);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d3, s3));
            if (Ast3 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast3, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast3, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[3]";
            ssr.Text = "Shorter Direction (Continuous Edge, at Top)";
            ssr.Number_Of_Bars = (int)(1000 / s3);
            ssr.Bar_Dia = d3;
            ssr.Length = Lx;

            BOQ.Steel_Reinforcement.Add(ssr);


            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top = S_AST[3]", d3, s3));

            #endregion Proposed Area of Steel

            list.Add(string.Format(""));

            #endregion Shorter Direction (Continuous Edge)

            #region   Short Direction (Discontinuous Edge)

            M = M4;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format("STEP 7.4 : Short Direction (Discontinuous Edge, at Top)"));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M4 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d4 = {0} mm. and spacing = s4 = {1} mm.)", d4, s4));
            list.Add(string.Format(""));
            Abar = Math.PI * d4 * d4 / 4.0;
            double Ast4 = Abar * (1000 / s4);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d4, s4));
            if (Ast4 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast4, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast4, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[4]";
            ssr.Text = "Short Direction (Discontinuous Edge, at Top)";
            ssr.Number_Of_Bars = (int)(1000 / s4);
            ssr.Bar_Dia = d4;
            ssr.Length = Lx;

            BOQ.Steel_Reinforcement.Add(ssr);

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top = S_AST[4]", d4, s4));

            #endregion Proposed Area of Steel




            list.Add(string.Format(""));
            #endregion   Short Direction (Discontinuous Edge)


            #region   Long Direction (Continuous Edge)

            M = M5;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------------------------"));
            list.Add(string.Format("STEP 7.5 : Longer Direction (Continuous Edge, at Top)"));
            list.Add(string.Format("------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M5 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));


            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d3 = {0} mm. and spacing = s3 = {1} mm.)", d3, s3));
            list.Add(string.Format(""));
            Abar = Math.PI * d3 * d3 / 4.0;
            double Ast5 = Abar * (1000 / s3);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d3, s3));
            if (Ast5 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast5, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast5, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[5]";
            ssr.Text = "Longer Direction (Continuous Edge, at Top)";
            ssr.Number_Of_Bars = (int)(1000 / s3);
            ssr.Bar_Dia = d3;
            ssr.Length = Ly;

            BOQ.Steel_Reinforcement.Add(ssr);
            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top = S_AST[5]", d3, s3));

            #endregion Proposed Area of Steel

            #endregion   Long Direction (Continuous Edge)

            #region Longer Direction (Discontinuous Edge, at Top)

            M = M6;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------------------------------"));
            list.Add(string.Format("STEP 7.6 : Longer Direction (Discontinuous Edge, at Top)"));
            list.Add(string.Format("---------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M6 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d1^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d1 x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d3 = {0} mm. and spacing = s3 = {1} mm.)", d3, s3));
            list.Add(string.Format(""));
            Abar = Math.PI * d3 * d3 / 4.0;
            double Ast6 = Abar * (1000 / s3);



            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d3, s3));
            if (Ast6 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast6, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast6, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[6]";
            //ssr. = "Longer Direction (Discontinuous Edge, at Top)";
            ssr.Number_Of_Bars = (int)(1000 / s3);
            ssr.Bar_Dia = d3;
            ssr.Length = Ly;

            BOQ.Steel_Reinforcement.Add(ssr);
            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top = S_AST[6]", d3, s3));

            #endregion Proposed Area of Steel

            list.Add(string.Format(""));

            #endregion   Long Direction (Discontinuous Edge)

            list.Add(string.Format(""));

            double dis_reinf = (0.12 / 100) * 1000 * d;
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format("STEP 7.7 : Distribution Steel"));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format(""));

            double max_sp_steel = MyList.Get_Max_Value(list_Ast);
            list.Add(string.Format("Maximum Span Steel = {0:f3} Sq.mm", max_sp_steel));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Area of Steel for Distribution Reinforcement "));
            list.Add(string.Format(""));
            list.Add(string.Format("     = (0.12 / 100) x 1000 x d "));
            list.Add(string.Format("     = (0.0012) x 1000 x {0:f3} ", d));
            list.Add(string.Format("     = {0:f3} ", dis_reinf));
            list.Add(string.Format(""));

            #region Proposed Area of Steel
            list.Add(string.Format("Provided Area of Steel for Long Direction (Mid Span, at Bottom) = S_AST[7] = S_AST[2]", d3, s3));
            list.Add(string.Format(""));
            //Abar = Math.PI * d3 * d3 / 4.0;

            double Ast7 = Ast2;

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[7]";
            ssr.Text = "Distribution Steel";
            ssr.Number_Of_Bars = (int)(1000 / s2);
            ssr.Bar_Dia = d2;
            ssr.Length = Ly;
            BOQ.Steel_Reinforcement.Add(ssr);


            if (Ast7 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast7, Ast));
            else
            {
                IS_DESIGN_OK = true;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast7, Ast));
            }


            list.Add(string.Format(""));

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AST[7]", d2, s2));

            #endregion Proposed Area of Steel

            list.Add(string.Format(""));

            #endregion STEP 6 : Reinforcement Steel

            #region STEP 8 : Corner Reinforcements (Top & Bottom)


            list.Add(string.Format("STEP 8 : Corner Reinforcements (Top & Bottom)"));
            list.Add(string.Format("---------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Area of Steel for Corner Reinforcements (Top & Bottom)"));
            list.Add(string.Format(""));
            list.Add(string.Format("  As = Area of Steel >= (3/8) x Maximum Span Steel"));
            list.Add(string.Format("                      = (3/8) x {0:f3}", max_sp_steel));

            Ast = (3.0 / 8.0) * max_sp_steel;
            list.Add(string.Format("                      = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d4 = {0} mm. and spacing = s4 = {1} mm.)", d4, s4));
            list.Add(string.Format(""));
            Abar = Math.PI * d4 * d4 / 4.0;
            double Ast8 = Abar * (1000 / s4);

            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d4, s4));
            if (Ast8 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast8, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast8, Ast));
            }

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[8]";
            ssr.Text = "Corner Reinforcements (Top & Bottom)";
            ssr.Number_Of_Bars = (int)(1000 / s4);
            ssr.Bar_Dia = d4;
            ssr.Length = Ly;
            BOQ.Steel_Reinforcement.Add(ssr);

            list.Add(string.Format(""));

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AST[8]", d4, s4));


            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion STEP 7 : Corner Reinforcements (Top & Bottom)

            #region STEP 9 : Reinforcement for Edge Strip

            list.Add(string.Format("STEP 9 : Reinforcement for Edge Strip"));
            list.Add(string.Format("-------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel >= Distribution Steel"));
            list.Add(string.Format(""));
            list.Add(string.Format("Or,"));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel = 0.5 x Shorter Direction Mid Span Reinforcement"));
            list.Add(string.Format(""));

            #endregion STEP 8 : Reinforcement for Edge Strip


            #region Design Summary

            Design_Summary = new List<string>();
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 10 : DESIGN SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));

            Design_Summary.Add(string.Format("-------------------------------------"));
            Design_Summary.Add(string.Format("SLAB NO = S1", Beam_Nos));
            Design_Summary.Add(string.Format("SLAB FLOOR LEVEL = {0} M", 0.0));
            //Design_Summary.Add(string.Format("-------------------------------------"));
            Design_Summary.Add(string.Format("Overall Thickness of Slab = D = {0} mm.", D));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Shorter Direction (Mid Span, at Bottom), "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.)"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d1, s1, Ast1));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[1] in shorter direction Span Steel at Bottom"));
            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Longer Direction (Mid Span, at Bottom), "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.)"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d2, s2, Ast2));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[2] in longer direction Span Steel at Bottom"));
            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Shorter Direction (Continuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.)"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d3, s3, Ast3));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[3] in Shorter Direction Continuous Edge, at Top,"));
            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Shorter Direction (Discontinuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). This steel is optional"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). This steel is optional", d3, s3, Ast4));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[4] in Shorter Direction Discontinuous Edge, at Top, "));
            Design_Summary.Add(string.Format(""));
            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Longer Direction (Continuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). Provide S_Ast[3]"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). Provide S_Ast[3]", d3, s3, Ast5));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[5] in Longer Direction Continuous Edge, at Top, "));
            Design_Summary.Add(string.Format(""));
            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Longer Direction (Discontinuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). This steel is optional"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). This steel is optional", d3, s3, Ast6));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[6] in Longer Direction Discontinuous Edge, at Top, "));
            Design_Summary.Add(string.Format(""));
            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Distribution Steel in Longer Direction at Bottom, "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.). If this steel is less than "));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). If this steel is less than ", d2, s2, Ast7));
            Design_Summary.Add(string.Format("or equal to shorter direction Span Steel at Bottom, then provide S_Ast[1]."));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[7] in longer direction Span Steel at Bottom,"));
            Design_Summary.Add(string.Format(""));
            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Corner Reinforcements (Top & Bottom), "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.). If this steel is less than "));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d4, s4, Ast8));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[8] in Corner direction at Top & Bottom,"));
            Design_Summary.Add(string.Format(""));

            list.AddRange(Design_Summary.ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion Design Summary

            if (false)
            {
                #region STEP 11 : Bill Of Quantity

                list.Add(string.Format("STEP 11 : Bill Of Quantity"));
                list.Add(string.Format("------------------------------"));
                list.AddRange(BOQ.Get_Text().ToArray());



                //list.Add(string.Format(""));
                //list.Add(string.Format("Structral Member: SLAB"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("SLAB Concrete"));
                //list.Add(string.Format(""));

                ////Ly
                //string beams = string.Format("{0},{1},{2},{3}", beam1, beam2, beam3, beam4);
                //list.Add(string.Format("S.No.      Beam Nos.                           Section       Floor              Slab        Floor         Quantity"));
                //list.Add(string.Format("                                                             Elevation        Thickness     Area        Area x Thickness  "));
                //list.Add(string.Format("                                                                                (mm)        (Sq.m)           (Cu.m)   "));
                //list.Add(string.Format(""));
                ////list.Add(string.Format(" 1. {0,20} {1:f3} {2:f3}  {3:f3}   {4:f3}  {5:f3}  {6:f3}                              3.8                 160              104.0             104.0 x 0.160"));
                //list.Add(string.Format(" 1. {0,20} {1:f3}x{2:f3}  {3:f3}   {4:f3}  {5:f3}  {6:f3}", beams, Ly, Lx, mi.StartNode.Z, D, Lx * Ly, Lx * Ly * D / 1000));
                ////list.Add(string.Format(" 2."));
                //list.Add(string.Format("                                                                      --------------------------------------------"));
                //list.Add(string.Format("                                                                      Total Concrete (Cu.m)"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("SLAB Steel Reinforcement"));
                //list.Add(string.Format(""));
                //list.Add(string.Format("S.No. Bar Mark    Nos.   Dia    Length   Total Weight "));
                //list.Add(string.Format("                         (mm)   (m)      (Ton)"));
                //list.Add(string.Format("1.     SAst1      200     12    3.8      8 x (3.1416 x 0.016 x 0.016 / 4) x 3.8 x 7.9=...."));
                //list.Add(string.Format(""));
                //list.Add(string.Format("2."));
                //list.Add(string.Format("                                                                      ------------------------------------"));
                //list.Add(string.Format("                                                                      Total Steel (M.TON)"));
                //list.Add(string.Format(""));
                //list.Add(string.Format(""));

                #endregion STEP 8 : Reinforcement for Edge Strip
            }

            #region BOQ Summary

            BOQ_Summary = new List<string>();
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 11 : BILL OF QUANTITY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));


            string fl_lev = Floor_Level.ToString("f3");

            BOQ_Summary.Add(string.Format("SLAB MEMBERS = {0}", Beam_Nos, fl_lev));
            BOQ_Summary.Add(string.Format("FLOOR LEVEL = {1:f3}", Beam_Nos, fl_lev));
            BOQ_Summary.Add(string.Format("Overall Thickness of Slab = D = {0} mm.", D));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Conctete Quantity = {0:f3} x {1:f3} x {2:f3} = {3:f3} Cu.m", Lx, Ly, D / 1000, (Lx * Ly * D / 1000)));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("------------------"));
            BOQ_Summary.Add(string.Format("REBAR QUANTITY"));
            BOQ_Summary.Add(string.Format("------------------"));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Shorter Direction (Mid Span, at Bottom), "));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d1, s1, Ast1));

            //ssr.Number_Of_Bars = (int)(Lx * 1000 / s1);
            double bnos = (int)(Lx * 1000 / s1);
            double tot_weight = bnos * Lx * Tables.Rebars.Get_Rebar_Weight(d1);

            BOQ_Summary.Add(string.Format("Total Weight = {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Lx,
                Tables.Rebars.Get_Rebar_Weight(d1), tot_weight));


            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Longer Direction (Mid Span, at Bottom), "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.)"));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d2, s2, Ast2));

            bnos = (int)(Ly * 1000 / s2);
            tot_weight = bnos * Ly * Tables.Rebars.Get_Rebar_Weight(d2);

            BOQ_Summary.Add(string.Format("Total Weight = {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Ly,
                Tables.Rebars.Get_Rebar_Weight(d2), tot_weight));



            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Shorter Direction (Continuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.)"));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d3, s3, Ast3));

            bnos = (int)(Lx * 1000 / s3);
            tot_weight = bnos * Lx * Tables.Rebars.Get_Rebar_Weight(d3);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Lx,
                Tables.Rebars.Get_Rebar_Weight(d3), tot_weight));


            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Shorter Direction (Discontinuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). This steel is optional"));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). This steel is optional", d3, s3, Ast4));

            bnos = (int)(Lx * 1000 / s3);
            tot_weight = bnos * Lx * Tables.Rebars.Get_Rebar_Weight(d3);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Lx,
                Tables.Rebars.Get_Rebar_Weight(d3), tot_weight));





            //Design_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Longer Direction (Continuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). Provide S_Ast[3]"));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). Provide S_Ast[3]", d3, s3, Ast5));

            bnos = (int)(Ly * 1000 / s3);
            tot_weight = bnos * Ly * Tables.Rebars.Get_Rebar_Weight(d3);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Ly,
                Tables.Rebars.Get_Rebar_Weight(d3), tot_weight));

            //Design_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Longer Direction (Discontinuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). This steel is optional"));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). This steel is optional", d3, s3, Ast6));

            bnos = (int)(Ly * 1000 / s3);
            tot_weight = bnos * Ly * Tables.Rebars.Get_Rebar_Weight(d3);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Ly,
                Tables.Rebars.Get_Rebar_Weight(d3), tot_weight));





            //Design_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Distribution Steel in Longer Direction at Bottom, "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.). If this steel is less than "));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). If this steel is less than ", d2, s2, Ast7));
            BOQ_Summary.Add(string.Format("or equal to shorter direction Span Steel at Bottom, then provide S_Ast[1]."));

            bnos = (int)(Ly * 1000 / s2);
            tot_weight = bnos * Ly * Tables.Rebars.Get_Rebar_Weight(d2);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Ly,
                Tables.Rebars.Get_Rebar_Weight(d2), tot_weight));



            //Design_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Corner Reinforcements (Top & Bottom), "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.). If this steel is less than "));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d4, s4, Ast8));

            bnos = (int)(Ly * 1000 / s4);
            tot_weight = bnos * Ly * Tables.Rebars.Get_Rebar_Weight(d4);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Ly,
                Tables.Rebars.Get_Rebar_Weight(d4), tot_weight));


            list.AddRange(BOQ_Summary.ToArray());

            BOQ_Summary.Add(string.Format("------------------------------------------------------------"));
            list.Add(string.Format(""));

            #endregion BOQ Summary



            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("TABLE 1 : BENDING MOMENT COEFFICIENTS"));
            list.Add(string.Format("------------------------------------"));
            list.AddRange(Tables.Get_File_Bending_Moment_Coefficients().ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("TABLE 2 : SHEAR FORCE COEFFICIENTS"));
            list.Add(string.Format("------------------------------------"));
            list.AddRange(Tables.Get_File_Shear_Force_Coefficients().ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("TABLE 3 : PERMISSIBLE SHEAR STRESS"));
            list.Add(string.Format("------------------------------------"));
            list.AddRange(Tables.Get_File_Permissible_Shear_Stress().ToArray());
            list.Add(string.Format(""));
            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF REPORT        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion

            if (Report_File != "")
            {
                File.WriteAllLines(Report_File, list.ToArray());
                File.WriteAllLines(File_Design_Summary, Design_Summary.ToArray());



                string fnm = Get_Report_File(Beam_Nos, fl_lev);
                File.WriteAllLines(fnm, list.ToArray());

                fnm = Get_BOQ_File(Beam_Nos, fl_lev);
                File.WriteAllLines(fnm, BOQ_Summary.ToArray());


            }

        }

        public static List<string> Get_Banner()
        {


            List<string> list = new List<string>();

            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*            DESIGN OF RCC SLAB              *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");

            #endregion
            return list;
        }

        public void Design_Program()
        {
            IS_DESIGN_OK = true;



            Steel_Reinforcement ssr = new Steel_Reinforcement();


            MyList ml = new MyList(Beam_Nos.Replace(',', ' ').TrimEnd(), ' ');

            SlabConfig sconf = new SlabConfig();

            sconf.Set_Members(Beam_Nos, AST_DOC);





            MemberIncidenceCollection mic = new MemberIncidenceCollection();


            mic = sconf.Get_All_Members();
            //int beam1 = MyList.StringToInt(txt_slab_beam1.Text, 0);
            //int beam2 = MyList.StringToInt(txt_slab_beam2.Text, 0);
            //int beam3 = MyList.StringToInt(txt_slab_beam3.Text, 0);
            //int beam4 = MyList.StringToInt(txt_slab_beam4.Text, 0);

            BOQ = new Slab_BOQ();
            BOQ.BeamNos = Beam_Nos;
            BOQ.Steel_Reinforcement.Clear();

            if (false)
            {
                int beam1 = ml.GetInt(0);
                int beam2 = ml.GetInt(1);
                int beam3 = ml.GetInt(2);
                int beam4 = ml.GetInt(3);
                #region  Beam Check
                MemberIncidence mi = AST_DOC.Members.Get_Member(beam1);


                if (mi == null)
                {
                    MessageBox.Show("Beam 1 data not accepted.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                MemberIncidence mi2 = AST_DOC.Members.Get_Member(beam2);

                if (mi2 == null)
                {
                    MessageBox.Show("Beam 2 data not accepted.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                MemberIncidence mi3 = AST_DOC.Members.Get_Member(beam3);
                if (mi3 == null)
                {
                    MessageBox.Show("Beam 3 data not accepted.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                MemberIncidence mi4 = AST_DOC.Members.Get_Member(beam4);

                if (mi4 == null)
                {
                    MessageBox.Show("Beam 4 data not accepted.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }


                mic.Add(mi);
                mic.Add(mi2);
                mic.Add(mi3);
                mic.Add(mi4);


                string msg = "";
                bool flag = false;

                int coor_flag = 0;


                if ((mi.EndNode.NodeNo == mi2.StartNode.NodeNo) ||
                    (mi.EndNode.NodeNo == mi2.EndNode.NodeNo))
                {
                    flag = true;
                    coor_flag = 0;
                }
                else if ((mi.StartNode.NodeNo == mi2.StartNode.NodeNo) ||
                    (mi.StartNode.NodeNo == mi2.EndNode.NodeNo))
                {
                    flag = true;
                    coor_flag = 1;
                }
                else
                {
                    flag = false;

                    msg = string.Format("Beam 1 : {0} [{1} {2}], Beam 2 : {3} [{4} {5}] Joint Mismatch....\n\n",
                        mi.MemberNo, mi.StartNode.NodeNo, mi.EndNode.NodeNo,
                        mi2.MemberNo, mi2.StartNode.NodeNo, mi2.EndNode.NodeNo);
                }
                if (flag)
                {
                    if ((mi2.EndNode.NodeNo == mi3.StartNode.NodeNo) ||
                         (mi2.EndNode.NodeNo == mi3.EndNode.NodeNo) ||
                         (mi2.StartNode.NodeNo == mi3.StartNode.NodeNo) ||
                         (mi2.StartNode.NodeNo == mi3.EndNode.NodeNo))
                    {
                        flag = true;
                    }
                    else
                    {
                        flag = false;

                        msg = string.Format("Beam 2 : {0} [{1} {2}], Beam 3 : {3} [{4} {5}] Joint Mismatch....\n\n",
                               mi2.MemberNo, mi2.StartNode.NodeNo, mi2.EndNode.NodeNo,
                            mi3.MemberNo, mi3.StartNode.NodeNo, mi3.EndNode.NodeNo);
                    }
                }
                if (flag)
                {
                    if ((mi3.StartNode.NodeNo == mi4.StartNode.NodeNo) ||
                         (mi3.StartNode.NodeNo == mi4.EndNode.NodeNo) ||
                         (mi3.EndNode.NodeNo == mi4.StartNode.NodeNo) ||
                         (mi3.EndNode.NodeNo == mi4.EndNode.NodeNo))
                    {
                        flag = true;
                    }
                    else
                    {
                        msg = string.Format("Beam 3 : {0} [{1} {2}], Beam 4 : {3} [{4} {5}] Joint Mismatch....\n\n",
                              mi3.MemberNo, mi3.StartNode.NodeNo, mi3.EndNode.NodeNo,
                              mi4.MemberNo, mi4.StartNode.NodeNo, mi4.EndNode.NodeNo);

                        flag = false;
                    }
                }
                if (flag)
                {

                    if ((mi4.StartNode.NodeNo == mi.StartNode.NodeNo) ||
                         (mi4.EndNode.NodeNo == mi.StartNode.NodeNo))
                    {
                        flag = true;
                    }
                    else if ((mi4.StartNode.NodeNo == mi.EndNode.NodeNo) ||
                         (mi4.EndNode.NodeNo == mi.EndNode.NodeNo))
                    {
                        flag = true;
                    }
                    else
                    {
                        flag = false;

                        msg = string.Format("Beam 4 : {0} [{1} {2}], Beam 1 : {3} [{4} {5}] Joint Mismatch....\n\n",
                            //msg = string.Format("Beam 4 [{0} {1}], Beam 1 [{2} {3}] Joint Mismatch....\n\n",
                              mi4.MemberNo, mi4.StartNode.NodeNo, mi4.EndNode.NodeNo,
                              mi.MemberNo, mi.StartNode.NodeNo, mi.EndNode.NodeNo);

                    }
                }
                if (!flag)
                {
                    MessageBox.Show(msg + "Data not accepted.", "ASTRA", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    return;
                }
                #endregion  Beam Check
            }

            List<string> list = new List<string>();

            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*            DESIGN OF RCC SLAB              *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");

            #endregion

            #region  STEP 1 : Structure Data from Analysis Input File

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------------------------"));
            list.Add(string.Format("STEP 1 : Structure Data from Analysis Input File"));
            list.Add(string.Format("---------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------------------------------------------------------------------------"));
            list.Add(string.Format("  Beam#   Member#   Joint1        X         Y           Z      Joint2         X         Y           Z       Length"));
            list.Add(string.Format("--------------------------------------------------------------------------------------------------------------------"));
            for (int i = 0; i < mic.Count; i++)
            {
                list.Add(string.Format("{0,5} {1,9} {2,8} {3,12:f3} {4,10:f3} {5,10:f3} {6,8} {7,12:f3} {8,10:f3} {9,10:f3} {10,10:f3}", (i + 1),
                    mic[i].MemberNo,
                    mic[i].StartNode.NodeNo,
                    mic[i].StartNode.Point.x,
                    mic[i].StartNode.Point.y,
                    mic[i].StartNode.Point.z,
                    mic[i].EndNode.NodeNo,
                    mic[i].EndNode.Point.x,
                    mic[i].EndNode.Point.y,
                    mic[i].EndNode.Point.z,
                    mic[i].Length));
            }
            list.Add(string.Format("--------------------------------------------------------------------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion  STEP 1 : Structure Data from Analysis Input File


            #region User Input Data
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------"));
            list.Add(string.Format("USER INPUT DATA"));
            list.Add(string.Format("----------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("STRUCTURE DATA"));
            list.Add(string.Format("---------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add("Position & Case Type of Slab");
            list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add("Case 4");
            list.Add(string.Format("Case {0} {1}", case_index + 1, Get_Type(case_index)));

            list.Add(string.Format(""));
            //list.Add(string.Format("                                   Ly                      "));
            //list.Add(string.Format("                     -----------------------------"));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                  Lx |                           | Lx  "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     |                           |   "));
            //list.Add(string.Format("                     -----------------------------"));
            //list.Add(string.Format("                                   Ly              "));
            //list.Add(string.Format(""));
            //double Lx = Math.Min(mic[0].Length, mic[1].Length);
            //double Ly = Math.Max(mic[0].Length, mic[1].Length);

            double Lx = Math.Min(sconf.Length_A, sconf.Length_B);
            double Ly = Math.Max(sconf.Length_A, sconf.Length_B);

            list.Add(string.Format("Lx = {0:f3} m,     Ly = {1:f3} m", Lx, Ly));

            BOQ.Section_D = Lx;
            BOQ.Section_B = Ly;
            BOQ.Floor_ELevation = mic[0].StartNode.Y;
            BOQ.Slab_Thickness = D;
            BOQ.Floor_Area = Lx * Ly;

            //double D, fck, gamma, fy, wll, d1, d2, d3, d4, dlf, llf;

            //D = MyList.StringToDouble(txt_slab_D.Text, 0.0);
            //fck = MyList.StringToDouble(cmb_slab_fck.Text.Replace("M", ""), 0.0);
            //gamma = MyList.StringToDouble(txt_slab_gamma.Text, 0.0);
            //fy = MyList.StringToDouble(cmb_slab_fy.Text.Replace("Fe", ""), 0.0);
            //wll = MyList.StringToDouble(txt_slab_wll.Text, 0.0);
            //d1 = MyList.StringToDouble(txt_slab_d1.Text, 0.0);
            //d2 = MyList.StringToDouble(txt_slab_d2.Text, 0.0);
            //d3 = MyList.StringToDouble(txt_slab_d3.Text, 0.0);
            //d4 = MyList.StringToDouble(txt_slab_c.Text, 0.0);
            //dlf = MyList.StringToDouble(txt_slab_DLF.Text, 0.0);
            //llf = MyList.StringToDouble(txt_slab_LLF.Text, 0.0);



            list.Add(string.Format(""));
            list.Add(string.Format("DESIGN DATA"));
            list.Add(string.Format("------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall Thickness of Slab = D = {0} mm", D));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = M{0}", fy));
            list.Add(string.Format("Unit Weight of Concrete = γc = {0} kN/Cu.m", gamma));
            list.Add(string.Format("Live Load = WLL = {0} kN/Sq.m", wll));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bars in Shorter Direction at Bottom"));
            list.Add(string.Format("Diameter of Bars = d1 = {0} mm, Spacing = s1 = {1} mm", d1, s1));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bars in Longer Direction at Bottom"));
            list.Add(string.Format("Diameter of Bars = d2 = {0} mm, Spacing = s2 = {1} mm", d2, s2));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Bars in Edge Strip at Top"));
            list.Add(string.Format("Diameter of Bars = d3 = {0} mm, Spacing = s3 = {1} mm", d3, s3));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Bars in Corners at Top & Bottom"));
            list.Add(string.Format("Diameter of Bars = d4 = {0} mm, Spacing = s4 = {1} mm", cover, s4));




            //list.Add(string.Format("Diameter of Main Reinforcement Bars in Edge Strip at Bottom = d2 = {0} mm", d2));
            //list.Add(string.Format("Diameter of Main Reinforcement Bars in Corners at Top & Bottom = d3 = {0} mm", d3));
            list.Add(string.Format("Cover for Reinforcement = c = {0} mm", cover));
            list.Add(string.Format("Dead Load Factor = DLF = {0}", dlf));
            list.Add(string.Format("Live Load Factor = LLF = {0}", llf));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion User Input Data


            double LY_by_LX = Ly / Lx;
            list.Add(string.Format("Ly = {0:f3} m,    Lx = {1:f3} m,   Ly/Lx = {0:f3}/{1:f3} = {2:f3}", Ly, Lx, LY_by_LX));
            list.Add(string.Format(""));

            //if (LY_by_LX < 2.0)
            //    list.Add(string.Format("This is Two Way Slab Type"));
            //else
            //    list.Add(string.Format("This is One Way Slab Type"));
            list.Add(string.Format(""));



            #region  STEP 2 : Effective Depth

            list.Add(string.Format("-------------------------"));
            list.Add(string.Format("STEP 2 : Effective Depth"));
            list.Add(string.Format("-------------------------"));
            list.Add(string.Format(""));

            double d = D - (d1 / 2) - cover;
            list.Add(string.Format("Effective Depth = d = D - (d1 / 2) - c"));
            list.Add(string.Format("                    = {0} - ({1} / 2) - {2}", D, d1, cover));
            list.Add(string.Format("                    = {0:f3} mm", d));
            list.Add(string.Format(""));

            #endregion STEP 2 : Effective Depth

            #region STEP 3 : Design Load

            list.Add(string.Format("---------------------"));
            list.Add(string.Format("STEP 3 : Design Load"));
            list.Add(string.Format("---------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Define Dead Loads"));
            list.Add(string.Format("------------------"));

            double WDL = D / 1000 * gamma;
            //list.Add(string.Format("Dead Load = WDL = D x 1.0 x γ = ({0}/1000) x 1.0 x {1} = {2:f3} kN/Sq.m ", D, gamma, WDL));

            double dl_sw = WDL;
            list.Add(string.Format("Self Weight = (D/1000) x 1.0 x γ = ({0}/1000) x 1.0 x {1} = {2:f3} kN/Sq.m ", D, gamma, WDL));
            list.Add(string.Format(""));
            if (dgv_dls != null)
            {
                for (int i = 0; i < dgv_dls.RowCount - 1; i++)
                {
                    try
                    {
                        list.Add(string.Format("{0}   = {1:f3} kN/Sq.m", dgv_dls[0, i].Value, dgv_dls[1, i].Value));
                        WDL += MyList.StringToDouble(dgv_dls[1, i].Value.ToString(), 0.0);
                    }
                    catch (Exception exx) { }
                }
            }
            list.Add(string.Format(""));
            list.Add(string.Format("Total Dead Load = WDL = {0:f3} kN/Sq.m", WDL));
            list.Add(string.Format(""));




            list.Add(string.Format("Live Load = WLL = {0} kN/Sq.m", wll));
            list.Add(string.Format(""));

            double w = WDL * dlf + wll * llf;
            list.Add(string.Format("Design Load = w = WDL x DLF + WLL x LLF"));
            list.Add(string.Format("                = {0:f3} x {1} + {2:f3} x {3}", WDL, dlf, wll, llf));
            list.Add(string.Format("                = {0:f3} kN/Sq.m", w));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            #endregion STEP 2 : Design Load

            #region STEP 4 : Type of Slab

            //list.Add(string.Format("STEP 4 : Type of Slab"));
            list.Add(string.Format("------------------------------"));
            list.Add(string.Format("STEP 4 : Design Coefficients"));
            list.Add(string.Format("------------------------------"));
            list.Add(string.Format(""));
            //double LY_by_LX = Ly / Lx;
            //list.Add(string.Format("Ly = {0:f3} m,    Lx = {1:f3} m,   Ly/Lx = {0:f3}/{1:f3} = {2:f3}", Ly, Lx, LY_by_LX));
            //list.Add(string.Format(""));

            //if (LY_by_LX < 2.0)
            //    list.Add(string.Format("This is Two Way Slab Type"));
            //else
            //    list.Add(string.Format("This is One Way Slab Type"));
            //list.Add(string.Format(""));

            //To add more cases
            //list.Add(string.Format("Two Adjacent Edges are Discontinuous - Case 4"));





            //list.Add(string.Format("{0} - Case {1}", cmb_slab_type.Text, cmb_slab_type.SelectedIndex + 1));
            list.Add(string.Format("{0} - Case {1}", Get_Type(case_index), case_index + 1));
            list.Add(string.Format(""));


            double beta_x = 0.084;
            double beta_y = 0.063;
            double alpha_x = 0.047;
            double alpha_y = 0.035;

            Tables.Get_Bending_Moment_Coefficients(out beta_x, out  beta_y, out  alpha_x, out  alpha_y, LY_by_LX, case_index);

            beta_x = Math.Pow(LY_by_LX, 4.0) / (8 * (1 + Math.Pow(LY_by_LX, 4.0)));
            beta_y = Math.Pow(LY_by_LX, 2.0) / (8 * (1 + Math.Pow(LY_by_LX, 4.0)));


            list.Add(string.Format("βx = {0:f4},   βy = {1:f4},   ", beta_x, beta_y));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment Coefficients for Simply Supported Two-Way Slabs"));
            list.Add(string.Format(""));
            list.Add(string.Format("   βx = (Ly/Lx)^4 / (8 x (1 + (Ly/Lx)^4))"));
            list.Add(string.Format("      = ({0:f3})^4 / (8 x (1 + ({0:f3})^4))", LY_by_LX));
            list.Add(string.Format("      = {0:f3}", beta_x));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("   βy = (Ly/Lx)^2 / (8 x (1 + (Ly/Lx)^4))"));
            list.Add(string.Format("      = ({0:f3})^2 / (8 x (1 + ({0:f3})^4))", LY_by_LX));
            list.Add(string.Format("      = {0:f3}", beta_y));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("  αx = {0:f4},   αy = {1:f4},   (from TABLE 1)", alpha_x, alpha_y));
            #endregion STEP 3 : Type of Slab

            #region STEP 5 : Check for Shear


            list.Add(string.Format(""));
            list.Add(string.Format("------------------------"));
            list.Add(string.Format("STEP 5 : Check for Shear"));
            list.Add(string.Format("------------------------"));
            list.Add(string.Format(""));

            double gamma_x1 = 0.57;
            double gamma_x2 = 0.38;
            double gamma_x3 = 0.57;
            double gamma_x4 = 0.38;


            Tables.Get_Shear_Force_Coefficients(out gamma_x1, out  gamma_x2, out  gamma_x3, out  gamma_x4, LY_by_LX, case_index);


            double gamma_x_max = Math.Max(gamma_x1, gamma_x2);

            list.Add(string.Format(""));
            list.Add(string.Format("Case {0} ,  γx = {1:f4} and {2:f4},   γx_max = {3:f4}   (from Table 2)", case_index + 1, gamma_x1, gamma_x2, gamma_x_max));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Shear Force = V = γx_max  x  w  x Lx "));

            double V = gamma_x_max * w * Lx;
            list.Add(string.Format("                        = {0:f4}  x {1:f3} x {2:f3} ", gamma_x_max, w, Lx));
            list.Add(string.Format("                        = {0:f3} kN", V));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double v = (V * 1000) / (1000 * d);
            list.Add(string.Format("Shear Stress = v = (V x 1000) / (1000 x d)"));
            list.Add(string.Format("                 = ({0:f3} x 1000) / (1000 x {1:f3})", V, d));
            list.Add(string.Format("                 = {0:f3} N/Sq.mm", v));
            list.Add(string.Format(""));






            //Bar Diameter = 12 mm

            double Abar = Math.PI * d1 * d1 / 4.0;


            double p = (Abar * 100.0) / (D * d);
            //sw.WriteLine("Percentage of Steel = p = ({0} * 100) / ({1} * {2})", bar_ast, (b * 1000), d);
            //sw.WriteLine("                        = {0:f2}%", p);
            //sw.WriteLine();


            //double tab_value = 0.29; // from Table 3
            string ref_str = "";
            double tab_value = Tables.Permissible_Shear_Stress(p, (int)fck, ref ref_str);
            if (tab_value > v)
                list.Add(string.Format("Minimum Shear Strength for M{0} Grade Concrete = {1:f3} (TABLE 3) > {2:f3} , OK", fck, tab_value, v));
            else
            {
                list.Add(string.Format("Minimum Shear Strength for M{0} Grade Concrete = {1:f3} (TABLE 3) < {2:f3} , NOT OK", fck, tab_value, v));
                IS_DESIGN_OK = false;
            }
            list.Add(string.Format(""));


            #endregion STEP 4 : Check for Shear

            #region STEP 6 : Bending Moment

            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------"));
            list.Add(string.Format("STEP 6 : Bending Moment"));
            list.Add(string.Format("-----------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format("STEP 6.1 : Shorter Direction"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Continuous Edge"));
            list.Add(string.Format(""));


            double M1 = beta_x * w * Lx * Lx;
            list.Add(string.Format("   M1 = βx  x  w  x  Lx^2"));
            list.Add(string.Format("      = {0:f4}  x  {1:f3}  x  {2:f3}^2", beta_x, w, Lx));
            list.Add(string.Format("      = {0:f4} kN-m", M1));

            list.Add(string.Format(""));
            list.Add(string.Format("Positive Bending Moment at Mid Span"));
            list.Add(string.Format(""));
            double M2 = beta_y * w * Lx * Lx;
            list.Add(string.Format("   M2 = βy  x  w  x  Lx^2"));
            list.Add(string.Format("      = {0:f4}  x  {1:f3}  x  {2:f3}^2", beta_y, w, Lx));
            list.Add(string.Format("      = {0:f4} kN-m", M2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Discontinuous Edge"));
            list.Add(string.Format(""));

            double M3 = M2 / 2.0;
            list.Add(string.Format("   M3 =  (Positive BM at Mid Span) / 2 = M2 / 2 = {0:f3}/2 = {1:f3} kN-m", M2, M3));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format("STEP 6.2 : Longer Direction"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double alpha_min = Math.Min(alpha_x, alpha_y);
            list.Add(string.Format("αx = {0:f4},   αy = {1:f4},    α_min = {2:f4}", alpha_x, alpha_y, alpha_min));
            list.Add(string.Format(""));
            list.Add(string.Format("Positive Bending Moment at Mid Span"));
            list.Add(string.Format(""));


            double M4 = alpha_min * w * Lx * Lx;
            list.Add(string.Format("   M4 = α_min x w x Lx^2"));
            list.Add(string.Format("      = {0:f4} x {1:f3} x  {2:f3}^2", alpha_min, w, Lx));
            list.Add(string.Format("      = {0:f3} kN-m", M4));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Continuous Edge"));
            list.Add(string.Format(""));

            double M5 = (4.0 / 3.0) * M4;
            list.Add(string.Format("   M5 = (4 / 3) x M4 = (4 / 3) x {0:f3} = {1:f3} kN-m", M4, M5));
            list.Add(string.Format(""));
            list.Add(string.Format("Negative Bending Moment on Discontinuous Edge"));
            list.Add(string.Format(""));
            double M6 = (1.0 / 2.0) * M4;
            list.Add(string.Format("   M6 = (1 / 2) x M4 = (1 / 2) x {0:f3} = {1:f3} kN-m", M4, M6));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion STEP 5 : Bending Moment

            #region STEP 7 : Reinforcement Steel

            list.Add(string.Format("----------------------------"));
            list.Add(string.Format("STEP 7 : Reinforcement Steel"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Diameter = {0} mm", d1));
            list.Add(string.Format(""));
            Abar = Math.PI * d1 * d1 / 4.0;
            list.Add(string.Format("Area of Bar = Abar = 3.1416 x {0}^2 / 4 = {1:f3} Sq.mm.", d1, Abar));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double M = M1;

            double j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            //double j = 0.5 + Math.Pow((0.25 - ((M * 1000000) / (0.87 * fck * 1000 * d1 * d1))), 0.5);
            double Ast = (M * 1000000) / (0.87 * fy * d * j);
            double Spacing = (1000 * Abar) / (Ast);


            List<double> list_j = new List<double>();
            List<double> list_Ast = new List<double>();
            List<double> list_spacing = new List<double>();



            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            #region Short Direction (Mid Span)

            M = M1;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format("STEP 7.1 : Shorter Direction (Mid Span, at Bottom)"));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M1 = {0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M2 x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                             = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                             = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d1 = {0} mm. and spacing = s1 = {1} mm.)", d1, s1));
            list.Add(string.Format(""));
            Abar = Math.PI * d1 * d1 / 4.0;
            double Ast1 = Abar * (1000 / s1);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d1, s1));
            if (Ast1 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast1, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast1, Ast));
            }


            list.Add(string.Format(""));
         

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Bottom = S_AST[1]", d1, s1));

            #endregion Proposed Area of Steel


            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));
            #endregion   Short Direction (Mid Span)

            #region Longer Direction (Mid Span, at Bottom)

            M = M2;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format("STEP 7.2 : Longer Direction (Mid Span, at Bottom)"));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M2 = {0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d1 x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d2 = {0} mm. and spacing = s2 = {1} mm.)", d2, s2));
            list.Add(string.Format(""));
            Abar = Math.PI * d2 * d2 / 4.0;
            double Ast2 = Abar * (1000 / s2);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d2, s2));
            if (Ast2 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast2, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast2, Ast));
            }


            list.Add(string.Format(""));

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[2]";
            ssr.Text = "Longer Direction (Mid Span, at Bottom)";
            ssr.Number_Of_Bars = (int)(1000 / s2);
            ssr.Bar_Dia = d2;
            ssr.Length = Ly;

            BOQ.Steel_Reinforcement.Add(ssr);

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Bottom = S_AST[2]", d2, s2));

            #endregion Proposed Area of Steel




            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));
            #endregion   Long Direction (Mid Span)

            #region Shorter Direction (Continuous Edge, at Top)

            M = M3;

            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format("STEP 7.3 : Shorter Direction (Continuous Edge, at Top)"));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M3 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d3 = {0} mm. and spacing = s3 = {1} mm.)", d3, s3));
            list.Add(string.Format(""));
            Abar = Math.PI * d3 * d3 / 4.0;
            double Ast3 = Abar * (1000 / s3);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d3, s3));
            if (Ast3 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast3, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast3, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[3]";
            ssr.Text = "Shorter Direction (Continuous Edge, at Top)";
            ssr.Number_Of_Bars = (int)(1000 / s3);
            ssr.Bar_Dia = d3;
            ssr.Length = Lx;

            BOQ.Steel_Reinforcement.Add(ssr);


            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top = S_AST[3]", d3, s3));

            #endregion Proposed Area of Steel

            list.Add(string.Format(""));

            #endregion Shorter Direction (Continuous Edge)

            #region   Short Direction (Discontinuous Edge)

            M = M4;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format("STEP 7.4 : Short Direction (Discontinuous Edge, at Top)"));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M4 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d4 = {0} mm. and spacing = s4 = {1} mm.)", d4, s4));
            list.Add(string.Format(""));
            Abar = Math.PI * d4 * d4 / 4.0;
            double Ast4 = Abar * (1000 / s4);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d4, s4));
            if (Ast4 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast4, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast4, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[4]";
            ssr.Text = "Short Direction (Discontinuous Edge, at Top)";
            ssr.Number_Of_Bars = (int)(1000 / s4);
            ssr.Bar_Dia = d4;
            ssr.Length = Lx;

            BOQ.Steel_Reinforcement.Add(ssr);

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top = S_AST[4]", d4, s4));

            #endregion Proposed Area of Steel




            list.Add(string.Format(""));
            #endregion   Short Direction (Discontinuous Edge)


            #region   Long Direction (Continuous Edge)

            M = M5;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------------------------"));
            list.Add(string.Format("STEP 7.5 : Longer Direction (Continuous Edge, at Top)"));
            list.Add(string.Format("------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M5 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));


            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d3 = {0} mm. and spacing = s3 = {1} mm.)", d3, s3));
            list.Add(string.Format(""));
            Abar = Math.PI * d3 * d3 / 4.0;
            double Ast5 = Abar * (1000 / s3);


            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d3, s3));
            if (Ast5 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast5, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast5, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[5]";
            ssr.Text = "Longer Direction (Continuous Edge, at Top)";
            ssr.Number_Of_Bars = (int)(1000 / s3);
            ssr.Bar_Dia = d3;
            ssr.Length = Ly;

            BOQ.Steel_Reinforcement.Add(ssr);
            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top = S_AST[5]", d3, s3));

            #endregion Proposed Area of Steel

            #endregion   Long Direction (Continuous Edge)

            #region Longer Direction (Discontinuous Edge, at Top)

            M = M6;
            j = 0.5 + Math.Pow(Math.Abs(0.25 - (M * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);
            Ast = (M * 1000000) / (0.87 * fy * d * j);
            Spacing = (1000 * Abar) / (Ast);

            list_j.Add(j);
            list_Ast.Add(Ast);
            list_spacing.Add(Spacing);

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------------------------------"));
            list.Add(string.Format("STEP 7.6 : Longer Direction (Discontinuous Edge, at Top)"));
            list.Add(string.Format("---------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment = M6 = -{0:f3} kN-m", M));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j = 0.5 + ((0.25 - (M x 10^6) / (0.87 x fck x 1000 x d1^2))^0.5"));
            list.Add(string.Format("                     = 0.5 + ((0.25 - ({0:f3} x 10^6) / (0.87 x {1} x 1000 x {2}^2))^0.5", M, fck, d));
            list.Add(string.Format("                     = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Steel = Ast = (M x 10^6) / (0.87 x fy x d1 x j)"));
            list.Add(string.Format("                    = ({0:f3} x 10^6) / (0.87 x {1} x {2} x {3:f3})", M, fy, d, j));
            list.Add(string.Format("                    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));

            #region Proposed Area of Steel
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d3 = {0} mm. and spacing = s3 = {1} mm.)", d3, s3));
            list.Add(string.Format(""));
            Abar = Math.PI * d3 * d3 / 4.0;
            double Ast6 = Abar * (1000 / s3);



            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d3, s3));
            if (Ast6 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast6, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast6, Ast));
            }


            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[6]";
            //ssr. = "Longer Direction (Discontinuous Edge, at Top)";
            ssr.Number_Of_Bars = (int)(1000 / s3);
            ssr.Bar_Dia = d3;
            ssr.Length = Ly;

            BOQ.Steel_Reinforcement.Add(ssr);
            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top = S_AST[6]", d3, s3));

            #endregion Proposed Area of Steel

            list.Add(string.Format(""));

            #endregion   Long Direction (Discontinuous Edge)

            list.Add(string.Format(""));

            double dis_reinf = (0.12 / 100) * 1000 * d;
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format("STEP 7.7 : Distribution Steel"));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format(""));

            double max_sp_steel = MyList.Get_Max_Value(list_Ast);
            list.Add(string.Format("Maximum Span Steel = {0:f3} Sq.mm", max_sp_steel));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Area of Steel for Distribution Reinforcement "));
            list.Add(string.Format(""));
            list.Add(string.Format("     = (0.12 / 100) x 1000 x d "));
            list.Add(string.Format("     = (0.0012) x 1000 x {0:f3} ", d));
            list.Add(string.Format("     = {0:f3} ", dis_reinf));
            list.Add(string.Format(""));

            #region Proposed Area of Steel
            list.Add(string.Format("Provided Area of Steel for Long Direction (Mid Span, at Bottom) = S_AST[7] = S_AST[2]", d3, s3));
            list.Add(string.Format(""));
            //Abar = Math.PI * d3 * d3 / 4.0;

            double Ast7 = Ast2;

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[7]";
            ssr.Text = "Distribution Steel";
            ssr.Number_Of_Bars = (int)(1000 / s2);
            ssr.Bar_Dia = d2;
            ssr.Length = Ly;
            BOQ.Steel_Reinforcement.Add(ssr);


            if (Ast7 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast7, Ast));
            else
            {
                IS_DESIGN_OK = true;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast7, Ast));
            }


            list.Add(string.Format(""));

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AST[7]", d2, s2));

            #endregion Proposed Area of Steel

            list.Add(string.Format(""));

            #endregion STEP 6 : Reinforcement Steel

            #region STEP 8 : Corner Reinforcements (Top & Bottom)


            list.Add(string.Format("STEP 8 : Corner Reinforcements (Top & Bottom)"));
            list.Add(string.Format("---------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Area of Steel for Corner Reinforcements (Top & Bottom)"));
            list.Add(string.Format(""));
            list.Add(string.Format("  As = Area of Steel >= (3/8) x Maximum Span Steel"));
            list.Add(string.Format("                      = (3/8) x {0:f3}", max_sp_steel));

            Ast = (3.0 / 8.0) * max_sp_steel;
            list.Add(string.Format("                      = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Proposed Area of Steel (with Bar Dia d4 = {0} mm. and spacing = s4 = {1} mm.)", d4, s4));
            list.Add(string.Format(""));
            Abar = Math.PI * d4 * d4 / 4.0;
            double Ast8 = Abar * (1000 / s4);

            //double bar_nos = 
            list.Add(string.Format(" = (3.1416 x {0} x {0} / 4) x (1000 / {1})", d4, s4));
            if (Ast8 > Ast)
                list.Add(string.Format(" = {0:f3} Sq. mm. > Reqd. Ast = {1:f3} Sq.mm, Hence, OK.", Ast8, Ast));
            else
            {
                IS_DESIGN_OK = false;
                list.Add(string.Format(" = {0:f3} Sq. mm. < Reqd. Ast = {1:f3} Sq.mm, Hence, NOT OK.", Ast8, Ast));
            }

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[8]";
            ssr.Text = "Corner Reinforcements (Top & Bottom)";
            ssr.Number_Of_Bars = (int)(1000 / s4);
            ssr.Bar_Dia = d4;
            ssr.Length = Ly;
            BOQ.Steel_Reinforcement.Add(ssr);

            list.Add(string.Format(""));

            list.Add(string.Format("Bar Mark in Drawing = {0}T @ {1} mm c/c, at Top & Bottom = S_AST[8]", d4, s4));


            //list.Add(string.Format("Bar Spacing = (1000 * Abar) / (As) = (1000 * {0:f3}) / ({1:f3}) = {2:f3}", Abar, Ast, Spacing));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion STEP 7 : Corner Reinforcements (Top & Bottom)

            #region STEP 9 : Reinforcement for Edge Strip

            list.Add(string.Format("STEP 9 : Reinforcement for Edge Strip"));
            list.Add(string.Format("-------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel >= Distribution Steel"));
            list.Add(string.Format(""));
            list.Add(string.Format("Or,"));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel = 0.5 x Shorter Direction Mid Span Reinforcement"));
            list.Add(string.Format(""));

            #endregion STEP 8 : Reinforcement for Edge Strip


            #region Design Summary

            Design_Summary = new List<string>();
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 10 : DESIGN SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));

            Design_Summary.Add(string.Format("Overall Thickness of Slab = D = {0} mm.", D));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Shorter Direction (Mid Span, at Bottom), "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.)"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d1, s1, Ast1));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[1] in shorter direction Span Steel at Bottom"));
            //Design_Summary.Add(string.Format(""));


            BOQ.Steel_Reinforcement.Clear();

            #region S_AST[1]
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[1]";
            ssr.Text = "Shorter Direction (Mid Span, at Bottom)";
            ssr.Bar_Dia = d1;
            ssr.Bar_Spacing = s1;
            ssr.Length = Lx;
            ssr.Number_Of_Bars = (int)(Lx * 1000 / s1);
            BOQ.Steel_Reinforcement.Add(ssr);
            #endregion 



            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Longer Direction (Mid Span, at Bottom), "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.)"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d2, s2, Ast2));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[2] in longer direction Span Steel at Bottom"));
          
            #region S_AST[2]
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[2]";
            ssr.Text = "Longer Direction (Mid Span, at Bottom)";
            ssr.Bar_Dia = d2;
            ssr.Bar_Spacing = s2;
            ssr.Length = Ly;
            ssr.Number_Of_Bars = (int)(Ly * 1000 / s2);
            BOQ.Steel_Reinforcement.Add(ssr);
            #endregion  S_AST[2]

            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Shorter Direction (Continuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.)"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d3, s3, Ast3));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[3] in Shorter Direction Continuous Edge, at Top,"));
            //Design_Summary.Add(string.Format(""));

            #region S_AST[3]
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[3]";
            ssr.Text = "Shorter Direction (Continuous Edge, at Top),";
            ssr.Bar_Dia = d3;
            ssr.Bar_Spacing = s3;
            ssr.Length = Lx;
            ssr.Number_Of_Bars = (int)((Lx*1000) / s3);
            BOQ.Steel_Reinforcement.Add(ssr);
            #endregion  S_AST[3]

            
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Shorter Direction (Discontinuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). This steel is optional"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). This steel is optional", d3, s3, Ast4));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[4] in Shorter Direction Discontinuous Edge, at Top, "));
            Design_Summary.Add(string.Format(""));

            #region S_AST[4]
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[4]";
            ssr.Text = "Shorter Direction (Discontinuous Edge, at Top),";
            ssr.Bar_Dia = d3;
            ssr.Bar_Spacing = s3;
            ssr.Length = Lx;
            ssr.Number_Of_Bars = (int)((Lx * 1000) / s3);
            BOQ.Steel_Reinforcement.Add(ssr);
            #endregion  S_AST[3]


            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Longer Direction (Continuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). Provide S_Ast[3]"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). Provide S_Ast[3]", d3, s3, Ast5));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[5] in Longer Direction Continuous Edge, at Top, "));
            Design_Summary.Add(string.Format(""));


            #region S_AST[5]
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[5]";
            ssr.Text = "Longer Direction (Continuous Edge, at Top),";
            ssr.Bar_Dia = d3;
            ssr.Bar_Spacing = s3;
            ssr.Length = Ly;
            ssr.Number_Of_Bars = (int)((Ly * 1000) / s3);
            BOQ.Steel_Reinforcement.Add(ssr);
            #endregion  S_AST[5]

            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Longer Direction (Discontinuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). This steel is optional"));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). This steel is optional", d3, s3, Ast6));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[6] in Longer Direction Discontinuous Edge, at Top, "));
            Design_Summary.Add(string.Format(""));

            #region S_AST[6]
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[6]";
            ssr.Text = "Longer Direction (Discontinuous Edge, at Top),";
            ssr.Bar_Dia = d3;
            ssr.Bar_Spacing = s3;
            ssr.Length = Ly;
            ssr.Number_Of_Bars = (int)((Ly * 1000) / s3);
            BOQ.Steel_Reinforcement.Add(ssr);
            #endregion  S_AST[6]



            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Distribution Steel in Longer Direction at Bottom, "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.). If this steel is less than "));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). If this steel is less than ", d2, s2, Ast7));
            Design_Summary.Add(string.Format("or equal to shorter direction Span Steel at Bottom, then provide S_Ast[1]."));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[7] in longer direction Span Steel at Bottom,"));
            Design_Summary.Add(string.Format(""));

            #region S_AST[7]
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[7]";
            ssr.Text = "Distribution Steel in Longer Direction at Bottom,";
            ssr.Bar_Dia = d2;
            ssr.Bar_Spacing = s2;
            ssr.Length = Ly;
            ssr.Number_Of_Bars = (int)((Ly * 1000) / s2);
            BOQ.Steel_Reinforcement.Add(ssr);
            #endregion  S_AST[6]


            //Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Corner Reinforcements (Top & Bottom), "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.). If this steel is less than "));
            Design_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d4, s4, Ast8));
            Design_Summary.Add(string.Format("Bar mark in drawing = S_Ast[8] in Corner direction at Top & Bottom,"));
            Design_Summary.Add(string.Format(""));

            #region S_AST[8]
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "S_AST[8]";
            ssr.Text = "Corner Reinforcements (Top & Bottom),";
            ssr.Bar_Dia = d4;
            ssr.Bar_Spacing = s4;
            ssr.Length = Ly;
            ssr.Number_Of_Bars = (int)((Ly * 1000) / s4);
            BOQ.Steel_Reinforcement.Add(ssr);
            #endregion  S_AST[6]



            list.AddRange(Design_Summary.ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion Design Summary



            #region BOQ Summary

            BOQ_Summary = new List<string>();
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 11 : BILL OF QUANTITY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));


            string fl_lev = mic[0].StartNode.Y.ToString("f4");

            BOQ_Summary.Add(string.Format("SLAB MEMBERS = {0}", Beam_Nos, fl_lev));
            BOQ_Summary.Add(string.Format("FLOOR LEVEL = {1:f3}", Beam_Nos, fl_lev));
            BOQ_Summary.Add(string.Format("Overall Thickness of Slab = D = {0} mm.", D));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Conctete Quantity = {0:f3} x {1:f3} x {2:f3} = {3:f3} Cu.m", Lx, Ly, D / 1000, (Lx * Ly * D / 1000)));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("------------------"));
            BOQ_Summary.Add(string.Format("REBAR QUANTITY"));
            BOQ_Summary.Add(string.Format("------------------"));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Shorter Direction (Mid Span, at Bottom), "));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d1, s1, Ast1));
          
            //ssr.Number_Of_Bars = (int)(Lx * 1000 / s1);
            double bnos = (int)(Lx * 1000 / s1);
            double tot_weight = bnos * Lx * Tables.Rebars.Get_Rebar_Weight(d1);

            BOQ_Summary.Add(string.Format("Total Weight = {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Lx, 
                Tables.Rebars.Get_Rebar_Weight(d1), tot_weight));


            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Longer Direction (Mid Span, at Bottom), "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.)"));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d2, s2, Ast2));
        
            bnos = (int)(Ly * 1000 / s2);
            tot_weight = bnos * Ly * Tables.Rebars.Get_Rebar_Weight(d2);

            BOQ_Summary.Add(string.Format("Total Weight = {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Ly,
                Tables.Rebars.Get_Rebar_Weight(d2), tot_weight));



            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Shorter Direction (Continuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.)"));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d3, s3, Ast3));

            bnos = (int)(Lx * 1000 / s3);
            tot_weight = bnos * Lx * Tables.Rebars.Get_Rebar_Weight(d3);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Lx,
                Tables.Rebars.Get_Rebar_Weight(d3), tot_weight));


            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Shorter Direction (Discontinuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). This steel is optional"));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). This steel is optional", d3, s3, Ast4));

            bnos = (int)(Lx * 1000 / s3);
            tot_weight = bnos * Lx * Tables.Rebars.Get_Rebar_Weight(d3);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Lx,
                Tables.Rebars.Get_Rebar_Weight(d3), tot_weight));
             

          


            //Design_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Longer Direction (Continuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). Provide S_Ast[3]"));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). Provide S_Ast[3]", d3, s3, Ast5));

            bnos = (int)(Ly * 1000 / s3);
            tot_weight = bnos * Ly * Tables.Rebars.Get_Rebar_Weight(d3);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Ly,
                Tables.Rebars.Get_Rebar_Weight(d3), tot_weight));

            //Design_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Longer Direction (Discontinuous Edge, at Top), "));
            //list.Add(string.Format("Provide 10T @ 200 mm mm c/c, (Ast = 392.699 Sq. mm.). This steel is optional"));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). This steel is optional", d3, s3, Ast6));

            bnos = (int)(Ly * 1000 / s3);
            tot_weight = bnos * Ly * Tables.Rebars.Get_Rebar_Weight(d3);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Ly,
                Tables.Rebars.Get_Rebar_Weight(d3), tot_weight));
             




            //Design_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Distribution Steel in Longer Direction at Bottom, "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.). If this steel is less than "));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.). If this steel is less than ", d2, s2, Ast7));
            BOQ_Summary.Add(string.Format("or equal to shorter direction Span Steel at Bottom, then provide S_Ast[1]."));

            bnos = (int)(Ly * 1000 / s2);
            tot_weight = bnos * Ly * Tables.Rebars.Get_Rebar_Weight(d2);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Ly,
                Tables.Rebars.Get_Rebar_Weight(d2), tot_weight));
             


            //Design_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Corner Reinforcements (Top & Bottom), "));
            //list.Add(string.Format("Provide 12T @ 150 mm c/c, (Ast = 753.982 Sq. mm.). If this steel is less than "));
            BOQ_Summary.Add(string.Format("Provide {0}T @ {1} mm c/c, (Ast = {2:f3} Sq. mm.)", d4, s4, Ast8));

            bnos = (int)(Ly * 1000 / s4);
            tot_weight = bnos * Ly * Tables.Rebars.Get_Rebar_Weight(d4);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos, Ly,
                Tables.Rebars.Get_Rebar_Weight(d4), tot_weight));


            list.AddRange(BOQ_Summary.ToArray());

            BOQ_Summary.Add(string.Format("------------------------------------------------------------"));
            list.Add(string.Format(""));

            #endregion BOQ Summary



            #region STEP 11 : Bill Of Quantity

            //list.Add(string.Format("STEP 11 : Bill Of Quantity"));
            //list.Add(string.Format("------------------------------"));
            //list.AddRange(BOQ.Get_Text().ToArray());



            //list.Add(string.Format(""));
            //list.Add(string.Format("Structral Member: SLAB"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("SLAB Concrete"));
            //list.Add(string.Format(""));

            ////Ly
            //string beams = string.Format("{0},{1},{2},{3}", beam1, beam2, beam3, beam4);
            //list.Add(string.Format("S.No.      Beam Nos.                           Section       Floor              Slab        Floor         Quantity"));
            //list.Add(string.Format("                                                             Elevation        Thickness     Area        Area x Thickness  "));
            //list.Add(string.Format("                                                                                (mm)        (Sq.m)           (Cu.m)   "));
            //list.Add(string.Format(""));
            ////list.Add(string.Format(" 1. {0,20} {1:f3} {2:f3}  {3:f3}   {4:f3}  {5:f3}  {6:f3}                              3.8                 160              104.0             104.0 x 0.160"));
            //list.Add(string.Format(" 1. {0,20} {1:f3}x{2:f3}  {3:f3}   {4:f3}  {5:f3}  {6:f3}", beams, Ly, Lx, mi.StartNode.Z, D, Lx * Ly, Lx * Ly * D / 1000));
            ////list.Add(string.Format(" 2."));
            //list.Add(string.Format("                                                                      --------------------------------------------"));
            //list.Add(string.Format("                                                                      Total Concrete (Cu.m)"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("SLAB Steel Reinforcement"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("S.No. Bar Mark    Nos.   Dia    Length   Total Weight "));
            //list.Add(string.Format("                         (mm)   (m)      (Ton)"));
            //list.Add(string.Format("1.     SAst1      200     12    3.8      8 x (3.1416 x 0.016 x 0.016 / 4) x 3.8 x 7.9=...."));
            //list.Add(string.Format(""));
            //list.Add(string.Format("2."));
            //list.Add(string.Format("                                                                      ------------------------------------"));
            //list.Add(string.Format("                                                                      Total Steel (M.TON)"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));

            #endregion STEP 8 : Reinforcement for Edge Strip


            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("TABLE 1 : BENDING MOMENT COEFFICIENTS"));
            list.Add(string.Format("------------------------------------"));
            list.AddRange(Tables.Get_File_Bending_Moment_Coefficients().ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("TABLE 2 : SHEAR FORCE COEFFICIENTS"));
            list.Add(string.Format("------------------------------------"));
            list.AddRange(Tables.Get_File_Shear_Force_Coefficients().ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("TABLE 3 : PERMISSIBLE SHEAR STRESS"));
            list.Add(string.Format("------------------------------------"));
            list.AddRange(Tables.Get_File_Permissible_Shear_Stress().ToArray());
            list.Add(string.Format(""));
            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF REPORT        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion

            //rtb_BD_res.Lines = list.ToArray();
            if (Report_File != "")
            {

                //string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "temp");
                //if (!Directory.Exists(tmp_file))
                //    Directory.CreateDirectory(tmp_file);


                //fl_lev = "FLOOR_LEVEL_" + fl_lev.Replace(".", "_");

                //tmp_file = Path.Combine(tmp_file, fl_lev);
                //if (!Directory.Exists(tmp_file))
                //    Directory.CreateDirectory(tmp_file);
                ////tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
                //tmp_file = Path.Combine(tmp_file, "S_" + Beam_Nos.Replace(" ", "_") + ".tmp");
                //return tmp_file;


                //File.WriteAllLines(tmp_file, list.ToArray());

                string fnm = Get_Report_File(Beam_Nos, fl_lev);
                File.WriteAllLines(fnm, list.ToArray());



                fnm = Get_BOQ_File(Beam_Nos, fl_lev);
                File.WriteAllLines(fnm, BOQ_Summary.ToArray());


            }
            if (Report_File != "")
                File.WriteAllLines(Report_File, list.ToArray());
        }

        public string Get_Report_File(string BeamsNos, string fl_lev)
        {

            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            if (fl_lev != "")
            {
                fl_lev = "FLOOR_LEVEL_" + fl_lev.Replace(".", "_");

                tmp_file = Path.Combine(tmp_file, fl_lev);
                if (!Directory.Exists(tmp_file))
                    Directory.CreateDirectory(tmp_file);
            }
            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "S" + BeamsNos.Trim().Replace(" ", "_") + ".TXT");
            //return tmp_file;


            return tmp_file;
        }

        public string Get_BOQ_File(string BeamsNos, string fl_lev)
        {

            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            if (fl_lev != "")
            {
                fl_lev = "FLOOR_LEVEL_" + fl_lev.Replace(".", "_");

                tmp_file = Path.Combine(tmp_file, fl_lev);
                if (!Directory.Exists(tmp_file))
                    Directory.CreateDirectory(tmp_file);
            }

            tmp_file = Path.Combine(tmp_file, "BOQ");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "BOQ_S" + BeamsNos.Trim().Replace(" ", "_") + ".TXT");
            //return tmp_file;


            return tmp_file;
        }

        public string Get_Design_Summary_File(string BeamsNos, string fl_lev)
        {

            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            if (fl_lev != "")
            {
                fl_lev = "FLOOR_LEVEL_" + fl_lev.Replace(".", "_");

                tmp_file = Path.Combine(tmp_file, fl_lev);
                if (!Directory.Exists(tmp_file))
                    Directory.CreateDirectory(tmp_file);
            }

            tmp_file = Path.Combine(tmp_file, "DESIGN_SUMMARY");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "DESIGN_SUMMARY_S" + BeamsNos.Trim().Replace(" ", "_") + ".TXT");
            //return tmp_file;


            return tmp_file;
        }


        public string File_Design_Summary
        {
            get
            {

                string fnm = Get_Report_File(Beam_Nos, "");
                fnm = Path.Combine(Path.GetDirectoryName(fnm), "SLAB_DESIGN_SUMMARY.TXT");

                return fnm;
            }
        }

        public string Get_Type(int case_index)
        {
            List<string> list = new List<string>();
            list.Add(string.Format("Interior Panels"));
            list.Add(string.Format("One Short Edge Discontinuous"));
            list.Add(string.Format("One Long Edge Discontinuous"));
            list.Add(string.Format("Two Adjacent Edges Discontinuous"));
            list.Add(string.Format("Two Short Edges Discontinuous"));
            list.Add(string.Format("Two Long Edges Discontinuous"));
            list.Add(string.Format("Three Edges Discontinuous (One Long Edge Discontinuous)"));
            list.Add(string.Format("Three Edges Discontinuous (One Short Edge Discontinuous)"));
            list.Add(string.Format("Four Edges Discontinuous"));

            if (case_index >= 0 && case_index < 9)
                return list[case_index];

            return "";

        }
    }
    public class SlabConfig
    {
        public MemberIncidenceCollection Side_A { get; set; }
        public MemberIncidenceCollection Side_B { get; set; }
        public MemberIncidenceCollection Side_C { get; set; }
        public MemberIncidenceCollection Side_D { get; set; }

        public SlabConfig()
        {
            Side_A = new MemberIncidenceCollection();
            Side_B = new MemberIncidenceCollection();
            Side_C = new MemberIncidenceCollection();
            Side_D = new MemberIncidenceCollection();
        }
        public void Set_Members(string BeamsNos, ASTRADoc AST_Doc)
        {

            MyStrings mlist = new MyStrings(BeamsNos.Trim(), ' ');

            int m = 0;


            MemberIncidenceCollection mic = new MemberIncidenceCollection();
            MemberIncidence mi = new MemberIncidence();
            int i = 0;
            for (i = 0; i < mlist.Count; i++)
            {
                m = mlist.GetInt(i);
                mi = AST_Doc.Members.Get_Member(m);
                mic.Add(mi);
            }



            int side = 0;
            for (i = 0; i < mic.Count; i++)
            {

                mi = mic[i];
                if (i == 0)
                {
                    side = 1;
                }
                else
                {
                    if (mic[i].Direction != mic[i - 1].Direction)
                    {
                        side++;
                    }
                }

                if (side == 1)
                {
                    Side_A.Add(mi);
                }
                else if (side == 2)
                {
                    Side_B.Add(mi);
                }
                else if (side == 3)
                {
                    Side_C.Add(mi);
                }
                else if (side == 4)
                {
                    Side_D.Add(mi);
                }

            }
        }

        public double Length_A
        {
            get
            {
                double l = 0.0;
                try
                {
                    foreach (var item in Side_A)
                    {
                        l += item.Length;
                    }
                }
                catch (Exception ex) { }
                return l;
            }
        }

        public double Length_B
        {
            get
            {
                double l = 0.0;
                try
                {
                    foreach (var item in Side_B)
                    {
                        l += item.Length;
                    }
                }
                catch (Exception ex) { }
                return l;
            }
        }

        public double Length_C
        {
            get
            {
                double l = 0.0;
                try
                {
                    foreach (var item in Side_C)
                    {
                        l += item.Length;
                    }
                }
                catch (Exception ex) { }
                return l;
            }
        }
        public double Length_D
        {
            get
            {
                double l = 0.0;
                try
                {
                    foreach (var item in Side_D)
                    {
                        l += item.Length;
                    }
                }
                catch (Exception ex) { }
                return l;
            }
        }



        public MemberIncidenceCollection Get_All_Members()
        {
            MemberIncidenceCollection mic = new MemberIncidenceCollection();
            try
            {
                foreach (var item in Side_A)
                {
                    mic.Add(item);
                }
                foreach (var item in Side_B)
                {
                    mic.Add(item);
                }
                foreach (var item in Side_C)
                {
                    mic.Add(item);
                }
                foreach (var item in Side_D)
                {
                    mic.Add(item);
                }
            }
            catch (Exception ex) { }
            return mic;
        }

    }

    public class BeamDesign
    {

        //ASTRADoc AST_Doc { get; set; }

        StructureMemberAnalysis StructureAnalysis { get; set; }

        public List<BeamData> All_Beam_Data { get; set; }

        public ASTRADoc AST_DOC { get; set; }

        public string Beam_Nos { get; set; }
        public string Beam_Title { get; set; }
        public Beam_BOQ BOQ { get; set; }

        public List<string> Design_Summary { get; set; }
        public List<string> BOQ_Summary = new List<string>();


        public BeamDesign(StructureMemberAnalysis StructureAnalysis)
        {
            Report_File = "";

            this.StructureAnalysis = StructureAnalysis;

            Design_Summary = new List<string>();
        }

        public BeamDesign()
        {
            Report_File = "";
            Design_Summary = new List<string>();
        }

        public eDesignStandard DesignStandard { get; set; }

        public string Report_File { get; set; }

        public double B;
        public double W_DL1, W_LL1, fck, fy;
        public double Bar_dia1, Bar_dia2, Bar_dia3, Bar_dia4, Bar_dia5, Bar_dia6;

        public double LL_Fact, DL_Fact;

        public bool IS_DESIGN_OK { get; set; }

        public double cover;
        public double Shear_Bar_dia;
        public double D, bw, df, gamma_c, tw, tp, hw, gamma_bw, face_wall;


        public double AM1 = 0.0;
        public double AM2 = 0.0;
        public double AM3 = 0.0;
        public double AM4 = 0.0;
        public double AV1 = 0.0;
        public double AV2 = 0.0;
        public double AV3 = 0.0;

        public double L { get; set; }
        public double Lx1 { get; set; }
        public double Lx2 { get; set; }
        public double Ly1 { get; set; }
        public double Ly2 { get; set; }


        public void Get_Continuous_Beams(ref JointCoordinateCollection cont_jcc,
            ref MemberIncidenceCollection mbr_coll, ref DirecctionCollection dc1)
        {

            MemberIncidence b1 = AST_DOC.Members.Get_Member(MyList.StringToInt(Beam_Nos, 0));

            if (b1 == null) return;

            List<MemberIncidence> list = new List<MemberIncidence>();


            JointCoordinateCollection jcc = new JointCoordinateCollection();

            //JointCoordinateCollection cont_jcc = new JointCoordinateCollection();

            jcc.Add(b1.StartNode);
            jcc.Add(b1.EndNode);


            List<bool> flags = new List<bool>();



            MemberIncidenceCollection mic1 = new MemberIncidenceCollection();
            MemberIncidenceCollection mic2 = new MemberIncidenceCollection();
            //MemberIncidenceCollection mic3 = new MemberIncidenceCollection();
            MemberIncidenceCollection mic4 = new MemberIncidenceCollection();




            foreach (var item in AST_DOC.Members)
            {
                if (item.EndNode.NodeNo == jcc[0].NodeNo || item.StartNode.NodeNo == jcc[0].NodeNo)
                    mic1.Add(item);
                if (item.EndNode.NodeNo == jcc[1].NodeNo || item.StartNode.NodeNo == jcc[1].NodeNo)
                    mic2.Add(item);
            }


            if (jcc[0].NodeNo < jcc[1].NodeNo)
            {
                if (!cont_jcc.Contains(jcc[1]))
                {
                    cont_jcc.Add(jcc[1]);
                }
            }
            cont_jcc.Add(jcc[0]);

            mbr_coll.Add(b1);

            for (int i = 0; i < AST_DOC.Members.Count; i++)
            {
                foreach (var item in AST_DOC.Members)
                {
                    if (b1.Direction == item.Direction)
                    {
                        if (item.StartNode.NodeNo == cont_jcc[cont_jcc.Count - 1].NodeNo)
                        {
                            if (!cont_jcc.Contains(item.EndNode))
                            {
                                mbr_coll.Add(item);
                                cont_jcc.Add(item.EndNode);
                                i = 0; break;
                            }
                        }
                        else if (item.EndNode.NodeNo == cont_jcc[cont_jcc.Count - 1].NodeNo)
                        {
                            if (!cont_jcc.Contains(item.StartNode))
                            {
                                mbr_coll.Add(item);
                                cont_jcc.Add(item.StartNode);
                                i = 0; break;
                            }
                        }
                    }
                }
            }

            List<MemberIncidenceCollection> list_mic = new List<MemberIncidenceCollection>();


            for (int i = 0; i < cont_jcc.Count; i++)
            {
                mic4 = new MemberIncidenceCollection();
                foreach (var item in AST_DOC.Members)
                {
                    if (item.EndNode.NodeNo == cont_jcc[i].NodeNo ||
                        item.StartNode.NodeNo == cont_jcc[i].NodeNo)
                        mic4.Add(item);
                }
                list_mic.Add(mic4);
            }



            //DirecctionCollection dc1 = new DirecctionCollection();

            Axis_Direction ad = new Axis_Direction();
            int index = 0;

            for (index = 0; index < cont_jcc.Count; index++)
            {
                ad = new Axis_Direction();

                var mcc = list_mic[index];
                foreach (var item in mcc)
                {
                    JointCoordinate jc = item.StartNode;
                    if (item.StartNode.NodeNo == cont_jcc[index].NodeNo)
                    {
                        jc = item.EndNode;
                    }
                    ad.JointNo = cont_jcc[index].NodeNo;
                    if ((cont_jcc[index].Point.x < jc.Point.x))
                    {
                        ad.X_Positive_Member = item;
                        ad.X_Positive = true;
                    }
                    if ((cont_jcc[index].Point.x > jc.Point.x))
                    {
                        ad.X_Negative = true;
                        ad.X_Negative_Member = item;
                    }
                    if ((cont_jcc[index].Point.y < jc.Point.y))
                    {
                        ad.Y_Positive_Member = item;
                        ad.Y_Positive = true;
                    }
                    if ((cont_jcc[index].Point.y > jc.Point.y))
                    {
                        ad.Y_Negative_Member = item;
                        ad.Y_Negative = true;
                    }
                    if ((cont_jcc[index].Point.z < jc.Point.z))
                    {
                        ad.Z_Positive_Member = item;
                        ad.Z_Positive = true;
                    }
                    if ((cont_jcc[index].Point.z > jc.Point.z))
                    {

                        ad.Z_Negative_Member = item;
                        ad.Z_Negative = true;
                    }
                }
                dc1.Add(ad);
            }
        }

        public List<int> Get_Continuous_Beams(MemberIncidence b1)
        {

            JointCoordinateCollection cont_jcc = new JointCoordinateCollection();
            MemberIncidenceCollection mbr_coll = new MemberIncidenceCollection();

            if (b1 == null) return new List<int>();

            List<MemberIncidence> list = new List<MemberIncidence>();


            JointCoordinateCollection jcc = new JointCoordinateCollection();


            jcc.Add(b1.StartNode);
            jcc.Add(b1.EndNode);


            MemberIncidenceCollection mic1 = new MemberIncidenceCollection();
            MemberIncidenceCollection mic2 = new MemberIncidenceCollection();
            //MemberIncidenceCollection mic3 = new MemberIncidenceCollection();
            MemberIncidenceCollection mic4 = new MemberIncidenceCollection();


            foreach (var item in AST_DOC.Members)
            {
                if (item.EndNode.NodeNo == jcc[0].NodeNo || item.StartNode.NodeNo == jcc[0].NodeNo)
                    mic1.Add(item);
                if (item.EndNode.NodeNo == jcc[1].NodeNo || item.StartNode.NodeNo == jcc[1].NodeNo)
                    mic2.Add(item);
            }




            //if (jcc[0].NodeNo < jcc[1].NodeNo)
            //{
            //    if (!cont_jcc.Contains(jcc[1]))
            //    {
            //        cont_jcc.Add(jcc[1]);
            //    }
            //}
            cont_jcc.Add(jcc[0]);
            cont_jcc.Add(jcc[1]);

            int flag = 0;



            mbr_coll.Add(b1);
            while (flag <= 1)
            {
                for (int i = 0; i < AST_DOC.Members.Count; i++)
                {
                    foreach (var item in AST_DOC.Members)
                    {
                        if (b1.Direction == item.Direction)
                        {
                            if (item.StartNode.NodeNo == cont_jcc[cont_jcc.Count - 1].NodeNo)
                            {
                                if (!cont_jcc.Contains(item.EndNode))
                                {
                                    mbr_coll.Add(item);
                                    cont_jcc.Add(item.EndNode);
                                    i = 0; break;
                                }
                            }
                            if (item.EndNode.NodeNo == cont_jcc[cont_jcc.Count - 1].NodeNo)
                            {
                                if (!cont_jcc.Contains(item.StartNode))
                                {
                                    mbr_coll.Add(item);
                                    cont_jcc.Add(item.StartNode);
                                    i = 0; break;
                                }
                            }
                        }
                    }
                }

                if (mbr_coll.Count == 1)
                {
                    cont_jcc.Clear();
                    cont_jcc.Add(jcc[1]);
                    cont_jcc.Add(jcc[0]);
                }
                else
                    break;
                flag++;
            }



            List<int> mls = new List<int>();

            foreach (var item in mbr_coll)
            {
                mls.Add(item.MemberNo);
            }

            return mls;
        }

        public List<int> Get_Continuous_Beams(MemberIncidence b1,
            ref JointCoordinateCollection cont_jcc,
            ref MemberIncidenceCollection mbr_coll,
            ref DirecctionCollection dc1)
        {

            //JointCoordinateCollection cont_jcc = new JointCoordinateCollection();
            //MemberIncidenceCollection mbr_coll = new MemberIncidenceCollection();

            if (b1 == null) return new List<int>();

            List<MemberIncidence> list = new List<MemberIncidence>();


            JointCoordinateCollection jcc = new JointCoordinateCollection();


            jcc.Add(b1.StartNode);
            jcc.Add(b1.EndNode);


            MemberIncidenceCollection mic1 = new MemberIncidenceCollection();
            MemberIncidenceCollection mic2 = new MemberIncidenceCollection();
            //MemberIncidenceCollection mic3 = new MemberIncidenceCollection();
            MemberIncidenceCollection mic4 = new MemberIncidenceCollection();


            foreach (var item in AST_DOC.Members)
            {
                if (item.EndNode.NodeNo == jcc[0].NodeNo || item.StartNode.NodeNo == jcc[0].NodeNo)
                    mic1.Add(item);
                if (item.EndNode.NodeNo == jcc[1].NodeNo || item.StartNode.NodeNo == jcc[1].NodeNo)
                    mic2.Add(item);
            }


            cont_jcc.Add(jcc[0]);
            cont_jcc.Add(jcc[1]);

            int flag = 0;



            mbr_coll.Add(b1);
            while (flag <= 1)
            {
                for (int i = 0; i < AST_DOC.Members.Count; i++)
                {
                    foreach (var item in AST_DOC.Members)
                    {
                        if (b1.Direction == item.Direction)
                        {
                            if (item.StartNode.NodeNo == cont_jcc[cont_jcc.Count - 1].NodeNo)
                            {
                                if (!cont_jcc.Contains(item.EndNode))
                                {
                                    if (!mbr_coll.Contains(item))
                                        mbr_coll.Add(item);
                                    cont_jcc.Add(item.EndNode);
                                    i = 0; break;
                                }
                            }
                            if (item.EndNode.NodeNo == cont_jcc[cont_jcc.Count - 1].NodeNo)
                            {
                                if (!cont_jcc.Contains(item.StartNode))
                                {
                                    if (!mbr_coll.Contains(item))
                                        mbr_coll.Add(item);
                                    cont_jcc.Add(item.StartNode);
                                    i = 0; break;
                                }
                            }
                        }
                    }
                }

                if (mbr_coll.Count == 1)
                {
                    cont_jcc.Clear();
                    cont_jcc.Add(jcc[1]);
                    cont_jcc.Add(jcc[0]);
                }
                else
                    break;
                flag++;
            }


            List<MemberIncidenceCollection> list_mic = new List<MemberIncidenceCollection>();


            for (int i = 0; i < cont_jcc.Count; i++)
            {
                mic4 = new MemberIncidenceCollection();
                foreach (var item in AST_DOC.Members)
                {
                    if (item.EndNode.NodeNo == cont_jcc[i].NodeNo ||
                        item.StartNode.NodeNo == cont_jcc[i].NodeNo)
                        mic4.Add(item);
                }
                list_mic.Add(mic4);
            }


            Axis_Direction ad = new Axis_Direction();
            int index = 0;

            for (index = 0; index < cont_jcc.Count; index++)
            {
                ad = new Axis_Direction();

                var mcc = list_mic[index];
                foreach (var item in mcc)
                {
                    JointCoordinate jc = item.StartNode;
                    if (item.StartNode.NodeNo == cont_jcc[index].NodeNo)
                    {
                        jc = item.EndNode;
                    }
                    ad.JointNo = cont_jcc[index].NodeNo;
                    if ((cont_jcc[index].Point.x < jc.Point.x))
                    {
                        ad.X_Positive_Member = item;
                        ad.X_Positive = true;
                    }
                    if ((cont_jcc[index].Point.x > jc.Point.x))
                    {
                        ad.X_Negative = true;
                        ad.X_Negative_Member = item;
                    }
                    if ((cont_jcc[index].Point.y < jc.Point.y))
                    {
                        ad.Y_Positive_Member = item;
                        ad.Y_Positive = true;
                    }
                    if ((cont_jcc[index].Point.y > jc.Point.y))
                    {
                        ad.Y_Negative_Member = item;
                        ad.Y_Negative = true;
                    }
                    if ((cont_jcc[index].Point.z < jc.Point.z))
                    {
                        ad.Z_Positive_Member = item;
                        ad.Z_Positive = true;
                    }
                    if ((cont_jcc[index].Point.z > jc.Point.z))
                    {

                        ad.Z_Negative_Member = item;
                        ad.Z_Negative = true;
                    }
                }
                dc1.Add(ad);
            }

            List<int> mls = new List<int>();

            foreach (var item in mbr_coll)
            {
                mls.Add(item.MemberNo);
            }

            return mls;
        }


        public void Calculate_Program()
        {
            List<string> list = new List<string>();


            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*       DESIGN OF RCC FLANGED BEAM           *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");

            #endregion

            //StructureAnalysis.Get


            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //list.Add(string.Format("DESIGN REPORT FOR THE DESIGN OF RCC FLANGED BEAM"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(Design Standard:        BS 8110 / IS 456)"));
            list.Add(string.Format(""));
            list.Add(string.Format("Design Data From Structure Model:"));
            list.Add(string.Format(""));

            List<int> beam_nos = MyList.Get_Array_Intiger(Beam_Nos);

            List<MovingLoadAnalysis.Member> beams = new List<MovingLoadAnalysis.Member>();

            list.Add(string.Format("Details of Beam To Be Designed"));
            list.Add(string.Format(""));
            //Get_Continuous_Beams();

            JointCoordinateCollection cont_jcc = new JointCoordinateCollection();
            MemberIncidenceCollection mbr_coll = new MemberIncidenceCollection();
            DirecctionCollection dc1 = new DirecctionCollection();

            Get_Continuous_Beams(ref cont_jcc, ref mbr_coll, ref dc1);


            list.Add(string.Format(""));
            //list.Add(string.Format("EACH MEMBER AND ITS JOINTS: "));
            list.Add(string.Format(""));
            //list.Add(string.Format("B1          J1(x,y,z)          J2(x,y,z)         Length = 4.2 m.   Assoc.        Slab widths = lx = 2.2 and 4.2 m."));
            //list.Add(string.Format("B2          J2(x,y,z)          J3(x,y,z)         Length = **** m.  Assoc.        Slab widths = lx = **** and **** m."));
            //list.Add(string.Format("B3          J3(x,y,z)          J4(x,y,z)         Length = **** m.  Assoc.        Slab widths = lx = **** and **** m."));
            //list.Add(string.Format("B4          J4(x,y,z)          J5(x,y,z)         Length = **** m.  Assoc.        Slab widths = lx = **** and **** m."));
            //list.Add(string.Format("B5          J5(x,y,z)          J6(x,y,z)         Length = **** m.  Assoc.        Slab widths = lx = **** and **** m."));
            //list.Add(string.Format("B6          J6(x,y,z)          J7(x,y,z)         Length = **** m.  Assoc.        Slab widths = lx = **** and **** m."));
            list.Add(string.Format(""));



            string kStr = "";
            int c = 1;

            double Ly = 0.0;
            double Lx = 0.0;

            MovingLoadAnalysis.Member mbr = null;
            list.Add(string.Format("EACH MEMBER AND ITS JOINTS : "));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));

            List<int> lst_jnts = new List<int>();
            //List<double> max_moments
            //foreach (var item in mbr_coll)
            //{
            //    //mbr = StructureAnalysis.Analysis.Members.GetMember(item);
            //    //mbr = StructureAnalysis.Analysis.Members.GetMember(item);
            //    beams.Add(mbr);
            //    //kStr += " B" + () + " ,";

            //    list.Add(string.Format("B{0}   J{1} ({2:f3},{3:f3},{4:f3})    J{5}({6:f3},{7:f3},{8:f3})   Length = {9:f3} m. ", c, c,
            //        mbr.StartNode.X, mbr.StartNode.Y, mbr.StartNode.Z, 
            //        c + 1, mbr.EndNode.X, mbr.EndNode.Y, mbr.EndNode.Z, mbr.Length));
            //    c++;

            //    if (Ly < mbr.Length)
            //        Ly = mbr.Length;

            //    if (!lst_jnts.Contains(mbr.StartNode.NodeNo))
            //        lst_jnts.Add(mbr.StartNode.NodeNo);
            //    if (!lst_jnts.Contains(mbr.EndNode.NodeNo))
            //        lst_jnts.Add(mbr.EndNode.NodeNo);

            //}

            //foreach (var item in mbr_coll)
            //{
            //    list.Add(string.Format("B{0}   J{1} ({2:f3},{3:f3},{4:f3})    J{5}({6:f3},{7:f3},{8:f3})   Length = {9:f3} m. ", c, c,
            //        item.StartNode.X, item.StartNode.Y, item.StartNode.Z,
            //        c + 1, item.EndNode.X, item.EndNode.Y, item.EndNode.Z, item.Length));
            //    c++;

            //    if (Ly < item.Length)
            //        Ly = item.Length;

            //    if (!lst_jnts.Contains(item.StartNode.NodeNo))
            //        lst_jnts.Add(item.StartNode.NodeNo);
            //    if (!lst_jnts.Contains(item.EndNode.NodeNo))
            //        lst_jnts.Add(item.EndNode.NodeNo);

            //}

            double _l1, _l2;
            //c = 0;
            foreach (var item in mbr_coll)
            {
                _l1 = 0;
                _l2 = 0;
                if (dc1[c - 1].Lx_Member != null)
                {
                    _l1 = dc1[c - 1].Lx_Member.Length;

                }
                if (dc1[c].Lx_Member != null)
                {
                    if (_l1 < dc1[c].Lx_Member.Length)
                        _l1 = dc1[c].Lx_Member.Length;
                }
                if (dc1[c - 1].Lz_Member != null)
                {
                    _l2 = dc1[c - 1].Lz_Member.Length;
                }
                if (dc1[c].Lz_Member != null)
                {
                    if (_l2 < dc1[c].Lz_Member.Length)
                        _l2 = dc1[c].Lz_Member.Length;
                }

                list.Add(string.Format("B{0}   J{1} ({2:f3},{3:f3},{4:f3})    J{5}({6:f3},{7:f3},{8:f3})   Length = {9:f3} m.  Assoc.  Slab widths = lx = {10:f3} and {11:f3} m.", c, c,
                    item.StartNode.X, item.StartNode.Y, item.StartNode.Z,
                    c + 1, item.EndNode.X, item.EndNode.Y, item.EndNode.Z, item.Length, _l1, _l2));
                c++;

                //if (Ly < item.Length)
                //    Ly = item.Length;

                if (Lx < _l1)
                    Lx = _l1;
                if (Ly < _l2)
                    Ly = _l2;

                //if (!lst_jnts.Contains(item.StartNode.NodeNo))
                //    lst_jnts.Add(item.StartNode.NodeNo);
                //if (!lst_jnts.Contains(item.EndNode.NodeNo))
                //    lst_jnts.Add(item.EndNode.NodeNo);

            }





            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            //Lx = Ly;

            double l = Ly;
            double b = Lx;


            //StructureAnalysis.GetJoint_MomentForce


            List<int> inner_support = new List<int>();
            List<int> end_support = new List<int>();
            List<int> pen_ultimate = new List<int>();

            foreach (var item in cont_jcc)
            {
                lst_jnts.Add(item.NodeNo);
            }


            if (lst_jnts.Count > 2)
            {
                end_support.Add(lst_jnts[0]);
                end_support.Add(lst_jnts[lst_jnts.Count - 1]);

                lst_jnts.RemoveAt(0);
                lst_jnts.RemoveAt(lst_jnts.Count - 1);
                inner_support.AddRange(lst_jnts);

                pen_ultimate.Add(lst_jnts[0]);
                pen_ultimate.Add(lst_jnts[lst_jnts.Count - 1]);

            }
            else
            {
                inner_support.AddRange(lst_jnts);
                end_support.AddRange(lst_jnts);
            }




            List<double> max_moment = new List<double>();
            List<double> pen_ult_max_moment = new List<double>();



            double mnt = StructureAnalysis.GetJoint_Negative_Moment(end_support);

            mnt = StructureAnalysis.GetJoint_Positive_Moment(end_support);
            max_moment.Add(mnt);


            mnt = StructureAnalysis.GetJoint_Negative_Moment(end_support);
            max_moment.Add(mnt);



            mnt = StructureAnalysis.GetJoint_Negative_Moment(inner_support);
            max_moment.Add(mnt);


            mnt = StructureAnalysis.GetJoint_Positive_Moment(inner_support);
            max_moment.Add(mnt);



            mnt = StructureAnalysis.GetJoint_Negative_Moment(pen_ultimate);
            pen_ult_max_moment.Add(mnt);

            mnt = StructureAnalysis.GetJoint_Positive_Moment(pen_ultimate);
            pen_ult_max_moment.Add(mnt);




            //list.Add(string.Format("Longest Span Segment of Beam = l = 4.2 m"));
            //list.Add(string.Format("Width of Floor Slab on one side of this Segment of Beam = lx = 2.2 m, ly = l = 4.2 m"));
            //list.Add(string.Format("Width of Floor Slab on other side of this Segment of Beam = lx = 4.2 m, ly = l = 4.2 m"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("From Analysis Results obtained the Maximum +ve & -ve values Bending Moments:"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Maximum +ve Bending Moment at End Supports = Mu1 = 143.714 KNm  (Member B1 & B6 and Joints J1 and J7)"));
            //list.Add(string.Format("Maximum -ve Bending Moment at End Supports = Mu  = -188.72  KNm  (Member B1 & B6 and Joints J1 and J7)"));
            //list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -239.35 KNm   (Members B1 to B6 and Joints J2 to J6)"));
            //list.Add(string.Format("Maximum + ve Bending Moment at Inner Supports = Mu = 93.09   KNm   (Members B1 to B6 and Joints J2 to J6)"));
            //list.Add(string.Format(""));



            list.Add(string.Format("Longest Span Segment of Beam = l = {0:f3} m", l));
            //list.Add(string.Format("Width of Floor Slab on one side of this Segment of Beam = lx = 2.2 m, ly = l = 4.2 m"));
            list.Add(string.Format("Width of Floor Slab on other side of this Segment of Beam = lx = {0:f3} m, ly = l = {1:f3} m", Lx, Ly));
            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results obtained the Maximum +ve & -ve values Bending Moments:"));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum +ve Bending Moment at End Supports = Mu1 = {0:f3} KN-m", max_moment[0]));
            list.Add(string.Format("Maximum -ve Bending Moment at End Supports = Mu  = -{0:f3}  KN-m", max_moment[1]));
            list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -{0:f3} KN-m", max_moment[2]));
            list.Add(string.Format("Maximum + ve Bending Moment at Inner Supports = Mu = {0:f3}   KN-m", max_moment[3]));
            list.Add(string.Format(""));

            #region   User’s Data:

            //double W_DL1, W_LL1, fck, fy;
            //double Bar_dia1, Bar_dia2, Bar_dia3, Bar_dia4;
            //double cover;
            //double Shear_Bar_dia;
            //double D, bw, df, gamma_c, tw, tp, hw, gamma_bw, fact_wall;


            //W_DL1 = 5.62;
            //W_LL1 = 4.00;
            //fck = 20;
            //fy = 415;

            //Bar_dia1 = 16;
            //Bar_dia2 = 20;
            //Bar_dia3 = 25;
            //Bar_dia4 = 22;

            //cover = 25;
            //Shear_Bar_dia = 8;

            //D = 500;
            //bw = 250;
            //df = 130;
            //gamma_bw = 25.0;
            //tw = 125;
            //tp = 12.5;
            //hw = 3.4;
            //gamma_c = 25.0;
            //gamma_bw = 19.2;
            //fact_wall = 0.8;


            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("USER’S DATA"));
            list.Add(string.Format("------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Dead/Fixed Load on Floor Slab on one side of Beam = W_DL1 = {0} KN/Sq.m.", W_DL1));
            list.Add(string.Format("Live Load on Floor Slab on one side of Beam = W_LL1 = {0} KN/Sq.m.", W_LL1));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement"));
            list.Add(string.Format("Reinforcement Bar diameter = Bar_dia = {0}mm, {1}mm, {2}mm", Bar_dia1, Bar_dia2, Bar_dia3));
            list.Add(string.Format("Reinforcement Cover = cover = {0}mm", cover));
            list.Add(string.Format(""));
            list.Add(string.Format("Shear Reinforcement"));
            list.Add(string.Format("Reinforcement Bar diameter = Shear_Bar_dia = {0}mm,", Shear_Bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall Depth of Beam = D = {0} mm", D));
            //list.Add(string.Format("Width of Beam Web = bw = 250mm"));
            list.Add(string.Format("Width of Beam Web = bw = {0}mm", bw));
            list.Add(string.Format("Depth of Beam Flange (Thickness of Floor Slab) = df = {0}mm", df));
            list.Add(string.Format("Unit weight of Concrete = ɣc = {0} KN/Cum", gamma_c));
            list.Add(string.Format(""));
            list.Add(string.Format("Wall Thickness = tw = {0}mm", tw));
            list.Add(string.Format("Plaster Thickness = tp = {0} mm", tp));
            list.Add(string.Format("Height of Wall = hw = {0} m", hw));
            list.Add(string.Format("Unit weight of Wall =  ɣbw = {0} KN/Cum", gamma_bw));
            list.Add(string.Format("Weight reduction factor for Doors & Windows = fact_wall = {0}", face_wall));
            list.Add(string.Format(""));
            #endregion   User’s Data:

            #region STEP 1 : LOAD CALCULATIONS




            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------"));
            list.Add(string.Format("STEP 1 : LOAD CALCULATIONS"));
            list.Add(string.Format("--------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Longest Span Segment of Beam = l = {0:f3} m", l));
            list.Add(string.Format(""));
            list.Add(string.Format("Dead Load Calculations"));
            list.Add(string.Format("------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("For Slab on One Side of Longest Span of Beam"));
            list.Add(string.Format("---------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Width of Floor Slab on one side of Beam = {0:f3} m", b));
            list.Add(string.Format("Dead/Fixed Load on Floor Slab on one side of Beam = W_DL1 = {0} KN/Sq.m.", W_DL1));
            list.Add(string.Format("Live Load on Floor Slab on one side of Beam = W_LL1 = {0} KN/Sq.m.", W_LL1));
            list.Add(string.Format(""));
            list.Add(string.Format("Effective dimensions of Slab on one side of Beam = {0:f3}m x {1:f3}m", l, b));
            list.Add(string.Format("lx = {0:f3}m, ly = {1:f3}m", Lx, Ly));
            if (Ly > Lx)
                list.Add(string.Format("If        ly > lx         Then Effective Area of Slab is Trapezoidal."));
            else
                list.Add(string.Format("If        ly <= lx         Then Effective Area of Floor Slab is Triangular."));


            double dl_alpha = Lx / (2 * Ly);

            list.Add(string.Format("For Dead Load α = lx / (2 x ly) = {0:f3} / (2 x {1:f3}) = {2:f3}", Lx, Ly, dl_alpha));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double DL_EUDL_BM1 = W_DL1 * Lx * (3.0 - 4.0 * dl_alpha * dl_alpha) / 6.0;

            list.Add(string.Format("DL_EUDL_BM1 = Equivalent Uniformly Distributed Load for Bending Moment"));
            list.Add(string.Format("                = W_DL1 x lx x (3 - 4 x α^2) / 6"));
            list.Add(string.Format("                = {0:f3} x {1:f3} x (3 - 4 x {2:f3}^2) / 6", W_DL1, Lx, dl_alpha));
            list.Add(string.Format("                = {0:f3} kN/m", DL_EUDL_BM1));
            list.Add(string.Format(""));

            double DL_Total_Load1 = W_DL1 * Lx * Ly * (1 - dl_alpha) / 2.0;

            list.Add(string.Format("DL_Total_Load1 = W_DL1 x lx x ly x (1 - α) / 2"));
            list.Add(string.Format("                  = {0:f3} x {1:f3} x {2:f3} x (1 - {3:f3}) / 2", W_DL1, Lx, Ly, dl_alpha));
            list.Add(string.Format("                  = {0:f3} kN", DL_Total_Load1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("For Slab on Other Side of Longest Span of Beam"));
            list.Add(string.Format("-----------------------------------------------"));
            list.Add(string.Format(""));

            list.Add(string.Format("Width of Floor Slab on other side of Beam = {0} m", l));

            double W_DL2 = W_DL1;
            double W_LL2 = W_LL1;


            list.Add(string.Format("Dead/Fixed Load on Floor Slab on other side of Beam = W_DL2 = {0} KN/Sq.m.", W_DL2));
            list.Add(string.Format("Live Load on Floor Slab on one side of Beam = W_LL2 = {0} KN/Sq.m.", W_LL2));
            list.Add(string.Format(""));



            ////Lx = 4.2;
            ////Ly = 4.2;

            list.Add(string.Format("Effective dimensions of Slab on other side of Beam = {0:f3}m x {1:f3}2m", Ly, Lx));
            list.Add(string.Format("Lx = {0:f3}m, ly = {0:f3}m", Lx, Ly));

            if (Ly <= Lx)
                list.Add(string.Format("If    ly <= lx    Then Effective Area of Floor Slab is Triangular."));
            else
                list.Add(string.Format("If        ly > lx         Then Effective Area of Slab is Trapezoidal."));

            list.Add(string.Format(""));

            double DL_EUDL_BM2 = W_DL2 * Lx / 3.0;

            list.Add(string.Format("DL_EUDL_BM2 = Equivalent Uniformly Distributed Load for Bending Moment"));
            list.Add(string.Format("                = W_DL2 x lx / 3 "));
            list.Add(string.Format("                = {0:f3} x {1:f3} / 3 ", W_DL2, Lx));
            list.Add(string.Format("                = {0:f3} kN/m", DL_EUDL_BM2));
            list.Add(string.Format(""));

            double DL_Total_Load2 = W_DL2 * Lx * Lx / 4.0;
            list.Add(string.Format("DL_ Total _Load2 = W_DL2 x lx^2 / 4"));
            list.Add(string.Format("                 = {0:f3} x {1:f3}^2 / 4", W_DL2, Lx));
            list.Add(string.Format("                 = {0:f3} kN", DL_Total_Load2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("For Live Load Calculations"));
            list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));

            double EUDL_LL = (DL_EUDL_BM1 + DL_EUDL_BM2) * W_LL1 / W_DL1;


            list.Add(string.Format("EUDL_LL = Equivalent Uniformly Distributed Load for Bending Moment"));
            list.Add(string.Format("              = (DL_EUDL_BM1 + DL_EUDL_BM2 ) x W_LL1 / W_DL1"));
            list.Add(string.Format("              = ({0:f3} + {1:f3}) x {2:f3} / {3:f3}", DL_EUDL_BM1, DL_EUDL_BM2, W_LL1, W_DL1));
            list.Add(string.Format("              = {0:f3} kN", EUDL_LL));
            list.Add(string.Format(""));

            double Total_Load_LL = (DL_Total_Load1 + DL_Total_Load2) * W_LL1 / W_DL1;

            list.Add(string.Format("Total_Load_LL = (DL_Total_Load1 + DL_Total_Load2) x W_LL1 / W_DL1"));
            list.Add(string.Format("              = ({0:f3} + {1:f3}) x {2:f3} / {3:f3}", DL_Total_Load1, DL_Total_Load2, W_LL1, W_DL1));
            list.Add(string.Format("              = {0:f3} kN", Total_Load_LL));
            list.Add(string.Format(""));
            list.Add(string.Format("Width of Beam Web = bw = {0}mm", bw));
            list.Add(string.Format("Depth of Beam Flange = Thickness of Slab = df = {0}mm", df));
            list.Add(string.Format("Unit weight of Concrete = ɣc = {0} kN/Cum", gamma_c));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(i) Dead Load"));
            list.Add(string.Format("--------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Left Weight of Beam"));
            list.Add(string.Format("Width of Beam Web = bw = {0}mm", bw));

            double dw = D - df;
            list.Add(string.Format("Depth of Beam Web = dw = Overall Depth - Thickness of Slab"));
            list.Add(string.Format("                                = D - df"));
            list.Add(string.Format("                                = {0} - {1}", D, df));
            list.Add(string.Format("                                = {0}mm", dw));
            list.Add(string.Format(""));

            double SELF_WEIGHT = bw / 1000.0 * dw / 1000.0 * gamma_c;
            list.Add(string.Format("Self Weight of Beam = SELF_WEIGHT = bw x dw x ɣc "));
            list.Add(string.Format("                                  = {0:f3} x {1:f3} x {2}", bw / 1000, dw / 1000, gamma_c));
            list.Add(string.Format("                                  = {0:f3} kN/m", SELF_WEIGHT));
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) Wall Load"));
            list.Add(string.Format("----------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Wall Thickness = tw = {0}mm", tw));
            list.Add(string.Format("Plaster Thickness = tp = {0} mm", tp));
            list.Add(string.Format("Height of Wall = hw = {0} m", hw));
            list.Add(string.Format("Unit weight of Wall =  ɣbw = {0} kN/Cu.m", gamma_bw));
            list.Add(string.Format("Weight reduction factor for Doors & Windows = fact_wall = {0}", face_wall));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Wall Load"));
            list.Add(string.Format(""));
            list.Add(string.Format("= WALL_WEIGHT "));


            double WALL_WEIGHT = ((tw + 2 * tp) / 1000) * hw * gamma_bw * face_wall;
            list.Add(string.Format("= ((tw+2xtp)/1000) x hw x ɣbw x fact_wall"));
            list.Add(string.Format("= (({0}+2x{1})/1000) x {2} x {3} x {4}", tw, tp, hw, gamma_bw, face_wall));
            list.Add(string.Format("= {0:f3} kN/m", WALL_WEIGHT));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iii) Total EUDL for Dead Load = EUDL_DL"));
            list.Add(string.Format(""));

            double EUDL_DL = DL_EUDL_BM1 + DL_EUDL_BM2 + SELF_WEIGHT + WALL_WEIGHT;
            list.Add(string.Format("= DL_EUDL_BM1 + DL_EUDL_BM2 + SELF_WEIGHT + WALL_WEIGHT"));
            list.Add(string.Format("= {0:f3} + {1:f3} + {2:f3} + {3:f3}", DL_EUDL_BM1, DL_EUDL_BM2, SELF_WEIGHT, WALL_WEIGHT));
            list.Add(string.Format("= {0:f3} kN/m", EUDL_DL));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iv) Total Load for Dead Load = Total_Load_DL"));
            list.Add(string.Format(""));

            double Total_Load_DL = DL_Total_Load1 + DL_Total_Load2 + SELF_WEIGHT * l + WALL_WEIGHT * l;
            list.Add(string.Format("= DL_Total_Load1 + DL_Total_Load2+ SELF_WEIGHT x l + WALL_WEIGHT x l"));
            list.Add(string.Format("= {0:f3} + {1:f3} + {2:f3} x {3:f3} + {4:f3} x {3:f3}", DL_Total_Load1, DL_Total_Load2, SELF_WEIGHT, l, WALL_WEIGHT));
            list.Add(string.Format("= {0:f3} kN", Total_Load_DL));
            list.Add(string.Format(""));
            #endregion STEP 1 : LOAD CALCULATIONS

            #region STEP 2 : CHARACTERISTIC LOADS

            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------"));
            list.Add(string.Format("STEP 2 : CHARACTERISTIC LOADS"));
            list.Add(string.Format("-------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("        EUDL for Dead Load = EUDL_DL = {0:f3} kN/m", EUDL_DL));
            list.Add(string.Format("        EUDL for Live Load = EUDL_LL = {0:f3} kN/m", EUDL_LL));
            list.Add(string.Format(""));
            list.Add(string.Format("        Total Load for Dead Load = Total_Load_DL = {0:f3} kN", Total_Load_DL));
            list.Add(string.Format("        Total Load for Live Load = Total_Load_LL = {0:f3} kN", Total_Load_LL));
            list.Add(string.Format(""));

            #endregion STEP2 : CHARACTERISTIC LOADS

            #region   STEP 3 : CALCULATION FOR BENDING MOMENT
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------------"));
            list.Add(string.Format("STEP 3 : CALCULATION FOR BENDING MOMENT"));
            list.Add(string.Format("-----------------------------------------"));
            list.Add(string.Format(""));

            double fact_LL = 1.5;
            double fact_DL = 1.5;

            list.Add(string.Format("Live Load factor = fact_LL = {0}", fact_LL));
            list.Add(string.Format("Dead Load factor = fact_DL = {0}", fact_DL));
            list.Add(string.Format(""));
            list.Add(string.Format("Characteristic Dead Load = EUDL_DL = {0:f3} KN/m", EUDL_DL));
            list.Add(string.Format(""));

            double Design_DL = EUDL_DL * fact_DL;
            list.Add(string.Format("Factor Dead Load = Design_DL = EUDL_DL x fact_DL "));
            list.Add(string.Format("                             = {0:f3} x {1}", EUDL_DL, fact_DL));
            list.Add(string.Format("                             = {0:f3} KN/m", Design_DL));
            list.Add(string.Format(""));
            list.Add(string.Format("Characteristic Live Load = EUDL_LL = {0:f3} KN/m", EUDL_LL));
            list.Add(string.Format(""));


            double Design_LL = EUDL_LL * fact_LL;
            list.Add(string.Format("Factor Live Load = Design_LL = EUDL_LL x fact_LL"));
            list.Add(string.Format("                             = {0:f3} x {1}", EUDL_LL, fact_LL));
            list.Add(string.Format("                             = {0:f3} KN/m", Design_LL));
            list.Add(string.Format(""));
            list.Add(string.Format("Fixed Load EUDL = EUDL_FL = EUDL_DL = {0:f3} KN/m", EUDL_DL));
            list.Add(string.Format(""));

            double EUDL_NF = EUDL_LL * fact_LL + EUDL_DL * fact_DL;

            list.Add(string.Format("Not Fixed Load EUDL = EUDL_NF = EUDL_LL x fact_LL + EUDL_DL x fact_DL"));
            list.Add(string.Format("                              = {0:f3} x {1} + {2:f3} x {3}", EUDL_LL, fact_LL, EUDL_DL, fact_DL));
            list.Add(string.Format("                              = {0:f3} KN/m", EUDL_NF));
            list.Add(string.Format(""));

            double BM1 = (EUDL_NF * l * l) / 10.0 + (EUDL_DL * l * l) / 12.0;

            list.Add(string.Format("BM1 = Bending Moments in End Span Centre = (EUDL_NF x l^2)/10 + (EUDL_DL x l^2)/12"));
            list.Add(string.Format("                                         = ({0:f3} x {1:f3}^2)/10 + ({2:f3} x {1:f3}^2)/12", EUDL_NF, l, EUDL_DL));
            list.Add(string.Format("                                         = {0:f3} kN-m", BM1));
            list.Add(string.Format(""));

            double BM2 = (EUDL_NF * l * l) / 12.0 + (EUDL_DL * l * l) / 24.0;

            list.Add(string.Format("BM2 = Bending Moments in Inside Span Centre = (EUDL_NF x l^2)/12 + (EUDL_DL x l^2)/24"));
            list.Add(string.Format("                                            = ({0:f3} x {1:f3}^2)/12 + ({2:f3} x {1:f3}^2)/24", EUDL_NF, l, EUDL_DL));
            list.Add(string.Format("                                            = {0:f3} kN-m", BM2));
            list.Add(string.Format(""));


            double BM_Sag = Math.Max(BM1, BM2);
            list.Add(string.Format("Maximum Sag Bending Moment of BM1 & BM2 = BM_Sag = {0:f3} kN-m", BM_Sag));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double BM3_1 = -((EUDL_NF * l * l) / 9 + (EUDL_DL * l * l) / 10);


            list.Add(string.Format("BM3 (1)  Bending Moments in Penultimate Supports = - [(EUDL_NF x l^2)/9 + (EUDL_DL x l^2)/10]"));
            list.Add(string.Format("                                                 = - [({0:f3} x {1:f3}^2)/9 + ({2:f3} x {1:f3}^2)/10]", EUDL_NF, l, EUDL_DL));
            list.Add(string.Format("                                                 = {0:f3} KNm", BM3_1));
            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results,"));
            //list.Add(string.Format("BM3 (2)  Maximum Bending Moment. in Penultimate Supports = **** kNm (Take Absolute value)"));

            //double BM3_2 = -90.23;
            double BM3_2 = pen_ult_max_moment[0];

            list.Add(string.Format("BM3 (2)  Maximum Bending Moment. in Penultimate Supports = {0:f3} kN-m", BM3_2));
            list.Add(string.Format(""));

            double BM3 = Math.Max(Math.Abs(BM3_1), Math.Abs(BM3_2));
            list.Add(string.Format("BM3 = (Absolute Maximum value of BM3 (1) and BM3 (2)) = {0:f3} KN-m ", BM3));
            list.Add(string.Format(""));

            double BM4_1 = -((EUDL_NF * l * l) / 9.0 + (EUDL_DL * l * l) / 12.0);
            list.Add(string.Format("BM4 (1) Bending Moments in Inside Supports = - [(EUDL_NF x l^2)/9 + (EUDL_DL x l^2)/12]"));
            list.Add(string.Format("                                           = - [({0:f3} x {1:f3}^2)/9 + ({2:f3} x {1:f3}^2)/12]", EUDL_NF, l, EUDL_DL));
            list.Add(string.Format("                                           = {0:f3} KN-m", BM4_1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results,"));


            double BM4_2 = max_moment[2];


            list.Add(string.Format("BM4 (2) Maximum Bending Moments in Inside Supports = -{0:f3} kN-m", BM4_2));
            list.Add(string.Format(""));

            double BM4 = Math.Max(Math.Abs(BM4_1), Math.Abs(BM4_2));
            list.Add(string.Format("BM4 = (Absolute Maximum value of BM4 (1) and BM4 (2))) = -{0:f3} kN-m.", BM4));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double BM_hog = Math.Max(BM4_1, BM4_2);
            list.Add(string.Format("Taking absolute maximum value of BM3 and BM4,"));
            list.Add(string.Format("Maximum Hogging Bending Moments = BM_hog = -{0:f3} kN-m", BM_hog));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion     STEP 3 : CALCULATION FOR BENDING MOMENT

            #region STEP 4 : CALCULATION FOR SHEAR FORCE
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------"));
            list.Add(string.Format("STEP 4 : CALCULATION FOR SHEAR FORCE "));
            list.Add(string.Format("-------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(i) Shear force at End Support"));
            list.Add(string.Format(""));

            double V1_1 = Total_Load_DL * 0.4 + (Total_Load_DL * 0.5 + Total_Load_LL * 1.5) * 0.45;
            list.Add(string.Format("= Total_Load_DL x 10.4 + [Total_Load_DL x 0.5 + Total_Load_LL x 1.5] x 0.45"));
            list.Add(string.Format("= {0:f3} x 0.4 + [{0:f3} x 0.5 + {1:f3} x 1.5] x 0.45", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} kN", V1_1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            //double V1_2 = 45.02;
            double V1_2 = StructureAnalysis.GetJoint_ShearForce(end_support);
            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum Shear Force at Joints at either End Supports = {0:f3} kN", V1_2));
            list.Add(string.Format(""));

            double V1 = Math.Max(V1_1, V1_2);
            list.Add(string.Format(""));
            list.Add(string.Format("V1 = Higher of the above two values =  {0:f3} kN", V1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) Shear Force on outer side at Penultimate Supports"));
            list.Add(string.Format(""));

            double V2_1 = Total_Load_DL * 1.5 * 0.6 + Total_Load_LL * 1.5 * 0.6;

            list.Add(string.Format("= Total_Load_DL x 1.5 x 0.6 + Total_Load_LL x 1.5 x 0.6"));
            list.Add(string.Format("= {0:f3} x 1.5 x 0.6 + {1:f3} x 1.5 x 0.6", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} KN", V2_1));
            list.Add(string.Format(""));


            //double V2_2 = 75.70;
            double V2_2 = StructureAnalysis.GetJoint_ShearForce(pen_ultimate);
            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum Shear Force at Joints at either Penultimate Supports = {0:f3} KN", V2_2));
            list.Add(string.Format(""));


            double V2 = Math.Max(V2_1, V2_2);
            list.Add(string.Format("V2 = Higher of the above two values = {0:f3} KN", V2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iii) Shear Force on Inner side at Penultimate Supports"));
            list.Add(string.Format(""));

            double V3_1 = Total_Load_DL * 0.55 + (Total_Load_DL * 0.5 + Total_Load_LL * 1.5) * 0.6;

            list.Add(string.Format("= Total_Load_DL x 0.55 + [Total_Load_DL x 0.5 + Total_Load_LL x 1.5] x 0.6"));
            list.Add(string.Format("= {0:f3} x 0.55 + [{0:f3} x 0.5 + {1:f3} x 1.5] x 0.6", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} KN", V3_1));
            list.Add(string.Format(""));

            //double V3_2 = 12.023;
            double V3_2 = StructureAnalysis.GetJoint_ShearForce(inner_support);

            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum Shear Force at Joints at Inner side = {0:f3} KN", V3_2));
            list.Add(string.Format(""));

            double V3 = Math.Max(V3_1, V3_2);
            list.Add(string.Format("V3 = Higher of the above two values = {0:f3} KN", V3));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iv) Shear Force at Inner Supports"));
            list.Add(string.Format(""));

            double V4_1 = Total_Load_DL * 0.5 + (Total_Load_DL * 0.5 + Total_Load_LL * 1.5) * 0.6;
            list.Add(string.Format("= Total_Load_DL x 0.5 + [Total_Load_DL x 0.5 + Total_Load_LL x 1.5] x 0.6"));
            list.Add(string.Format("= {0:f3} x 0.5 + [{0:f3} x 0.5 + {1:f3} x 1.5] x 0.6", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} KN", V4_1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double V4_2 = StructureAnalysis.GetJoint_ShearForce(inner_support);

            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum Shear Force at Joint at Inner Supports = {0:f3} KN", V4_2));
            list.Add(string.Format(""));

            double V4 = Math.Max(V4_1, V4_2);
            list.Add(string.Format("V4 = Higher of the above two values = {0:f3} KN", V4));
            list.Add(string.Format(""));

            #endregion STEP 4 : CALCULATION FOR SHEAR FORCE


            #region STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------------------------------------"));
            list.Add(string.Format("STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM "));
            list.Add(string.Format("        (D = Thickness of Floor Slab + Depth of Beam Web)"));
            list.Add(string.Format("----------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            //double Mu = -239.35;
            double Mu = max_moment[2];
            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -{0} kN-m ", Mu));
            list.Add(string.Format(""));
            list.Add(string.Format("50% of Hogging Moment will be taken by Concrete and "));
            list.Add(string.Format("50% of Hogging Bending Moment will be taken by Compression Steel,"));
            list.Add(string.Format(""));
            //list.Add(string.Format("Effective Depth = d"));
            list.Add(string.Format("Effective Depth = d >= [Mu / 0.138 x fck x b]^0.5"));
            double Q = 0.138 * fck;

            double d = Math.Pow((Math.Abs(Mu) / 0.138 * fck * b), 0.5);
            list.Add(string.Format("                    >= [{0:f3} / 0.138 x {1} x 1000]^0.5", Mu, fck));
            list.Add(string.Format("                    >= {0:f3} mm", d));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall Depth = D"));


            D = d + (Bar_dia1 / 2) + cover;
            list.Add(string.Format("D = d + (Bar_dia / 2) + Cover"));
            list.Add(string.Format("  = {0:f3} + ({1} / 2) + {2}", d, Bar_dia1, cover));
            list.Add(string.Format("  = {0:f3} mm", D));
            list.Add(string.Format(""));

            //double V = 160.048;
            double V = Math.Max(Math.Max(V1, V2), Math.Max(V3, V4));
            list.Add(string.Format("Maximum Shear Force at Support = V = {0:f3} KN", V));
            list.Add(string.Format(""));


            double tau_v = 2.8; // from Table
            list.Add(string.Format("Shear Stress = V, For Concrete Grade M{0}, Permissible Shear Stress = Ƭv = {1} N/Sq.m.", fck, tau_v));
            list.Add(string.Format(""));
            list.Add(string.Format("Ƭv = V / (b x d)"));
            list.Add(string.Format(" d = V / (b x Ƭv)"));
            //list.Add(string.Format("   = (160.408 x 1000) / (1000 x (2.8/2))"));
            list.Add(string.Format("   = ({0:f3} x 1000) / (1000 x ({1:f3}/2))", V, tau_v));

            double _d = V * 1000.0 / (1000 * tau_v / 2.0);
            list.Add(string.Format("   = {0:f3} mm", _d));
            list.Add(string.Format(""));

            double _D = _d + Bar_dia1 / 2.0 + cover;
            list.Add(string.Format("Overall Depth = D = d + Bar_dia / 2 + Cover"));
            list.Add(string.Format("                  = {0:f3} + ({1} / 2) + {2}", _d, Bar_dia1, cover));
            list.Add(string.Format("                  = {0:f3} mm", _D));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double D_prov = Math.Max(D, _D);
            list.Add(string.Format("Considering above two Overall Depths of {0:f3}mm & {1:f3}mm", D, _D));


            D_prov = ((int)D_prov) / 100.0;


            double sd = (int)((D_prov - ((int)D_prov)) * 100);

            if (sd > 50)
            {
                sd = 100;
            }
            else
            {
                sd = 50;

            }
            D_prov = (((int)D_prov) * 100 + sd);




            list.Add(string.Format("Provide Overall Depth = D = {0}mm", D_prov));
            list.Add(string.Format("Effective Depth = D - (Bar_dia / 2) - cover"));

            double eff_d = D_prov - Bar_dia1 / 2.0 - cover;
            list.Add(string.Format("                = {0} - ({1}/2) - {2}", D_prov, Bar_dia1, cover));
            list.Add(string.Format("                = {0:f2} mm", eff_d));
            list.Add(string.Format(""));

            #endregion STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM

            #region STEP 6 : CALCULATION FOR WIDTH OF FLANGE
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------------"));
            list.Add(string.Format("STEP 6 : CALCULATION FOR WIDTH OF FLANGE"));
            list.Add(string.Format("------------------------------------------"));
            list.Add(string.Format(""));

            list.Add(string.Format("Width of Flange = bf"));
            list.Add(string.Format("                = (lo/6) + bw + 6 x df"));

            double lo = 0.7 * l * 1000;
            double bf = (lo / 6) + bw + 6 * df;

            list.Add(string.Format("Effective Span = lo = 0.7 x (Span Length of Beam = l)"));
            list.Add(string.Format("                    = 0.7 x {0}", l * 1000));
            list.Add(string.Format("                    = {0:f0} mm", lo));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Width of Beam Stem/Web = bw = {0} mm", bw));
            list.Add(string.Format("Depth of RCC Slab = df = {0} mm", df));
            list.Add(string.Format(""));

            list.Add(string.Format("Width of Flange = bf = (Lo/6) + bw + 6 x df"));
            list.Add(string.Format("                     = ({0}/6) + {1} + 6 x {2}", lo, bw, df));
            list.Add(string.Format("                     = {0:f1} mm", bf));
            list.Add(string.Format(""));
            #endregion STEP 6 : CALCULATION FOR WIDTH OF FLANGE

            #region STEP 7 : CAPACITY CALCULATION FOR BENDING MOMENT

            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format("STEP 7 : CAPACITY CALCULATION FOR BENDING MOMENT"));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Capacity of Beam Section to take Bending Moment"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double M_ultimate = 0.138 * fck * bf * eff_d;
            list.Add(string.Format("M_ultimate = Q x bf x d^2    [ Q = 0.138 x fck]"));
            list.Add(string.Format(""));
            list.Add(string.Format("           = 0.138 x {0} x {1:f2} x {2:f2}^2", fck, bf, eff_d));
            if (M_ultimate > BM_Sag)
                list.Add(string.Format("           = {0:f3} kN-m > BM_Sag = {1:f3} kN-m", M_ultimate, BM_Sag));
            else
                list.Add(string.Format("           = {0:f3} kN-m < BM_Sag = {1:f3} kN-m", M_ultimate, BM_Sag));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion STEP 7 : CAPACITY CALCULATION FOR BENDING MOMENT


            #region STEP 8 : CALCULATION FOR REINFORCEMENT STEEL

            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format("STEP 8 : CALCULATION FOR REINFORCEMENT STEEL"));
            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));
            list.Add(string.Format("END SPAN"));
            list.Add(string.Format(""));

            double Mult = BM1;
            list.Add(string.Format("Mult = BM1 = {0:f3} KNm", Mult));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j"));
            list.Add(string.Format(""));

            double j = 0.5 + Math.Sqrt(Math.Abs(0.25 - Mult * 1000000 / (0.87 * fck * bf * eff_d * eff_d)));
            list.Add(string.Format("j = 0.5 + √[0.25 - Mult x 10^6 / (0.87 x fck x bf x d^2)]"));
            list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3}^2)]", Mult, fck, bf, eff_d));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("From Stress consideration,"));


            double Xv = eff_d * (1 - j) / 0.420;
            list.Add(string.Format("Xv = d x (1 - j) / 0.42"));
            list.Add(string.Format("   = {0} x (1 - {1:f3}) / 0.42", eff_d, j));

            if (Xv < df)
                list.Add(string.Format("   = {0:f3} mm < df = {1:f3} mm", Xv, df));
            else
                list.Add(string.Format("   = {0:f3} mm > df = {1:f3} mm", Xv, df));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("So, the neutral axis is within the flange of Beam Section."));
            list.Add(string.Format(""));

            double Ast = Mult * 1000000 / (0.87 * fy * j * eff_d);
            list.Add(string.Format("Area of Steel required = Ast = Mult x 10^6 / (0.87 x fy x j x d)"));
            list.Add(string.Format("                             = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mult, fy, j, eff_d));
            list.Add(string.Format("                             = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));

            double bar_nos = 3;
            double Ast1 = Math.PI * Bar_dia1 * Bar_dia1 / 4;
            //bar_nos = Ast / Ast1;


            bar_nos = (int)(Ast / Ast1);

            bar_nos = bar_nos + 1;

            Ast1 = Ast1 * bar_nos;

            list.Add(string.Format("Let us provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia1));
            list.Add(string.Format(""));
            list.Add(string.Format("Ast_provided = {0}Y' - {1} as End Span Bottom Steel", bar_nos, Bar_dia1));
            list.Add(string.Format(""));
            list.Add(string.Format("Ast1 = {0:f3} Sq.mm.", Ast1));
            #endregion STEP 8 : CALCULATION FOR REINFORCEMENT STEEL


            #region STEP 9 : INSIDE PENULTIMATE SPAN

            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------"));
            list.Add(string.Format("STEP 9 : INSIDE PENULTIMATE SPAN"));
            list.Add(string.Format("---------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));

            Mult = BM2;
            list.Add(string.Format("Mult = BM2 = {0:f3} KNm", Mult));
            list.Add(string.Format(""));

            j = 0.5 + Math.Sqrt(Math.Abs(0.25 - Mult * 1000000 / (0.87 * fck * bf * eff_d * eff_d)));

            list.Add(string.Format("j = 0.5 + √[0.25 - Mult x 10^6 / (0.87 x fck x bf x d^2)]"));
            list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3}^2)]", Mult, fck, bf, eff_d));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));

            Ast = Mult * 1000000 / (0.87 * fy * j * eff_d);

            list.Add(string.Format("Area of Steel required = Ast = Mult x 10^6 / (0.87 x fy x j x d)"));
            list.Add(string.Format("                             = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mult, fy, j, eff_d));
            list.Add(string.Format("                             = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));

            double Ast2 = Math.PI * Bar_dia1 * Bar_dia1 / 4;

            bar_nos = (int)(Ast / Ast2);
            bar_nos = bar_nos + 1;

            Ast2 = Ast2 * bar_nos;

            list.Add(string.Format("Let us provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia1));
            list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inside Span Bottom Steel", bar_nos, Bar_dia1));
            list.Add(string.Format("Ast2 = {0:f3} Sq.mm.", Ast2));
            list.Add(string.Format(""));

            #endregion STEP 9 : INSIDE PENULTIMATE SPAN


            #region STEP 10 : REINFORCEMENT AT END SUPPORTS

            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------------"));
            list.Add(string.Format("STEP 10 : REINFORCEMENT AT END SUPPORTS"));
            list.Add(string.Format("-----------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));
            list.Add(string.Format("(i) Bottom Steel Reinforcement at End Support "));
            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results,"));

            //double Mul = 143.714;
            double Mul = max_moment[0];
            //list.Add(string.Format("Maximum +ve Bending Moment at End Supports = Mu1 = {0:f3} KNm  (Member B1 & B6 and Joints J1 and J7)", Mul));
            list.Add(string.Format("Maximum +ve Bending Moment at End Supports = Mu1 = {0:f3} KN-m ", Mul));
            list.Add(string.Format(""));

            j = 0.5 + Math.Sqrt(Math.Abs(0.25 - Mul * 1000000 / (0.87 * fck * bf * eff_d * eff_d)));
            list.Add(string.Format("j = 0.5 + √[0.25 - Mu1 x 10^6 / (0.87 x fck x bf x d^2)]"));
            list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f2} x {3}^2)]", Mul, fck, bf, eff_d));
            //list.Add(string.Format("  = 0.974"));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));


            Ast = Mul * 1000000 / (0.87 * fy * j * eff_d);
            list.Add(string.Format("Area of Steel required = Ast = Mu1 x 10^6 / (0.87 x fy x j x d)"));
            list.Add(string.Format("                             = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mul, fy, j, eff_d));
            list.Add(string.Format("                             = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));
            double Ast3 = (Math.PI * Bar_dia2 * Bar_dia2 / 4.0);




            bar_nos = (int)(Ast / Ast3);
            bar_nos = bar_nos + 1;

            Ast3 = Ast3 * bar_nos;

            list.Add(string.Format("Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia2));
            list.Add(string.Format("Ast_provided = {0}Y' - {1} as End Support Bottom Steel", bar_nos, Bar_dia2));

            list.Add(string.Format("Ast3 = {0:f3} Sq.mm.", Ast3));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) Top Steel Reinforcement at End Support:"));
            list.Add(string.Format(""));

            //Mu = -188.72;
            Mu = max_moment[1];
            list.Add(string.Format("From Analysis Results,"));
            //list.Add(string.Format("Maximum -ve Bending Moment at End Supports = Mu  = -{0} kN-m  (Member B1 & B6 and Joints J1 and J7)", Mu));
            list.Add(string.Format("Maximum -ve Bending Moment at End Supports = Mu  = -{0} kN-m", Mu));
            list.Add(string.Format(""));

            list.Add(string.Format("Mul = (0.138 x fck x bw / d^2)/10^6"));

            Mul = ((0.138 * fck * bw) / (eff_d * eff_d) / 1000000);
            list.Add(string.Format("    = (0.138 x {0} x {1} / {2}^2)/10^6", fck, bw, eff_d));
            list.Add(string.Format("    = {0:f3} kN-m", Mul));
            list.Add(string.Format(""));
            list.Add(string.Format("Now, Tension Steel at top at End Supports are calculated"));
            double d_dash = cover + Bar_dia1 / 2.0;
            list.Add(string.Format("d' = Cover + Bar_dia / 2.0 = {0} + {1}/2 = {2} mm", cover, Bar_dia1, d_dash));
            list.Add(string.Format(""));

            double Xu = 0.48 * eff_d;
            list.Add(string.Format("Xu = 0.48 x d"));
            list.Add(string.Format(""));

            j = (1 - 0.42 * 0.48);
            list.Add(string.Format("j = (d - 0.42 x Xu) / d"));
            list.Add(string.Format("  = (d - 0.42 x 0.48)/d", Xv));
            list.Add(string.Format("  = (1 - 0.42 x 0.48) = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("Ast = [Mul x 10^6 / (0.87 x fy x j x d)] + [(Mu - Mu1) x 10^6 / (0.87 x fy - d’)]"));

            Ast = (Mul * 1000000 / (0.87 * fy * j * eff_d)) + ((Mu - Mul) * 1000000 / (0.87 * fy - d_dash));
            list.Add(string.Format("    = [{0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})]", Mul, fy, j, eff_d));
            list.Add(string.Format("      + [({0:f3} - {1:f3}) x 10^6 / (0.87 x {2} x  {3})]", Mu, Mul, fy, d_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("    = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));

            double Ast4 = Math.PI * Bar_dia3 * Bar_dia3 / 4.0;





            bar_nos = (int)(Ast / Ast4);
            bar_nos = bar_nos + 1;

            Ast4 = Ast4 * bar_nos;


            list.Add(string.Format(" Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia3));
            list.Add(string.Format("Ast_provided = {0}Y' - {1} as End Support Top Steel", bar_nos, Bar_dia3));
            list.Add(string.Format("Ast4 = {0:f3} Sq.mm.", Ast4));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iii) Bottom Steel Reinforcement at End Support"));
            list.Add(string.Format(""));
            list.Add(string.Format("d' =  Bardia / 2 + Cover = ({0}/2) + {1} = {2} mm", Bar_dia1, cover, d_dash));
            list.Add(string.Format(""));

            double epsylon = 0.0035 * (0.48 - d_dash / eff_d) / 0.48;
            list.Add(string.Format("ϵ = Stress in Compressive Steel = 0.0035 x (0.48 - d’ / d) / 0.48"));
            list.Add(string.Format("                                = 0.0035 x (0.48 - {0:f3} / {1}) / 0.48", d_dash, eff_d));
            list.Add(string.Format("                                = {0:f6}", epsylon));
            list.Add(string.Format(""));


            double sigma_c1 = 361 - 12.95 * Math.Pow((3.804 - epsylon * 1000), 2.0);
            list.Add(string.Format("σc_1 = Approximate Steel in Compression Steel "));
            list.Add(string.Format(""));
            list.Add(string.Format("     = 361 - 12.95 x (3.804 - ϵ x 10^3)^2"));
            list.Add(string.Format("     = 361 - 12.95 x (3.804 - {0:f6} x 10^3)^2", epsylon));
            list.Add(string.Format("     = {0:f3} N/Sq.mm.", sigma_c1));
            list.Add(string.Format(""));

            double sigma_c2 = 0.45 * fck;
            list.Add(string.Format("σc_2 = Compressive Stress in Steel = 0.45 x fck = 0.45 x {0} = {1:f3} N/Sq.mm.", fck, sigma_c2));
            list.Add(string.Format(""));

            double sigma_c = sigma_c1 - sigma_c2;
            list.Add(string.Format("σc = Effective Stress for Compressive Steel Reinforcement"));
            list.Add(string.Format("     = σc1 - σc2 = {0:f3} - {1:f3} = {2:f3} N/Sq.mm.", sigma_c1, sigma_c2, sigma_c));
            list.Add(string.Format(""));
            list.Add(string.Format("Area of Compression Steel = Ast "));
            list.Add(string.Format(""));

            Ast = (Mu - Mul) * 1000000 / ((eff_d - d_dash) * sigma_c);
            list.Add(string.Format("  Ast = (Mu - Mu1) x 10^6 / [(d - d’) x σc]"));
            list.Add(string.Format("      = ({0:f3} - {1:f3}) x 10^6 / [({2} - {3}) x {4:f3}]", Mu, Mul, eff_d, d_dash, sigma_c));
            //list.Add(string.Format("      = 38.24 x 106 / (434 x 343.2)"));
            list.Add(string.Format("      = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));

            double Ast5 = Math.PI * Bar_dia1 * Bar_dia1 / 4.0;

            bar_nos = (int)(Ast / Ast5);
            bar_nos = bar_nos + 1;

            Ast5 = Ast5 * bar_nos;


            list.Add(string.Format("Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia1));
            list.Add(string.Format("Ast_provided = {0}Y' - {1} as End Support Bottom Steel", bar_nos, Bar_dia1));
            list.Add(string.Format("Ast5 = {0:f3} Sq.mm.", Ast5));
            list.Add(string.Format(""));
            #endregion  STEP 10 : REINFORCEMENT AT END SUPPORTS

            #region  STEP 11 : REINFORCEMENT AT INNER SUPPORT

            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format("STEP 11 : REINFORCEMENT AT INNER SUPPORT"));
            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));

            //Mu = -239.35;
            Mu = max_moment[2];
            list.Add(string.Format("From Analysis Results,"));
            //list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -{0} kN-m   (Members B1 to B6 and Joints J2 to J6)", Mu));
            list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -{0} kN-m", Mu));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            Mul = 0.138 * fck * bw * eff_d * eff_d / 1000000;
            list.Add(string.Format("Mul = 0.138 x fck x bw x d^2 / 10^6"));
            list.Add(string.Format("    = 0.138 x {0} x {1} x {2}^2 / 10^6", fck, bw, eff_d));
            list.Add(string.Format("    = {0:f3} kN-m", Mul));

            //list.Add(string.Format("j = (d - 0.46 x Xu) / d = (d - 0.42 x 0.48 x d) / d = 1 - 0.42 x 0.48 = 0.798"));
            list.Add(string.Format(""));
            list.Add(string.Format("Xu = 0.48 x d"));
            list.Add(string.Format(""));
            j = 1 - 0.42 * 0.48;
            list.Add(string.Format("j = (d - 0.42 x Xu) / d = (d - 0.42 x 0.48 x d) / d = 1 - 0.42 x 0.48 = 0.798"));
            list.Add(string.Format(""));

            epsylon = 0.0035 * (0.48 - (d_dash / eff_d) / 0.48);
            list.Add(string.Format("ϵ = Strain in Compressive Steel = 0.0035 x (0.48 - (d’ / d) / 0.48)"));
            list.Add(string.Format("                                = 0.0035 x (0.48 - ({0}/{1}) / 0.48)", d_dash, eff_d));
            list.Add(string.Format("                                = {0:f6}", epsylon));
            list.Add(string.Format(""));


            sigma_c1 = 361 - 12.95 * Math.Pow((3.804 - epsylon * 1000), 2.0);
            list.Add(string.Format("Approximate Stress in Compress Steel = 361 - 12.95 x (3.804 - ϵ x 10^3)2"));
            list.Add(string.Format("                                     = 361 - 12.95 x (3.804 - {0:f6} x 10^3)^2", epsylon));
            list.Add(string.Format("                                     = {0:f3} N/Sq.mm.", sigma_c1));
            list.Add(string.Format(""));



            Ast = ((Mul * 1000000) / (0.87 * fy * j * eff_d)) + ((Mu - Mul) * 1000000 / (0.87 * fy * (eff_d - d_dash)));


            list.Add(string.Format("(i) For Tension Steel"));
            list.Add(string.Format(""));
            list.Add(string.Format("   Ast  = [Mul x 10^6 / (0.87 x fy x j x d)]"));
            list.Add(string.Format("          + [(Mu - Mu1) x 10^6 / (0.87 x fy x (d - d’)]"));
            list.Add(string.Format(""));
            list.Add(string.Format("        = [{0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})]", Mul, fy, j, eff_d));
            list.Add(string.Format("          + [({0:f3} - {1:f3}) x 10^6 / (0.87 x {2} x ({3} - {4})]", Mu, Mul, fy, eff_d, d_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("        = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));


            //double Ast6 = (2 * Math.PI * Bar_dia3 * Bar_dia3 / 4.0) + (2 * Math.PI * Bar_dia4 * Bar_dia4 / 4.0);
            double Ast6 = (Math.PI * Bar_dia3 * Bar_dia3 / 4.0);


            bar_nos = (int)(Ast / Ast6);
            bar_nos = bar_nos + 1;

            Ast6 = Ast6 * bar_nos;




            //list.Add(string.Format("Provide 2 Nos {0} mm  and 2 Nos {1} bars, ", Bar_dia3, Bar_dia4));
            list.Add(string.Format("Provide {0} Nos {1} mm bars, ", bar_nos, Bar_dia3));


            list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inner Support Top Steel", bar_nos, Bar_dia3));
            list.Add(string.Format("Ast6 = {0:f3} Sq.mm.", Ast6));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) For Compression Steel"));
            list.Add(string.Format(""));

            double Asc = Math.Abs(Mu - Mul) * 1000000 / (sigma_c * (eff_d - d_dash));
            list.Add(string.Format("    Asc = Area of Compressive Steel"));
            list.Add(string.Format("        = (Mu - Mul) x 10^6 / [σc x (d - d’)]"));
            list.Add(string.Format("        = ({0:f3} - {1:f3}) x 10^6 / [{2:f3} x ({3} - {4})]", Mu, Mul, sigma_c, eff_d, d_dash));
            list.Add(string.Format("        = {0:f3} Sq.mm.", Asc));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double Ast7 = (Math.PI * Bar_dia1 * Bar_dia1 / 4.0);

            bar_nos = (int)(Ast / Ast7);
            bar_nos = bar_nos + 1;

            Ast7 = Ast7 * bar_nos;




            list.Add(string.Format("Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia1));
            list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inner Support Bottom Steel", bar_nos, Bar_dia1));
            list.Add(string.Format("Ast7 = {0:f3} Sq.mm.", Ast7));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            //Mu = 93.09;
            Mu = max_moment[3];
            list.Add(string.Format("(iii) From Analysis Results,"));
            //list.Add(string.Format("      Maximum + ve Bending Moment at Inner Supports = Mu = {0:f3}   KNm   (Members B1 to B6 and Joints J2 to J6)", Mu));
            list.Add(string.Format("      Maximum + ve Bending Moment at Inner Supports = Mu = {0:f3} KN-m", Mu));
            list.Add(string.Format(""));

            j = 0.5 + Math.Sqrt(0.25 - Mu * 1000000 / (0.87 * fck * bf * eff_d * eff_d));
            list.Add(string.Format("j = 0.5 + √[0.25 - Mu x 10^6 / (0.87 x fck x bf x d^2)]"));
            list.Add(string.Format("          = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2} x {3}^2)]", Mu, fck, bf, eff_d));
            list.Add(string.Format("          = {0:f3}", j));
            list.Add(string.Format(""));

            list.Add(string.Format("Area of Steel required = Ast"));
            list.Add(string.Format(""));

            Ast = Mu * 1000000 / (0.87 * fy * j * eff_d);
            list.Add(string.Format("  Ast = Mu x 10^6 / (0.87 x fy x j x d)"));
            list.Add(string.Format("      = {0:f3} x 10^6 / (0.87 x {1} x {2} x {3})", Mu, fy, j, eff_d));
            list.Add(string.Format("      = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));

            double Ast8 = (Math.PI * Bar_dia1 * Bar_dia1 / 4.0);


            bar_nos = (int)(Ast / Ast8);
            bar_nos = bar_nos + 1;

            Ast8 = Ast8 * bar_nos;

            list.Add(string.Format("Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia1));
            list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inner Support Bottom Steel", bar_nos, Bar_dia1));
            list.Add(string.Format("Ast8 = {0:f3} Sq.mm.", Ast8));
            list.Add(string.Format(""));
            #endregion  STEP 11 : REINFORCEMENT AT INNER SUPPORT

            #region STEP 12 : SHEAR ENFORCEMENT
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format("STEP 12 : SHEAR ENFORCEMENT"));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format("Main Reinforcement Provided at:"));
            list.Add(string.Format(""));
            list.Add(string.Format("End Support:"));
            list.Add(string.Format(""));
            list.Add(string.Format("Tension Steel at Top Reinforcement = Ast4 = {0:f3} Sq.mm.", Ast4));
            list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast3 = {0:f3} Sq.mm.", Ast3));
            list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast5 = {0:f3} Sq.mm.", Ast5));
            list.Add(string.Format(""));
            list.Add(string.Format("Inner Support:"));
            list.Add(string.Format(""));
            list.Add(string.Format(" Tension Steel at Top Reinforcement = Ast6 = {0:f3} Sq.mm.", Ast6));
            list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast7 = {0:f3} Sq.mm.", Ast7));
            list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast8 = {0:f3} Sq.mm.", Ast8));
            list.Add(string.Format(""));
            list.Add(string.Format("Minimum Steel for Compression Reinforcement = Asc = {0:f3} Sq.mm.", Asc));
            list.Add(string.Format("Effective Depth of Beam = d = {0} mm.", eff_d));
            list.Add(string.Format("Width of Web of Beam = bw = {0} mm.", bw));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Shear Force at Inner Support = V2 = {0:f3} KN.", V2));
            list.Add(string.Format(""));

            tau_v = V2 * 1000 / (bw * eff_d);
            list.Add(string.Format("Shear Stress = Ƭv = V2 x 1000 / (bw x d)"));
            list.Add(string.Format("                  = {0:f3} x 1000 / ({1} x {2})", V2, bw, eff_d));
            list.Add(string.Format("                  = {0:f3} N/Sq.mm.", tau_v));
            list.Add(string.Format(""));

            double p = Asc * 100 / (bw * eff_d);
            list.Add(string.Format("Percentage of Steel = p = Asc x 100 / (bw x d)"));
            list.Add(string.Format("                        = {0:f3} x 100 / ({1} x {2})", Asc, bw, eff_d));
            list.Add(string.Format("                        = {0:f3}%", p));
            list.Add(string.Format(""));


            double tau_c = 0.484;
            list.Add(string.Format("From Table1, For fck = {0}   &    p = {1:f3}", fck, p));
            list.Add(string.Format("Shear Capacity of the Section Ƭc = {0:f3} N/Sq.mm.", tau_c));
            list.Add(string.Format(""));
            list.Add(string.Format("Balance Shear Stress to be taken by Shear Reinforcement"));
            double tau = tau_v - tau_c;
            list.Add(string.Format("Ƭ = Ƭv - Ƭc = {0:f3} - {1:f3} = {2:f3} N/Sq.mm.", tau_v, tau_c, tau));
            list.Add(string.Format(""));
            list.Add(string.Format("Providing {0} mm dia 2-legged Stirrups, ", Shear_Bar_dia));

            double Asv = 2 * Math.PI * Shear_Bar_dia * Shear_Bar_dia / 4.0;
            list.Add(string.Format("Area = Asv = 2 x π x {0}^2 / 4  = {1:f3} Sq.mm. ", Shear_Bar_dia, Asv));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Spacing for Stirrups = Sv"));
            list.Add(string.Format(""));

            double Sv1 = Asv * fy / (0.4 * bw);
            double Sv2 = (3.0 * eff_d) / 4.0;
            double Sv3 = 450.0;
            double Sv = (0.87 * fy * Asv) / ((tau_v - tau_c) * bw);

            list.Add(string.Format("(i)   Sv <= Asv x fy / (0.4 x bw) = 100.53 x 415 / (0.4 x 250) = 417.2 mm"));
            list.Add(string.Format("(ii)  Sv = <= (3 x d) / 4 = 3 x 467 / 4 = 350.25 mm"));
            list.Add(string.Format("(iii) Sv = <= 450 mm"));
            list.Add(string.Format("(iv) Calculated Spacing = Sv "));
            list.Add(string.Format("                        = (0.87 x fy x Asv) / [(Ƭv - Ƭc) x b] "));
            list.Add(string.Format("                        = 0.87 x {0} x {1:f3} / [({2:f3} - {3:f3}) x {4}]", fy, Asv, tau_v, tau_c, bw));
            //list.Add(string.Format("                        = 0.87 x 415 x 100.53 / 221.5"));
            list.Add(string.Format("                        = {0:f3} mm", Sv));
            list.Add(string.Format(""));

            Sv = (int)(Sv / 10);
            Sv = Sv * 10;

            list.Add(string.Format("Provide  Y'{0} - (2 Legged) Vertical Stirrups @{1} mm Centre to Centre", Shear_Bar_dia, Sv));

            Ast = 2 * Math.PI * Shear_Bar_dia * Shear_Bar_dia / 4.0;
            double Ast9 = Ast * 1000 / Sv;

            list.Add(string.Format("AST9 = {0:f3} x 1000 / {1} Sq.mm. / metre = {2:f3} Sq.mm. / metre.", Ast, Sv, Ast9));
            list.Add(string.Format(""));

            #endregion STEP 12 : SHEAR ENFORCEMENT

            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF REPORT        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion

            if (Report_File != "")
                File.WriteAllLines(Report_File, list.ToArray());
        }

        //Chiranjit [2015 03 06]



        public static List<string> Get_Banner()
        {
            List<string> list = new List<string>();


            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*       DESIGN OF RCC FLANGED BEAM           *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");
            list.Add("");
            list.Add("");

            #endregion


            return list;

        }
        public void Calculate_Program_Loop()
        {
            List<string> list = new List<string>();

            list.AddRange(Get_Banner());


            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(Design Standard : BS 8110 / IS 456)"));
            list.Add(string.Format(""));

            for (int i = 0; i < All_Beam_Data.Count; i++)
            {
                Beam_Nos = All_Beam_Data[i].Continuous_BeamMembers;

                Bar_dia1 = All_Beam_Data[i].d1;
                Bar_dia2 = All_Beam_Data[i].d2;
                Bar_dia3 = All_Beam_Data[i].d3;
                Bar_dia4 = All_Beam_Data[i].d4;
                Bar_dia5 = All_Beam_Data[i].d5;
                Bar_dia6 = All_Beam_Data[i].d6;

                D = All_Beam_Data[i].Depth * 1000;
                bw = All_Beam_Data[i].Breadth * 1000;


                list.AddRange(Design_Program_Loop(i + 1).ToArray());

                list.Add(string.Format(""));
                list.Add(string.Format("-------------------------------------"));
                list.Add(string.Format("TABLE 1 : PERMISSIBLE_SHEAR_STRESS"));
                list.Add(string.Format("-------------------------------------"));
                list.Add(string.Format(""));

                list.AddRange(Tables.Get_File_Permissible_Shear_Stress().ToArray());

            }
            //list.Add(string.Format(""));
            //list.Add(string.Format("-------------------------------------"));
            //list.Add(string.Format("TABLE 1 : PERMISSIBLE_SHEAR_STRESS"));
            //list.Add(string.Format("-------------------------------------"));
            //list.Add(string.Format(""));

            list.AddRange(Tables.Get_File_Permissible_Shear_Stress().ToArray());


            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF REPORT        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion End of Report


            if (Report_File != "")
                File.WriteAllLines(Report_File, list.ToArray());


        }


        public void Get_All_Forces(JointCoordinateCollection cont_jcc,
            ref double AM1, ref double AM2, ref double AM3, ref double AM4,
            ref double AV1, ref double AV2, ref double AV3)
        {


            List<int> inner_support = new List<int>();
            List<int> end_support = new List<int>();
            List<int> pen_ultimate = new List<int>();
            List<int> lst_jnts = new List<int>();

            foreach (var item in cont_jcc)
            {
                lst_jnts.Add(item.NodeNo);
            }


            if (lst_jnts.Count > 2)
            {
                end_support.Add(lst_jnts[0]);
                end_support.Add(lst_jnts[lst_jnts.Count - 1]);

                lst_jnts.RemoveAt(0);
                lst_jnts.RemoveAt(lst_jnts.Count - 1);


                if (lst_jnts.Count > 2)
                {
                    pen_ultimate.Add(lst_jnts[0]);
                    pen_ultimate.Add(lst_jnts[lst_jnts.Count - 1]);

                    lst_jnts.RemoveAt(0);
                    lst_jnts.RemoveAt(lst_jnts.Count - 1);
                }

                inner_support.AddRange(lst_jnts);


            }
            else
            {
                inner_support.AddRange(lst_jnts);
                end_support.AddRange(lst_jnts);
            }

            //List<double> max_moment = new List<double>();
            //List<double> max_shear = new List<double>();
            //List<double> pen_ult_max_moment = new List<double>();

            //double AM1 = 0.0;
            //double AM2 = 0.0;
            //double AM3 = 0.0;
            //double AM4 = 0.0;
            //double AV1 = 0.0;
            //double AV2 = 0.0;
            //double AV3 = 0.0;
            //double AV4 = 0.0;

            //AM1 = StructureAnalysis.GetJoint_Negative_Moment(end_support);
            //AM1 = StructureAnalysis.GetJoint_Positive_Moment(end_support);
            AM1 = StructureAnalysis.GetJoint_MomentForce(end_support);
            AV1 = StructureAnalysis.GetJoint_ShearForce(end_support);

            //AM2 = StructureAnalysis.GetJoint_Negative_Moment(pen_ultimate);
            //AM2 = StructureAnalysis.GetJoint_Positive_Moment(pen_ultimate);
            AM2 = StructureAnalysis.GetJoint_MomentForce(pen_ultimate);
            AV2 = StructureAnalysis.GetJoint_ShearForce(pen_ultimate);


            AM3 = StructureAnalysis.GetJoint_Positive_Moment(inner_support);
            AM4 = StructureAnalysis.GetJoint_Negative_Moment(inner_support);
            AV3 = StructureAnalysis.GetJoint_ShearForce(inner_support);




        }

        //Chiranjit [2015 03 06]
        public List<string> Design_Program_Loop(int step)
        {
            //Store Bar Nos
            int bnos_1, bnos_2, bnos_3, bnos_4, bnos_5, bnos_6;

            List<string> list = new List<string>();

            if (BOQ == null)
                BOQ = new Beam_BOQ();

            BOQ.Steel_Reinforcement.Clear();

            List<int> beam_nos = MyList.Get_Array_Intiger(Beam_Nos);
            BOQ.BeamNos = Beam_Nos;


            //Beam_Nos = beam_nos[0].ToString();
            //List<MovingLoadAnalysis.Member> beams = new List<MovingLoadAnalysis.Member>();


            MemberIncidence mm = AST_DOC.Members.Get_Member(beam_nos[0]);


            BOQ.Floor_ELevation = mm.StartNode.Y;

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------------------------------------------------------"));
            list.Add(string.Format("BEAM_DESIGN {0} : Design Data From Structure Model for Beam {1} at Floor Level {2:f3}", step, Beam_Title, mm.StartNode.Y));
            list.Add(string.Format("------------------------------------------------------------------------------------"));

            list.Add(string.Format(""));
            //list.Add(string.Format("Details of Beam To Be Designed"));
            //Get_Continuous_Beams();

            JointCoordinateCollection cont_jcc = new JointCoordinateCollection();
            MemberIncidenceCollection mbr_coll = new MemberIncidenceCollection();
            DirecctionCollection dc1 = new DirecctionCollection();



            //Get_Continuous_Beams(ref cont_jcc, ref mbr_coll, ref dc1);


            List<int> all_beams = Get_Continuous_Beams(mm, ref cont_jcc, ref mbr_coll, ref dc1);

            //if (mbr_coll.Count != beam_nos.Count)
            //{
            //    Beam_Nos = beam_nos[beam_nos.Count - 1].ToString();
            //    //Beam_Nos = beam_nos[0].ToString();
            //    Get_Continuous_Beams(ref cont_jcc, ref mbr_coll, ref dc1);

            //}



            list.Add(string.Format(""));



            string kStr = "";
            int c = 1;

            double Ly = 0.0;
            double Lx = 0.0;

            MovingLoadAnalysis.Member mbr = null;
            list.Add(string.Format(""));

            if (beam_nos.Count > 0)
            {
                list.Add(string.Format("Beam {0}, Continuous with Member Nos. {1}", Beam_Title, Beam_Nos.Replace(" ", ", ")));
            }
            else if (beam_nos.Count > 0)
            {
                list.Add(string.Format("Beam {0}, Member No. {1}", Beam_Title, Beam_Nos));
            }

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("EACH MEMBER AND ITS JOINTS :"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));

            List<int> lst_jnts = new List<int>();

            double _l1, _l2;




            list.Add(string.Format("--------------------------------------------------------------------------------------------------------------------"));
            list.Add(string.Format("Member#   Joint1   X         Y        Z      Joint2    X         Y       Z      Length     Assoc. Slab widths"));
            list.Add(string.Format("--------------------------------------------------------------------------------------------------------------------"));


            _l1 = 0;
            _l2 = 0;

            double len = 0.0;
            double pen_ult_len = 0.0;
            double inn_len = 0.0;
            double end_len_a = 0.0;
            double end_len_b = 0.0;

            double _lx1 = 0.0, _lx2 = 0.0, _ly = 0;



            for (int i = 0; i < mbr_coll.Count; i++)
            {
                var item = mbr_coll[i];

                if (i == 0) end_len_a = item.Length;
                if (i == mbr_coll.Count - 1) end_len_b = item.Length;

                if (i > 0 && i < mbr_coll.Count - 1)
                    pen_ult_len += item.Length;

                if (i > 1 && i < mbr_coll.Count - 2)
                    inn_len += item.Length;



                //}
                //foreach (var item in mbr_coll)
                //{


                len += item.Length;
                if (dc1[c - 1].Lx_Member != null)
                {
                    _l1 = dc1[c - 1].Lx_Member.Length;

                }
                if (dc1[c].Lx_Member != null)
                {
                    if (_l1 < dc1[c].Lx_Member.Length)
                        _l1 = dc1[c].Lx_Member.Length;
                }
                if (dc1[c - 1].Lz_Member != null)
                {
                    _l2 = dc1[c - 1].Lz_Member.Length;
                }
                if (dc1[c].Lz_Member != null)
                {
                    if (_l2 < dc1[c].Lz_Member.Length)
                        _l2 = dc1[c].Lz_Member.Length;
                }

                //list.Add(string.Format("B{0}   J{1} ({2:f3},{3:f3},{4:f3})    J{5}({6:f3},{7:f3},{8:f3})   Length = {9:f3} m.  Assoc.  Slab widths = lx = {10:f3} and {11:f3} m.", c, c,
                //    item.StartNode.X, item.StartNode.Y, item.StartNode.Z,
                //    c + 1, item.EndNode.X, item.EndNode.Y, item.EndNode.Z, item.Length, _l1, _l2));


                list.Add(string.Format("{0,5} {1,8} {2,8:f3} {3,8:f3} {4,8:f3} {5,8} {6,8:f3} {7,8:f3} {8,8:f3} {9,8:f3}    lx = {10:f3} and {11:f3}",
                    item.MemberNo,
                    item.StartNode.NodeNo,
                    item.StartNode.Point.x,
                    item.StartNode.Point.y,
                    item.StartNode.Point.z,
                    item.EndNode.NodeNo,
                    item.EndNode.Point.x,
                    item.EndNode.Point.y,
                    item.EndNode.Point.z,
                    item.Length, _l1, _l2));


                if (_ly < item.Length)
                {
                    _ly = item.Length;
                    _lx1 = _l1;
                    _lx2 = _l2;
                }
                //list.Add(string.Format("--------------------------------------------------------------------------------------------------------------------"));





                c++;


                //if (Lx < _l1)
                //    Lx = _l1;
                //if (Ly < _l2)
                //    Ly = _l2;

            }
            list.Add(string.Format("--------------------------------------------------------------------------------------------------------------------"));


            list.Add(string.Format(""));
            list.Add(string.Format(""));

            Ly = Math.Max(_l1, _l2);
            Lx = Math.Min(_l1, _l2);



            BOQ.Length = len;



            double l = Ly;
            double b = Lx;



            List<int> inner_support = new List<int>();
            List<int> end_support = new List<int>();
            List<int> pen_ultimate = new List<int>();

            foreach (var item in cont_jcc)
            {
                lst_jnts.Add(item.NodeNo);
            }


            if (lst_jnts.Count > 2)
            {
                end_support.Add(lst_jnts[0]);
                end_support.Add(lst_jnts[lst_jnts.Count - 1]);

                lst_jnts.RemoveAt(0);
                lst_jnts.RemoveAt(lst_jnts.Count - 1);


                if (lst_jnts.Count > 2)
                {
                    pen_ultimate.Add(lst_jnts[0]);
                    pen_ultimate.Add(lst_jnts[lst_jnts.Count - 1]);

                    lst_jnts.RemoveAt(0);
                    lst_jnts.RemoveAt(lst_jnts.Count - 1);
                }

                inner_support.AddRange(lst_jnts);


            }
            else
            {
                inner_support.AddRange(lst_jnts);
                end_support.AddRange(lst_jnts);
            }

            //List<double> max_moment = new List<double>();
            //List<double> max_shear = new List<double>();
            //List<double> pen_ult_max_moment = new List<double>();

            //double AM1 = 0.0;
            //double AM2 = 0.0;
            //double AM3 = 0.0;
            //double AM4 = 0.0;
            //double AV1 = 0.0;
            //double AV2 = 0.0;
            //double AV3 = 0.0;
            //double AV4 = 0.0;


            //AM1 = StructureAnalysis.GetJoint_MomentForce(end_support);
            //AV1 = StructureAnalysis.GetJoint_ShearForce(end_support);

            //AM2 = StructureAnalysis.GetJoint_MomentForce(pen_ultimate);
            //AV2 = StructureAnalysis.GetJoint_ShearForce(pen_ultimate);


            //AM3 = StructureAnalysis.GetJoint_Positive_Moment(inner_support);
            //AM4 = StructureAnalysis.GetJoint_Negative_Moment(inner_support);
            //AV3 = StructureAnalysis.GetJoint_ShearForce(inner_support);










            //double mnt = StructureAnalysis.GetJoint_Negative_Moment(end_support);

            //mnt = StructureAnalysis.GetJoint_Positive_Moment(end_support);
            //max_moment.Add(mnt);


            //mnt = StructureAnalysis.GetJoint_Negative_Moment(end_support);
            //max_moment.Add(mnt);



            //mnt = StructureAnalysis.GetJoint_Negative_Moment(inner_support);
            //max_moment.Add(mnt);


            //mnt = StructureAnalysis.GetJoint_Positive_Moment(inner_support);
            //max_moment.Add(mnt);



            //mnt = StructureAnalysis.GetJoint_Negative_Moment(pen_ultimate);
            //pen_ult_max_moment.Add(mnt);

            //mnt = StructureAnalysis.GetJoint_Positive_Moment(pen_ultimate);
            //pen_ult_max_moment.Add(mnt);


            list.Add(string.Format("Longest Span Segment of Beam = l = {0:f3} m", l));
            //list.Add(string.Format("Width of Floor Slab on other side of this Segment of Beam = lx = {0:f3} m, ly = l = {1:f3} m", _lx1, Ly));
            list.Add(string.Format("Width of Floor Slab on One side of this Segment of Beam = lx = {0:f3} m, ly = l = {1:f3} m", _lx1, _ly));
            list.Add(string.Format("Width of Floor Slab on other side of this Segment of Beam = lx = {0:f3} m, ly = l = {1:f3} m", _lx2, _ly));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results obtained the Maximum +ve & -ve values Bending Moments:"));
            list.Add(string.Format(""));
            //list.Add(string.Format("Maximum +ve Bending Moment at End Supports = Mu1 = {0:f3} KN-m", max_moment[0]));
            //list.Add(string.Format("Maximum -ve Bending Moment at End Supports = Mu  = -{0:f3}  KN-m", max_moment[1]));
            //list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -{0:f3} KN-m", max_moment[2]));
            //list.Add(string.Format("Maximum +ve Bending Moment at Inner Supports = Mu = {0:f3}   KN-m", max_moment[3]));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Bending Moment at End Supports = AM1 = {0:f3} KN-m [ Joints {1}]", AM1, MyList.Get_Array_Text(end_support)));
            list.Add(string.Format("Maximum Bending Moment at Penultimate Supports = AM2 = {0:f3} KN-m [ Joints {1}]", AM2, MyList.Get_Array_Text(pen_ultimate)));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum +ve Bending Moment at Inside Supports = AM3 = {0:f3} KN-m [ Joints {1}]", AM3, MyList.Get_Array_Text(inner_support)));
            list.Add(string.Format("Maximum -ve Bending Moment at Inside Supports = AM4 = {0:f3} KN-m [ Joints {1}]", AM4, MyList.Get_Array_Text(inner_support)));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results obtained the Maximum Shear Forces : "));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Shear Force at End Supports = AV1 = {0:f3} KN [ Joints {1}]", AV1, MyList.Get_Array_Text(end_support)));
            list.Add(string.Format("Maximum Shear Force at Penultimate Supports = AV2 = {0:f3} KN [ Joints {1}]", AV2, MyList.Get_Array_Text(pen_ultimate)));
            list.Add(string.Format("Maximum Shear Force at Inside Supports = AV3 = {0:f3} KN [ Joints {1}]", AV3, MyList.Get_Array_Text(inner_support)));
            list.Add(string.Format(""));









            list.Add(string.Format(""));

            #region   User’s Data:

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("USER’S DATA"));
            list.Add(string.Format("------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Dead/Fixed Load on Floor Slab on one side of Beam = W_DL1 = {0} KN/Sq.m.", W_DL1));
            list.Add(string.Format("Live Load on Floor Slab on one side of Beam = W_LL1 = {0} KN/Sq.m.", W_LL1));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));
            //list.Add(string.Format("Main Reinforcement"));
            //list.Add(string.Format("Reinforcement Bar diameter = Bar_dia = {0}mm, {1}mm, {2}mm", Bar_dia1, Bar_dia2, Bar_dia3));

            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia at Span Bottom = d1 = {0} mm", Bar_dia1));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia at Support Top = d2 = {0} mm", Bar_dia2));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia at Support Bottom = d3 = {0} mm", Bar_dia3));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia at Span Top = d4 = {0} mm", Bar_dia4));
            list.Add(string.Format(""));


            list.Add(string.Format("Reinforcement Clear Cover = cover = {0} mm", cover));
            list.Add(string.Format(""));
            list.Add(string.Format("Shear Reinforcement Stirrups Bar diameter = Shear_Bar_dia = {0}mm,", Shear_Bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall Depth of Beam = D = {0} mm", D));

            list.Add(string.Format("Width of Beam Web = bw = {0} mm", bw));
            list.Add(string.Format("Depth of Beam Flange (Thickness of Floor Slab) = df = {0}mm", df));
            list.Add(string.Format("Unit weight of Concrete = γc = {0} KN/Cum", gamma_c));
            list.Add(string.Format(""));
            list.Add(string.Format("Wall Thickness = tw = {0}mm", tw));
            list.Add(string.Format("Plaster Thickness = tp = {0} mm", tp));
            list.Add(string.Format("Height of Wall = hw = {0} m", hw));
            list.Add(string.Format("Unit weight of Wall =  γbw = {0} KN/Cum", gamma_bw));
            list.Add(string.Format("Weight reduction factor for Doors & Windows = fact_wall = {0}", face_wall));
            list.Add(string.Format(""));
            list.Add(string.Format("Live Load Factor = fact_LL = {0}", LL_Fact));
            list.Add(string.Format("Dead Load Factor = fact_DL = {0}", DL_Fact));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion   User’s Data:

            #region STEP 1 : LOAD CALCULATIONS

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------"));
            //list.Add(string.Format("STEP {0}.1 : LOAD CALCULATIONS", step));
            list.Add(string.Format("STEP 1 : LOAD CALCULATIONS", step));
            list.Add(string.Format("-------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Longest Span Segment of Beam = l = ly = {0:f3} m", l));
            list.Add(string.Format(""));
            list.Add(string.Format("Dead Load Calculations"));
            list.Add(string.Format("------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("For Slab on One Side of Longest Span of Beam"));
            list.Add(string.Format("---------------------------------------------"));
            list.Add(string.Format(""));
            b = _lx1;
            list.Add(string.Format("Width of Floor Slab on one side of Beam = {0:f3} m", b));
            list.Add(string.Format("Dead/Fixed Load on Floor Slab on one side of Beam = W_DL1 = {0} KN/Sq.m.", W_DL1));
            list.Add(string.Format("Live Load on Floor Slab on one side of Beam = W_LL1 = {0} KN/Sq.m.", W_LL1));
            list.Add(string.Format(""));
            list.Add(string.Format("Effective dimensions of Slab on one side of Beam = {0:f3}m x {1:f3}m", b, l));

            Lx = _lx1;
            list.Add(string.Format("lx = {0:f3}m, ly = {1:f3}m", _lx1, _ly));
            bool is_trap = true;
            if (Ly == Lx)
            {
                is_trap = false;
                list.Add(string.Format(""));
                list.Add(string.Format("If    ly <= lx    Then Effective Area of Floor Slab is Triangular."));
                Lx = _lx1 / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = lx/2 = {0:f3}/2 = {1}", _lx1, Lx));
            }
            else if (Ly < Lx)
            {
                is_trap = false;
                list.Add(string.Format("If        ly < lx         Then Effective Area of Slab is Trapezoidal."));

                Lx = Ly / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = ly/2 = {0:f3}/2 = {1}", Ly, Lx));
            }
            else
            {

                list.Add(string.Format("If        ly > lx         Then Effective Area of Slab is Trapezoidal."));

                Lx = _lx1 / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = lx/2 = {0:f3}/2 = {1}", _lx1, Lx));
            }


            //double dl_alpha = Lx / (2 * Ly);
            double dl_alpha = Lx / Ly;

            list.Add(string.Format(""));
            list.Add(string.Format("For Dead Load   α = lx / ly = {0:f3} / {1:f3} = {2:f3}", Lx, Ly, dl_alpha));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double DL_EUDL_BM1 = W_DL1 * Lx * (3.0 - 4.0 * dl_alpha * dl_alpha) / 6.0;
            double DL_Total_Load1 = W_DL1 * Lx * Ly * (1 - dl_alpha) / 2.0;

            if (is_trap)
            {
                DL_EUDL_BM1 = W_DL1 * Lx * (3.0 - 4.0 * dl_alpha * dl_alpha) / 6.0;
                DL_Total_Load1 = W_DL1 * Lx * Ly * (1 - dl_alpha) / 2.0;
                list.Add(string.Format("DL_EUDL_BM1 = Equivalent Uniformly Distributed Load for Bending Moment"));
                list.Add(string.Format("                = W_DL1 x lx x (3 - 4 x α^2) / 6"));
                list.Add(string.Format("                = {0:f3} x {1:f3} x (3 - 4 x {2:f3}^2) / 6", W_DL1, Lx, dl_alpha));
                list.Add(string.Format("                = {0:f3} kN/m", DL_EUDL_BM1));
                list.Add(string.Format(""));


                list.Add(string.Format("DL_Total_Load1 = W_DL1 x lx x ly x (1 - α) / 2"));
                list.Add(string.Format("                  = {0:f3} x {1:f3} x {2:f3} x (1 - {3:f3}) / 2", W_DL1, Lx, Ly, dl_alpha));
                list.Add(string.Format("                  = {0:f3} kN", DL_Total_Load1));
                list.Add(string.Format(""));
            }
            else
            {
                DL_EUDL_BM1 = W_DL1 * Lx / 3.0;
                DL_Total_Load1 = W_DL1 * Lx * Lx / 4;

                list.Add(string.Format("DL_EUDL_BM1 = Equivalent Uniformly Distributed Load for Bending Moment"));
                list.Add(string.Format("                = W_DL1 x lx / 3 "));
                list.Add(string.Format("                = {0:f3} x {1:f3} / 3 ", W_DL1, Lx));
                list.Add(string.Format("                = {0:f3} kN/m", DL_EUDL_BM1));
                list.Add(string.Format(""));

                list.Add(string.Format("DL_ Total _Load2 = W_DL1 x lx^2 / 4"));
                list.Add(string.Format("                 = {0:f3} x {1:f3}^2 / 4", W_DL1, Lx));
                list.Add(string.Format("                 = {0:f3} kN", DL_Total_Load1));

            }
            list.Add(string.Format(""));
            list.Add(string.Format("For Slab on Other Side of Longest Span of Beam"));
            list.Add(string.Format("-----------------------------------------------"));
            list.Add(string.Format(""));
            //l = _lx2;
            Lx = _lx2;
            list.Add(string.Format("Width of Floor Slab on other side of Beam = {0} m", Lx));

            double W_DL2 = W_DL1;
            double W_LL2 = W_LL1;


            list.Add(string.Format("Dead/Fixed Load on Floor Slab on other side of Beam = W_DL2 = {0} KN/Sq.m.", W_DL2));
            list.Add(string.Format("Live Load on Floor Slab on one side of Beam = W_LL2 = {0} KN/Sq.m.", W_LL2));
            list.Add(string.Format(""));


            list.Add(string.Format("Effective dimensions of Slab on other side of Beam = {0:f3}m x {1:f3}2m", Lx, Ly));
            list.Add(string.Format(""));
            list.Add(string.Format("lx = {0:f3}m, ly = {1:f3}m", Lx, Ly));

            is_trap = true;
            if (Ly == Lx)
            {
                is_trap = false;
                list.Add(string.Format("If    ly = lx    Then Effective Area of Floor Slab is Triangular."));

                Lx = _lx1 / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = lx/2 = {0:f3}/2 = {1}", _lx1, Lx));
            }
            else if (Ly < Lx)
            {
                list.Add(string.Format("If    ly < lx    Then Effective Area of Floor Slab is Triangular."));
                Lx = Ly / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = ly/2 = {0:f3}/2 = {1}", Ly, Lx));
            }
            else
            {
                list.Add(string.Format("If        ly > lx         Then Effective Area of Slab is Trapezoidal."));
                Lx = _lx2 / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = lx/2 = {0:f3}/2 = {1}", _lx2, Lx));
            }

            list.Add(string.Format(""));

            double DL_EUDL_BM2 = W_DL2 * Lx / 3.0;
            double DL_Total_Load2 = W_DL2 * Lx * Lx / 4.0;

            if (is_trap)
            {
                DL_EUDL_BM2 = W_DL2 * Lx * (3.0 - 4.0 * dl_alpha * dl_alpha) / 6.0;
                DL_Total_Load2 = W_DL2 * Lx * Ly * (1 - dl_alpha) / 2.0;
                list.Add(string.Format("DL_EUDL_BM2 = Equivalent Uniformly Distributed Load for Bending Moment"));
                list.Add(string.Format("                = W_DL1 x lx x (3 - 4 x α^2) / 6"));
                list.Add(string.Format("                = {0:f3} x {1:f3} x (3 - 4 x {2:f3}^2) / 6", W_DL2, Lx, dl_alpha));
                list.Add(string.Format("                = {0:f3} kN/m", DL_EUDL_BM2));
                list.Add(string.Format(""));


                list.Add(string.Format("DL_Total_Load1 = W_DL1 x lx x ly x (1 - α) / 2"));
                list.Add(string.Format("                  = {0:f3} x {1:f3} x {2:f3} x (1 - {3:f3}) / 2", W_DL2, Lx, Ly, dl_alpha));
                list.Add(string.Format("                  = {0:f3} kN", DL_Total_Load2));
                list.Add(string.Format(""));
            }
            else
            {
                DL_EUDL_BM2 = W_DL2 * Lx / 3.0;
                DL_Total_Load2 = W_DL2 * Lx * Lx / 4.0;
                list.Add(string.Format("DL_EUDL_BM2 = Equivalent Uniformly Distributed Load for Bending Moment"));
                list.Add(string.Format("                = W_DL2 x lx / 3 "));
                list.Add(string.Format("                = {0:f3} x {1:f3} / 3 ", W_DL2, Lx));
                list.Add(string.Format("                = {0:f3} kN/m", DL_EUDL_BM2));
                list.Add(string.Format(""));

                list.Add(string.Format("DL_ Total _Load2 = W_DL2 x lx^2 / 4"));
                list.Add(string.Format("                 = {0:f3} x {1:f3}^2 / 4", W_DL2, Lx));
                list.Add(string.Format("                 = {0:f3} kN", DL_Total_Load2));
                list.Add(string.Format(""));
            }



            list.Add(string.Format(""));
            list.Add(string.Format("For Live Load Calculations"));
            list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));

            double EUDL_LL = (DL_EUDL_BM1 + DL_EUDL_BM2) * W_LL1 / W_DL1;
            double Total_Load_LL = (DL_Total_Load1 + DL_Total_Load2) * W_LL1 / W_DL1;


            list.Add(string.Format("EUDL_LL = Equivalent Uniformly Distributed Load for Bending Moment"));
            list.Add(string.Format("              = (DL_EUDL_BM1 + DL_EUDL_BM2 ) x W_LL1 / W_DL1"));
            list.Add(string.Format("              = ({0:f3} + {1:f3}) x {2:f3} / {3:f3}", DL_EUDL_BM1, DL_EUDL_BM2, W_LL1, W_DL1));
            list.Add(string.Format("              = {0:f3} kN", EUDL_LL));
            list.Add(string.Format(""));


            list.Add(string.Format("Total_Load_LL = (DL_Total_Load1 + DL_Total_Load2) x W_LL1 / W_DL1"));
            list.Add(string.Format("              = ({0:f3} + {1:f3}) x {2:f3} / {3:f3}", DL_Total_Load1, DL_Total_Load2, W_LL1, W_DL1));
            list.Add(string.Format("              = {0:f3} kN", Total_Load_LL));
            list.Add(string.Format(""));




            list.Add(string.Format("Width of Beam Web = bw = {0}mm", bw));
            list.Add(string.Format("Depth of Beam Flange = Thickness of Slab = df = {0}mm", df));
            list.Add(string.Format("Unit weight of Concrete = γc = {0} kN/Cum", gamma_c));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(i) Dead Load"));
            list.Add(string.Format("--------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Left Weight of Beam"));
            list.Add(string.Format("Width of Beam Web = bw = {0}mm", bw));

            double dw = D - df;
            list.Add(string.Format("Depth of Beam Web = dw = Overall Depth - Thickness of Slab"));
            list.Add(string.Format("                                = D - df"));
            list.Add(string.Format("                                = {0} - {1}", D, df));
            list.Add(string.Format("                                = {0}mm", dw));
            list.Add(string.Format(""));

            double SELF_WEIGHT = bw / 1000.0 * dw / 1000.0 * gamma_c;
            list.Add(string.Format("Self Weight of Beam = SELF_WEIGHT = bw x dw x γc "));
            list.Add(string.Format("                                  = {0:f3} x {1:f3} x {2}", bw / 1000, dw / 1000, gamma_c));
            list.Add(string.Format("                                  = {0:f3} kN/m", SELF_WEIGHT));
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) Wall Load"));
            list.Add(string.Format("----------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Wall Thickness = tw = {0}mm", tw));
            list.Add(string.Format("Plaster Thickness = tp = {0} mm", tp));
            list.Add(string.Format("Height of Wall = hw = {0} m", hw));
            list.Add(string.Format("Unit weight of Wall =  γbw = {0} kN/Cu.m", gamma_bw));
            list.Add(string.Format("Weight reduction factor for Doors & Windows = fact_wall = {0}", face_wall));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Wall Load"));
            list.Add(string.Format(""));
            list.Add(string.Format("= WALL_WEIGHT "));


            double WALL_WEIGHT = ((tw + 2 * tp) / 1000) * hw * gamma_bw * face_wall;
            list.Add(string.Format("= ((tw+2xtp)/1000) x hw x γbw x fact_wall"));
            list.Add(string.Format("= (({0}+2x{1})/1000) x {2} x {3} x {4}", tw, tp, hw, gamma_bw, face_wall));
            list.Add(string.Format("= {0:f3} kN/m", WALL_WEIGHT));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iii) Total EUDL for Dead Load = EUDL_DL"));
            list.Add(string.Format(""));

            double EUDL_DL = DL_EUDL_BM1 + DL_EUDL_BM2 + SELF_WEIGHT + WALL_WEIGHT;
            list.Add(string.Format("= DL_EUDL_BM1 + DL_EUDL_BM2 + SELF_WEIGHT + WALL_WEIGHT"));
            list.Add(string.Format("= {0:f3} + {1:f3} + {2:f3} + {3:f3}", DL_EUDL_BM1, DL_EUDL_BM2, SELF_WEIGHT, WALL_WEIGHT));
            list.Add(string.Format("= {0:f3} kN/m", EUDL_DL));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iv) Total Load for Dead Load = Total_Load_DL"));
            list.Add(string.Format(""));

            double Total_Load_DL = DL_Total_Load1 + DL_Total_Load2 + SELF_WEIGHT * l + WALL_WEIGHT * l;
            list.Add(string.Format("= DL_Total_Load1 + DL_Total_Load2+ SELF_WEIGHT x l + WALL_WEIGHT x l"));
            list.Add(string.Format("= {0:f3} + {1:f3} + {2:f3} x {3:f3} + {4:f3} x {3:f3}", DL_Total_Load1, DL_Total_Load2, SELF_WEIGHT, l, WALL_WEIGHT));
            list.Add(string.Format("= {0:f3} kN", Total_Load_DL));
            list.Add(string.Format(""));
            #endregion STEP 1 : LOAD CALCULATIONS

            #region STEP 2 : CHARACTERISTIC LOADS

            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------"));
            //list.Add(string.Format("STEP {0}.2 : CHARACTERISTIC LOADS", step));
            list.Add(string.Format("STEP 2 : CHARACTERISTIC LOADS", step));
            list.Add(string.Format("---------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("        EUDL for Dead Load = EUDL_DL = {0:f3} kN/m", EUDL_DL));
            list.Add(string.Format("        EUDL for Live Load = EUDL_LL = {0:f3} kN/m", EUDL_LL));
            list.Add(string.Format(""));
            list.Add(string.Format("        Total Load for Dead Load = Total_Load_DL = {0:f3} kN", Total_Load_DL));
            list.Add(string.Format("        Total Load for Live Load = Total_Load_LL = {0:f3} kN", Total_Load_LL));
            list.Add(string.Format(""));

            #endregion STEP2 : CHARACTERISTIC LOADS

            #region   STEP 3 : CALCULATION FOR BENDING MOMENT
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------------------"));
            //list.Add(string.Format("STEP {0}.3 : CALCULATION FOR BENDING MOMENT", step));
            list.Add(string.Format("STEP 3 : CALCULATION FOR BENDING MOMENT", step));
            list.Add(string.Format("---------------------------------------------"));
            list.Add(string.Format(""));

            double fact_LL = LL_Fact;
            double fact_DL = DL_Fact;



            list.Add(string.Format("Dead Load factor = fact_DL = {0}", fact_DL));
            list.Add(string.Format("Live Load factor = fact_LL = {0}", fact_LL));
            list.Add(string.Format(""));
            list.Add(string.Format("Characteristic Dead Load = EUDL_DL = {0:f3} KN/m", EUDL_DL));
            list.Add(string.Format(""));

            double Design_DL = EUDL_DL * fact_DL;
            list.Add(string.Format("Factored Dead Load = Design_DL = EUDL_DL x fact_DL "));
            list.Add(string.Format("                             = {0:f3} x {1}", EUDL_DL, fact_DL));
            list.Add(string.Format("                             = {0:f3} KN/m", Design_DL));
            list.Add(string.Format(""));
            list.Add(string.Format("Characteristic Live Load = EUDL_LL = {0:f3} KN/m", EUDL_LL));
            list.Add(string.Format(""));


            double Design_LL = EUDL_LL * fact_LL;
            list.Add(string.Format("Factored Live Load = Design_LL = EUDL_LL x fact_LL"));
            list.Add(string.Format("                             = {0:f3} x {1}", EUDL_LL, fact_LL));
            list.Add(string.Format("                             = {0:f3} KN/m", Design_LL));
            list.Add(string.Format(""));

            double EUDL_FL = Design_DL;
            list.Add(string.Format("Fixed Load EUDL = EUDL_FL = Design_DL = {0:f3} KN/m", EUDL_FL));
            list.Add(string.Format(""));

            double EUDL_NF = EUDL_LL * fact_LL + EUDL_DL * fact_DL;

            list.Add(string.Format("Not Fixed Load EUDL = EUDL_NF = EUDL_LL x fact_LL + EUDL_DL x fact_DL"));
            list.Add(string.Format("                              = {0:f3} x {1} + {2:f3} x {3}", EUDL_LL, fact_LL, EUDL_DL, fact_DL));
            list.Add(string.Format("                              = {0:f3} KN/m", EUDL_NF));
            list.Add(string.Format(""));

            double BM1 = (EUDL_NF * l * l) / 10.0 + (EUDL_FL * l * l) / 12.0;

            list.Add(string.Format("BM1 = Bending Moments in End Span Centre = (EUDL_NF x l^2)/10 + (EUDL_FL x l^2)/12"));
            list.Add(string.Format("                                         = ({0:f3} x {1:f3}^2)/10 + ({2:f3} x {1:f3}^2)/12", EUDL_NF, l, EUDL_FL));
            list.Add(string.Format("                                         = {0:f3} kN-m", BM1));
            list.Add(string.Format(""));

            double BM2 = (EUDL_NF * l * l) / 12.0 + (EUDL_FL * l * l) / 24.0;

            list.Add(string.Format("BM2 = Bending Moments in Inside Span Centre = (EUDL_NF x l^2)/12 + (EUDL_FL x l^2)/24"));
            list.Add(string.Format("                                            = ({0:f3} x {1:f3}^2)/12 + ({2:f3} x {1:f3}^2)/24", EUDL_NF, l, EUDL_FL));
            list.Add(string.Format("                                            = {0:f3} kN-m", BM2));
            list.Add(string.Format(""));


            double BM_Sag = Math.Max(BM1, BM2);
            list.Add(string.Format("Maximum Sag Bending Moment of BM1 & BM2 = BM_Sag = {0:f3} kN-m", BM_Sag));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double BM3_1 = -((EUDL_NF * l * l) / 9 + (EUDL_FL * l * l) / 10);


            list.Add(string.Format("BM3 (1)  Bending Moments in Penultimate End Supports = - [(EUDL_NF x l^2)/9 + (EUDL_FL x l^2)/10]"));
            list.Add(string.Format("                                                     = - [({0:f3} x {1:f3}^2)/9 + ({2:f3} x {1:f3}^2)/10]", EUDL_NF, l, EUDL_FL));
            list.Add(string.Format("                                                     = {0:f3} KNm", BM3_1));
            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results,"));
            //list.Add(string.Format("BM3 (2)  Maximum Bending Moment. in Penultimate Supports = **** kNm (Take Absolute value)"));

            //double BM3_2 = -90.23;
            //double BM3_2 = pen_ult_max_moment[0];
            double BM3_2 = AM2;

            list.Add(string.Format("BM3 (2)  Maximum Bending Moment. in Penultimate Supports = AM2 = {0:f3} kN-m", BM3_2));
            list.Add(string.Format(""));

            double BM3 = Math.Max(Math.Abs(BM3_1), Math.Abs(BM3_2));
            list.Add(string.Format("BM3 = (Absolute Maximum value of BM3 (1) and BM3 (2)) = -{0:f3} KN-m ", BM3));
            list.Add(string.Format(""));

            double BM4_1 = -((EUDL_NF * l * l) / 9.0 + (EUDL_FL * l * l) / 12.0);
            list.Add(string.Format("BM4 (1) Bending Moments in Inside Supports = - [(EUDL_NF x l^2)/9 + (EUDL_DL x l^2)/12]"));
            list.Add(string.Format("                                           = - [({0:f3} x {1:f3}^2)/9 + ({2:f3} x {1:f3}^2)/12]", EUDL_NF, l, EUDL_FL));
            list.Add(string.Format("                                           = {0:f3} KN-m", BM4_1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results,"));


            //double BM4_2 = max_moment[2];
            double BM4_2 = AM3;


            list.Add(string.Format("BM4 (2) Maximum Bending Moments in Inside Supports = AM3 = -{0:f3} kN-m", BM4_2));
            list.Add(string.Format(""));

            double BM4 = Math.Max(Math.Abs(BM4_1), Math.Abs(BM4_2));
            list.Add(string.Format("BM4 = (Absolute Maximum value of BM4 (1) and BM4 (2))) = -{0:f3} kN-m.", BM4));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double BM_hog = Math.Max(Math.Abs(BM3), Math.Abs(BM4));
            list.Add(string.Format("Taking absolute maximum value of BM3 and BM4,"));
            list.Add(string.Format("Maximum Hogging Bending Moments = BM_hog = -{0:f3} kN-m", BM_hog));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion     STEP 3 : CALCULATION FOR BENDING MOMENT

            #region STEP 4 : CALCULATION FOR SHEAR FORCE
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------------"));
            //list.Add(string.Format("STEP {0}.4 : CALCULATION FOR SHEAR FORCE ", step));
            list.Add(string.Format("STEP 4 : CALCULATION FOR SHEAR FORCE ", step));
            list.Add(string.Format("-----------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(i) Shear force at End Support"));
            list.Add(string.Format(""));

            double V1_1 = Total_Load_DL * 0.4 + (Total_Load_DL * 0.5 + Total_Load_LL * 1.5) * 0.45;
            list.Add(string.Format("= Total_Load_DL x 10.4 + [Total_Load_DL x 0.5 + Total_Load_LL x 1.5] x 0.45"));
            list.Add(string.Format("= {0:f3} x 0.4 + [{0:f3} x 0.5 + {1:f3} x 1.5] x 0.45", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} kN", V1_1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            //double V1_2 = 45.02;
            //double V1_2 = StructureAnalysis.GetJoint_ShearForce(end_support);
            double V1_2 = AV1;
            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Shear Force at Joints at either End Supports = AV1 = {0:f3} kN", V1_2));
            list.Add(string.Format(""));

            double V1 = Math.Max(V1_1, V1_2);
            list.Add(string.Format(""));
            list.Add(string.Format("V1 = Higher of the above two values =  {0:f3} kN", V1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) Shear Force on outer side at Penultimate Supports"));
            list.Add(string.Format(""));

            double V2_1 = Total_Load_DL * 1.5 * 0.6 + Total_Load_LL * 1.5 * 0.6;

            list.Add(string.Format("= Total_Load_DL x 1.5 x 0.6 + Total_Load_LL x 1.5 x 0.6"));
            list.Add(string.Format("= {0:f3} x 1.5 x 0.6 + {1:f3} x 1.5 x 0.6", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} KN", V2_1));
            list.Add(string.Format(""));


            //double V2_2 = 75.70;
            //double V2_2 = StructureAnalysis.GetJoint_ShearForce(pen_ultimate);
            double V2_2 = AV2;
            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum Shear Force at Joints at either Penultimate Supports = AV2 = {0:f3} KN", V2_2));
            list.Add(string.Format(""));


            double V2 = Math.Max(V2_1, V2_2);
            list.Add(string.Format("V2 = Higher of the above two values = {0:f3} KN", V2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iii) Shear Force on Inner side at Penultimate Supports"));
            list.Add(string.Format(""));

            double V3_1 = Total_Load_DL * 0.55 + (Total_Load_DL * 0.5 + Total_Load_LL * 1.5) * 0.6;

            list.Add(string.Format("= Total_Load_DL x 0.55 + [Total_Load_DL x 0.5 + Total_Load_LL x 1.5] x 0.6"));
            list.Add(string.Format("= {0:f3} x 0.55 + [{0:f3} x 0.5 + {1:f3} x 1.5] x 0.6", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} KN", V3_1));
            list.Add(string.Format(""));

            //double V3_2 = 12.023;
            //double V3_2 = StructureAnalysis.GetJoint_ShearForce(inner_support);
            double V3_2 = AV3;

            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum Shear Force at Joints at Inner side = AV3 = {0:f3} KN", V3_2));
            list.Add(string.Format(""));

            double V3 = Math.Max(V3_1, V3_2);
            list.Add(string.Format("V3 = Higher of the above two values = {0:f3} KN", V3));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iv) Shear Force at Inner Supports"));
            list.Add(string.Format(""));

            double V4_1 = Total_Load_DL * 0.5 + (Total_Load_DL * 0.5 + Total_Load_LL * 1.5) * 0.6;
            list.Add(string.Format("= Total_Load_DL x 0.5 + [Total_Load_DL x 0.5 + Total_Load_LL x 1.5] x 0.6"));
            list.Add(string.Format("= {0:f3} x 0.5 + [{0:f3} x 0.5 + {1:f3} x 1.5] x 0.6", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} KN", V4_1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double V4_2 = StructureAnalysis.GetJoint_ShearForce(inner_support);

            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum Shear Force at Joint at Inner Supports = {0:f3} KN", V4_2));
            list.Add(string.Format(""));

            double V4 = Math.Max(V4_1, V4_2);
            list.Add(string.Format("V4 = Higher of the above two values = {0:f3} KN", V4));
            list.Add(string.Format(""));

            #endregion STEP 4 : CALCULATION FOR SHEAR FORCE

            IS_DESIGN_OK = true;

            #region STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("----------------------------------------------------------"));
            ////list.Add(string.Format("STEP {0}.5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM ", step));
            //list.Add(string.Format("STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM ", step));
            //list.Add(string.Format("        (D = Thickness of Floor Slab + Depth of Beam Web)"));
            //list.Add(string.Format("----------------------------------------------------------"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //MyList
            //double Mu = -239.35;
            //double Mu = max_moment[2];
            double Mu = AM4;
            //list.Add(string.Format("From Analysis Results,"));
            //list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = AM4 = -{0:f3} kN-m ", Mu));
            //list.Add(string.Format(""));
            //list.Add(string.Format("50% of Hogging Moment will be taken by Concrete and "));
            //list.Add(string.Format("50% of Hogging Bending Moment will be taken by Compression Steel,"));
            //list.Add(string.Format(""));
            ////list.Add(string.Format("Effective Depth = d"));
            //list.Add(string.Format("Effective Depth = d >= [Mu / 0.138 x fck x b]^0.5"));
            double Q = 0.138 * fck;

            double d = Math.Pow((Math.Abs(Mu) / 0.138 * fck * b), 0.5);

            d = Math.Pow((Math.Abs(Mu) / Q * 1000), 0.5);


            ////d = Math.Pow((Math.Abs(Mu * 1000000) / 0.138 * fck * b), 0.5);


            ////d = Math.Pow((Math.Abs(Mu * 1000000) / 0.138 * fck * 1000), 0.5);

            //list.Add(string.Format("                    >= [{0:f3} / 0.138 x {1} x 1000]^0.5", Mu, fck));
            //list.Add(string.Format("                    >= {0:f3} mm", d));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Overall Depth = D"));


            double _D = d + (Bar_dia1 / 2) + cover;
            //list.Add(string.Format("D = d + (Bar_dia / 2) + Cover"));
            //list.Add(string.Format("  = {0:f3} + ({1} / 2) + {2}", d, Bar_dia1, cover));

            //if (_D < D)
            //{
            //    if (IS_DESIGN_OK) IS_DESIGN_OK = true;

            //    list.Add(string.Format("  = {0:f3} mm < Provided D = {1} mm,   Hence OK", _D, D));
            //}
            //else
            //{
            //    list.Add(string.Format("  = {0:f3} mm > Provided D = {1} mm,   Hence NOT OK", _D, D));
            //    if (IS_DESIGN_OK) IS_DESIGN_OK = false;
            //}
            //list.Add(string.Format(""));

            //double V = 160.048;
            double V = Math.Max(Math.Max(V1, V2), Math.Max(V3, V4));
            //list.Add(string.Format("Maximum Shear Force at Support = V = {0:f3} KN", V));
            //list.Add(string.Format(""));


            //double tau_v = 2.8; // from Table

            double tau_v = Tables.Permissible_Shear_Stress(0.5, (int)fck, ref kStr);

            //double Asc1 = Math.Abs(V) / (b * d);

            //list.Add(string.Format("Shear Stress = V, For Concrete Grade M{0}, Permissible Shear Stress = τv = {1} N/Sq.m.", fck, tau_v));
            //list.Add(string.Format(""));
            //list.Add(string.Format("τv = V / (b x d)"));
            //list.Add(string.Format(" d = V / (b x τv)"));
            ////list.Add(string.Format("   = (160.408 x 1000) / (1000 x (2.8/2))"));
            ////list.Add(string.Format("   = ({0:f3} x 1000) / (1000 x ({1:f3}/2))", V, tau_v));
            //list.Add(string.Format("   = ({0:f3} x 1000) / (1000 x ({1:f3}))", V, tau_v));

            //double _d = V * 1000.0 / (1000 * tau_v / 2.0);
            double _d = V * 1000.0 / (1000 * tau_v);

            //list.Add(string.Format("   = {0:f3} mm", _d));
            //list.Add(string.Format(""));

            double _D2 = _d + Bar_dia1 / 2.0 + cover;
            //list.Add(string.Format("Overall Depth = D = d + Bar_dia / 2 + Cover"));
            //list.Add(string.Format("                  = {0:f3} + ({1} / 2) + {2}", _d, Bar_dia1, cover));
            //list.Add(string.Format("                  = {0:f3} mm", _D));


            //if (_D2 < D)
            //{
            //    list.Add(string.Format("                  = {0:f3} mm < Provided D = {1} mm,   Hence OK", _D2, D));
            //}
            //else
            //{
            //    if (IS_DESIGN_OK) IS_DESIGN_OK = false;
            //    list.Add(string.Format("                  = {0:f3} mm > Provided D = {1} mm,   Hence NOT OK", _D2, D));
            //}

            //list.Add(string.Format(""));
            //list.Add(string.Format(""));

            double D_prov = Math.Max(_D, _D2);
            //list.Add(string.Format("Considering above two Overall Depths of {0:f3}mm & {1:f3}mm", _D, _D2));


            D_prov = ((int)D_prov) / 100.0;


            double sd = (int)((D_prov - ((int)D_prov)) * 100);

            if (sd > 50)
            {
                sd = 100;
            }
            else
            {
                sd = 50;

            }
            D_prov = (((int)D_prov) * 100 + sd);

            list.Add(string.Format("Provide Overall Depth = D = {0}mm", D));
            list.Add(string.Format("Effective Depth = d = D - (Bar_dia / 2) - cover"));

            double eff_d = D - Bar_dia1 / 2.0 - cover;
            list.Add(string.Format("                    = {0} - ({1}/2) - {2}", D, Bar_dia1, cover));
            list.Add(string.Format("                    = {0:f2} mm", eff_d));
            list.Add(string.Format(""));

            #endregion STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM

            #region STEP 5 : CALCULATION FOR WIDTH OF FLANGE
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------"));
            //list.Add(string.Format("STEP {0}.6 : CALCULATION FOR WIDTH OF FLANGE", step));
            //list.Add(string.Format("STEP 6 : CALCULATION FOR WIDTH OF FLANGE", step));
            list.Add(string.Format("STEP 5 : CALCULATION FOR WIDTH OF FLANGE", step));
            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format(""));

            list.Add(string.Format("Width of Flange = bf"));
            list.Add(string.Format("                = (lo/6) + bw + 6 x df"));

            double lo = 0.7 * l * 1000;
            double bf = (lo / 6) + bw + 6 * df;

            list.Add(string.Format("Effective Span = lo = 0.7 x (Span Length of Beam = l)"));
            list.Add(string.Format("                    = 0.7 x {0}", l * 1000));
            list.Add(string.Format("                    = {0:f0} mm", lo));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Width of Beam Stem/Web = bw = {0} mm", bw));
            list.Add(string.Format("Depth of RCC Slab = df = {0} mm", df));
            list.Add(string.Format(""));

            list.Add(string.Format("Width of Flange = bf = (Lo/6) + bw + 6 x df"));
            list.Add(string.Format("                     = ({0}/6) + {1} + 6 x {2}", lo, bw, df));
            list.Add(string.Format("                     = {0:f1} mm", bf));
            list.Add(string.Format(""));
            #endregion STEP 6 : CALCULATION FOR WIDTH OF FLANGE

            #region STEP 6 : CAPACITY CALCULATION FOR BENDING MOMENT

            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.7 : CAPACITY CALCULATION FOR BENDING MOMENT", step));
            list.Add(string.Format("STEP 6 : CAPACITY CALCULATION FOR BENDING MOMENT", step));
            list.Add(string.Format("-----------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Capacity of Beam Section to take Bending Moment"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double M_ultimate = 0.138 * fck * bf * eff_d * eff_d / 1000000;
            list.Add(string.Format("M_ultimate = Q x bf x d^2    [ Q = 0.138 x fck]"));
            list.Add(string.Format(""));
            list.Add(string.Format("           = 0.138 x {0} x {1:f2} x {2:f2}^2 / 10^6", fck, bf, eff_d));
            if (M_ultimate > BM_Sag)
                list.Add(string.Format("           = {0:f3} kN-m > BM_Sag = {1:f3} kN-m", M_ultimate, BM_Sag));
            else
                list.Add(string.Format("           = {0:f3} kN-m < BM_Sag = {1:f3} kN-m", M_ultimate, BM_Sag));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion STEP 7 : CAPACITY CALCULATION FOR BENDING MOMENT

            #region STEP 7 : CALCULATION FOR REINFORCEMENT STEEL

            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.8 : CALCULATION FOR REINFORCEMENT STEEL AT END SPAN", step));
            //list.Add(string.Format("STEP 8 : CALCULATION FOR REINFORCEMENT STEEL AT END SPAN", step));
            list.Add(string.Format("STEP 7 : REINFORCEMENT STEEL AT SPAN BOTTOM", step));
            list.Add(string.Format("-------------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));
            //list.Add(string.Format("------------------------------"));
            //list.Add(string.Format("STEP {0}.8.1 : END SPAN", step));
            //list.Add(string.Format("-------------------------------"));
            list.Add(string.Format(""));

            double Mult = BM1;
            //list.Add(string.Format("Mult = BM1 = {0:f3} KNm", Mult));
            list.Add(string.Format("Mu = BM1 = {0:f3} KNm", Mult));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j"));
            list.Add(string.Format(""));

            double j = 0.5 + Math.Sqrt(Math.Abs(0.25 - Mult * 1000000 / (0.87 * fck * bf * eff_d * eff_d)));
            //list.Add(string.Format("j = 0.5 + √[0.25 - Mult x 10^6 / (0.87 x fck x bf x d^2)]"));
            list.Add(string.Format("j = 0.5 + √[0.25 - Mu x 10^6 / (0.87 x fck x bf x d^2)]"));
            list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3}^2)]", Mult, fck, bf, eff_d));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("From Stress consideration,"));


            double Xv = eff_d * (1 - j) / 0.420;
            list.Add(string.Format("Xu = d x (1 - j) / 0.42"));
            list.Add(string.Format("   = {0} x (1 - {1:f3}) / 0.42", eff_d, j));

            if (Xv < df)
                list.Add(string.Format("   = {0:f3} mm < df = {1:f3} mm", Xv, df));
            else
                list.Add(string.Format("   = {0:f3} mm > df = {1:f3} mm", Xv, df));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("So, the neutral axis is within the flange of Beam Section."));
            list.Add(string.Format(""));

            double Ast = Mult * 1000000 / (0.87 * fy * j * eff_d);
            list.Add(string.Format("Area of Steel required = Ast = Mu x 10^6 / (0.87 x fy x j x d)"));
            //list.Add(string.Format("Area of Steel required = Ast = Mult x 10^6 / (0.87 x fy x j x d)"));
            list.Add(string.Format("                             = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mult, fy, j, eff_d));
            list.Add(string.Format("                             = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));

            double bar_nos = 3;
            double Ast1 = Math.PI * Bar_dia1 * Bar_dia1 / 4;
            //bar_nos = Ast / Ast1;


            bar_nos = (int)(Ast / Ast1);

            bar_nos = bar_nos + 1;

            if (bar_nos < 2)
                bar_nos = 2;

            if (bar_nos % 2 != 0)
                bar_nos = bar_nos + 1;// bar nos allways an even number

            bnos_1 = (int)bar_nos;


            Ast1 = Ast1 * bar_nos;



            Steel_Reinforcement ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[1] in End Span Bottom";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = Bar_dia1;
            ssr.Length = len;
            BOQ.Steel_Reinforcement.Add(ssr);



            //list.Add(string.Format("Let us provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia1));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as End Span Bottom Steel (Ast = {2:f3} Sq.mm.)", bar_nos, Bar_dia1, Ast1));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[1] in End Span Bottom."));
            //list.Add(string.Format(""));

            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia = d1 = {0} mm.", Bar_dia1));
            list.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Bottom, (Ast = {2:f3} Sq.mm)", bar_nos, Bar_dia1, Ast1));
            list.Add(string.Format(""));

            //list.Add(string.Format("Ast1 = {0:f3} Sq.mm.", Ast1));
            #endregion STEP 8 : CALCULATION FOR REINFORCEMENT STEEL

            #region STEP 9 : INSIDE PENULTIMATE SPAN

            //list.Add(string.Format(""));
            //list.Add(string.Format("-------------------------------------"));
            ////list.Add(string.Format("STEP {0}.9 : INSIDE PENULTIMATE SPAN", step));
            //list.Add(string.Format("STEP 9 : INSIDE PENULTIMATE SPAN", step));
            //list.Add(string.Format("-------------------------------------"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            //list.Add(string.Format("Steel Grade = fy = {0}", fy));
            //list.Add(string.Format(""));

            //Mult = BM2;
            //list.Add(string.Format("Mult = BM2 = {0:f3} KNm", Mult));
            //list.Add(string.Format(""));

            //j = 0.5 + Math.Sqrt(Math.Abs(0.25 - Mult * 1000000 / (0.87 * fck * bf * eff_d * eff_d)));

            //list.Add(string.Format("j = 0.5 + √[0.25 - Mult x 10^6 / (0.87 x fck x bf x d^2)]"));
            //list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3}^2)]", Mult, fck, bf, eff_d));
            //list.Add(string.Format("  = {0:f3}", j));
            //list.Add(string.Format(""));

            //Ast = Mult * 1000000 / (0.87 * fy * j * eff_d);

            //list.Add(string.Format("Area of Steel required = Ast = Mult x 10^6 / (0.87 x fy x j x d)"));
            //list.Add(string.Format("                             = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mult, fy, j, eff_d));
            //list.Add(string.Format("                             = {0:f3} Sq.mm.", Ast));
            //list.Add(string.Format(""));

            //double Ast2 = Math.PI * Bar_dia1 * Bar_dia1 / 4;

            //bar_nos = (int)(Ast / Ast2);
            //bar_nos = bar_nos + 1;

            //if (bar_nos < 2)
            //    bar_nos = 2;

            //Ast2 = Ast2 * bar_nos;


            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "B_AST[2] in Inside Span Bottom";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = Bar_dia1;
            //if(inn_len == 0)
            //    ssr.Length = pen_ult_len + inn_len;
            //else
            //    ssr.Length = inn_len;

            //BOQ.Steel_Reinforcement.Add(ssr);


            //list.Add(string.Format("Let us provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia1));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inside Span Bottom Steel (Ast = {2:f3} Sq.mm.)", bar_nos, Bar_dia1, Ast2));
            ////list.Add(string.Format("Ast2 = {0:f3} Sq.mm.", Ast2));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[2] in Inside Span Bottom."));

            //#endregion STEP 9 : INSIDE PENULTIMATE SPAN

            //#region STEP 10 : REINFORCEMENT AT END SUPPORTS

            //list.Add(string.Format(""));
            //list.Add(string.Format("---------------------------------------------------------------"));
            ////list.Add(string.Format("STEP {0}.10 : REINFORCEMENT AT PENULTIMATE END SUPPORTS", step));
            //list.Add(string.Format("STEP 10 : REINFORCEMENT AT PENULTIMATE END SUPPORTS", step));
            //list.Add(string.Format("---------------------------------------------------------------"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            //list.Add(string.Format("Steel Grade = fy = {0}", fy));
            //list.Add(string.Format(""));
            //list.Add(string.Format("(i) Bottom Steel Reinforcement at Penultimate End Support "));
            //list.Add(string.Format(""));
            ////list.Add(string.Format("From Analysis Results,"));

            ////double Mul = 143.714;
            ////double Mul = BM_hog;
            //double Mul = AM2;
            ////list.Add(string.Format("Maximum +ve Bending Moment at End Supports = Mu1 = {0:f3} KNm  (Member B1 & B6 and Joints J1 and J7)", Mul));
            //list.Add(string.Format("Maximum Bending Moment at Penultimate End Supports = AM2 = {0:f3} KN-m ", Mul));
            //list.Add(string.Format(""));

            //j = 0.5 + Math.Sqrt(Math.Abs(0.25 - Mul * 1000000 / (0.87 * fck * bf * eff_d * eff_d)));
            ////list.Add(string.Format("j = 0.5 + √[0.25 - Mu1 x 10^6 / (0.87 x fck x bf x d^2)]"));
            ////list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f2} x {3}^2)]", Mul, fck, bf, eff_d));
            //////list.Add(string.Format("  = 0.974"));
            ////list.Add(string.Format("  = {0:f3}", j));
            //list.Add(string.Format(""));


            //Ast = Mul * 1000000 / (0.87 * fy * j * eff_d);
            ////list.Add(string.Format("Area of Steel required = Ast = Mu1 x 10^6 / (0.87 x fy x j x d)"));
            ////list.Add(string.Format("                             = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mul, fy, j, eff_d));
            ////list.Add(string.Format("                             = {0:f3} Sq.mm.", Ast));
            ////list.Add(string.Format(""));
            //double Ast3 = (Math.PI * Bar_dia1 * Bar_dia1 / 4.0);




            //bar_nos = (int)(Ast / Ast3);
            //bar_nos = bar_nos + 1;

            //if (bar_nos < 2) bar_nos = 2;

            //Ast3 = Ast3 * bar_nos;



            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "B_AST[3] at End Support Bottom";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = Bar_dia1;
            //ssr.Length = len;
            //BOQ.Steel_Reinforcement.Add(ssr);


            //list.Add(string.Format("Provide {0} Nos {1} mm dia bars as Ast1 as bottom Steel, (Ast = {2:f3} Sq.mm)", bar_nos, Bar_dia1, Ast3));
            ////list.Add(string.Format("Ast_provided = {0}Y' - {1} at End Support Bottom Steel", bar_nos, Bar_dia1));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[3] at End Support Bottom."));

            ////list.Add(string.Format("Ast3 = {0:f3} Sq.mm.", Ast3));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("(ii) Top Steel Reinforcement at Penultimate End Support:"));
            //list.Add(string.Format(""));

            ////Mu = -188.72;
            ////Mu = max_moment[1];
            //Mu = BM_hog;
            ////Mu = AM2;
            ////Mu = BM3;
            ////list.Add(string.Format("From Analysis Results,"));
            ////list.Add(string.Format("Maximum -ve Bending Moment at End Supports = Mu  = -{0} kN-m  (Member B1 & B6 and Joints J1 and J7)", Mu));
            ////list.Add(string.Format("Maximum Bending Moment at Penultimate End Supports  = Mu = AM2  = -{0:f3} kN-m", Mu));
            //list.Add(string.Format("Maximum Bending Moment at Penultimate End Supports  = Mu = BM3  = -{0:f3} kN-m", Mu));
            //list.Add(string.Format(""));

            //list.Add(string.Format("Mul = (0.138 x fck x bw / d^2)/10^6"));

            //Mul = ((0.138 * fck * bw) * (eff_d * eff_d) / 1000000);
            //list.Add(string.Format("    = (0.138 x {0} x {1} x {2}^2)/10^6", fck, bw, eff_d));
            //list.Add(string.Format("    = {0:f3} kN-m", Mul));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Now, Tension Steel at top at Penultimate End Supports are calculated"));
            //double d_dash = cover + Bar_dia1 / 2.0;
            //list.Add(string.Format("d' = Cover + Bar_dia / 2.0 = {0} + {1}/2 = {2} mm", cover, Bar_dia1, d_dash));
            //list.Add(string.Format(""));

            //double Xu = 0.48 * eff_d;
            //list.Add(string.Format("Xu = 0.48 x d"));
            //list.Add(string.Format(""));

            //j = (1 - 0.42 * 0.48);
            //list.Add(string.Format("  j = (d - 0.42 x Xu) / d"));
            //list.Add(string.Format("    = (d - 0.42 x 0.48 x d)/d", Xv));
            //list.Add(string.Format("    = (1 - 0.42 x 0.48) = {0:f3}", j));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Ast = [Mul x 10^6 / (0.87 x fy x j x d)] + [(Mu - Mu1) x 10^6 / (0.87 x fy - d’)]"));

            //Ast = (Mul * 1000000 / (0.87 * fy * j * eff_d)) + (Math.Abs(Mu - Mul) * 1000000 / (0.87 * fy * (eff_d - d_dash)));
            //list.Add(string.Format("    = [{0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})]", Mul, fy, j, eff_d));
            //list.Add(string.Format("      + [({0:f3} - {1:f3}) x 10^6 / (0.87 x {2} x  ({3} - {4}))]", Mu, Mul, fy, eff_d, d_dash));
            //list.Add(string.Format(""));
            //list.Add(string.Format("    = {0:f3} Sq.mm.", Ast));
            //list.Add(string.Format(""));

            //double Ast4 = Math.PI * Bar_dia2 * Bar_dia2 / 4.0;

            //bar_nos = (int)(Ast / Ast4);
            //bar_nos = bar_nos + 1;

            //if (bar_nos < 2) bar_nos = 2;
            //Ast4 = Ast4 * bar_nos;


            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "B_AST[4] at Penultimate End Supports (Top)";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = Bar_dia2;
            //ssr.Length = len;
            //BOQ.Steel_Reinforcement.Add(ssr);

            //list.Add(string.Format(" Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia2));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as End Support Top Steel (Ast = {2:f3} Sq.mm.)", bar_nos, Bar_dia2, Ast4));
            ////list.Add(string.Format("Ast4 = {0:f3} Sq.mm.", Ast4));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[4], at Penultimate End Supports (Top)."));
            //list.Add(string.Format(""));
            //list.Add(string.Format("(iii) Bottom Steel Reinforcement at Penultimate End Support"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("d' =  Bardia / 2 + Cover = ({0}/2) + {1} = {2} mm", Bar_dia1, cover, d_dash));
            //list.Add(string.Format(""));

            //double epsylon = 0.0035 * (0.48 - d_dash / eff_d) / 0.48;
            //list.Add(string.Format("e = Stress in Compressive Steel = 0.0035 x (0.48 - d’ / d) / 0.48 (From Formula)"));
            //list.Add(string.Format("                                = 0.0035 x (0.48 - {0:f3} / {1}) / 0.48", d_dash, eff_d));
            //list.Add(string.Format("                                = {0:f6}", epsylon));
            //list.Add(string.Format(""));


            //double sigma_c1 = 361 - 12.95 * Math.Pow((3.804 - epsylon * 1000), 2.0);
            //list.Add(string.Format("σc_1 = Approximate Steel in Compression Steel "));
            //list.Add(string.Format(""));
            //list.Add(string.Format("     = 361 - 12.95 x (3.804 - e x 10^3)^2       (From Formula)"));
            //list.Add(string.Format("     = 361 - 12.95 x (3.804 - {0:f6} x 10^3)^2", epsylon));
            //list.Add(string.Format("     = {0:f3} N/Sq.mm.", sigma_c1));
            //list.Add(string.Format(""));

            //double sigma_c2 = 0.45 * fck;
            //list.Add(string.Format("σc_2 = Compressive Stress in Steel = 0.45 x fck = 0.45 x {0} = {1:f3} N/Sq.mm.", fck, sigma_c2));
            //list.Add(string.Format(""));

            //double sigma_c = sigma_c1 - sigma_c2;
            //list.Add(string.Format("σc = Effective Stress for Compressive Steel Reinforcement"));
            //list.Add(string.Format("     = σc1 - σc2 = {0:f3} - {1:f3} = {2:f3} N/Sq.mm.", sigma_c1, sigma_c2, sigma_c));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Area of Compression Steel = Ast "));
            //list.Add(string.Format(""));

            //Ast = Math.Abs(Mu - Mul) * 1000000 / ((eff_d - d_dash) * sigma_c);
            //list.Add(string.Format("  Ast = (Mu - Mu1) x 10^6 / [(d - d’) x σc]"));
            //list.Add(string.Format("      = ({0:f3} - {1:f3}) x 10^6 / [({2} - {3}) x {4:f3}]", Mu, Mul, eff_d, d_dash, sigma_c));
            ////list.Add(string.Format("      = 38.24 x 106 / (434 x 343.2)"));
            //list.Add(string.Format("      = {0:f3} Sq.mm.", Ast));
            //list.Add(string.Format(""));

            //double Ast5 = Math.PI * Bar_dia3 * Bar_dia3 / 4.0;

            //bar_nos = (int)(Ast / Ast5);
            //bar_nos = bar_nos + 1;

            //if (bar_nos < 2) bar_nos = 2;
            //Ast5 = Ast5 * bar_nos;


            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "B_AST[5] at Penultimate End Supports (Bottom)";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = Bar_dia3;
            //ssr.Length = len - end_len_a - end_len_b;
            //BOQ.Steel_Reinforcement.Add(ssr);

            //list.Add(string.Format("Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia3));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as End Support Bottom Steel (Ast = {2:f3} Sq.mm.)", bar_nos, Bar_dia3, Ast5));
            ////list.Add(string.Format("Ast5 = {0:f3} Sq.mm.", Ast5));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[5], at Penultimate End Supports (Bottom)."));
            //list.Add(string.Format(""));
            #endregion  STEP 10 : REINFORCEMENT AT END SUPPORTS



            #region  STEP 8 : REINFORCEMENT AT INNER SUPPORT

            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.11 : REINFORCEMENT AT INNER SUPPORT", step));
            list.Add(string.Format("STEP 8 : REINFORCEMENT AT SUPPORT TOP AND BOTTOM", step));
            list.Add(string.Format("---------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));

            //Mu = -239.35;
            //Mu = max_moment[2];
            //Mu = AM4;
            Mu = BM_hog;
            list.Add(string.Format(""));
            list.Add(string.Format("Bending -ve Moments at Inside Supports = Mu = BM_hog = -{0:f3} kN-m", Mu));
            list.Add(string.Format(""));
            //list.Add(string.Format("From Analysis Results,"));
            ////list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -{0} kN-m   (Members B1 to B6 and Joints J2 to J6)", Mu));
            //list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -{0} kN-m", Mu));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double Mul = 0.138 * fck * bw * eff_d * eff_d / 1000000;
            list.Add(string.Format("Mul = 0.138 x fck x bw x d^2 / 10^6"));
            list.Add(string.Format("    = 0.138 x {0} x {1} x {2}^2 / 10^6", fck, bw, eff_d));
            list.Add(string.Format("    = {0:f3} kN-m", Mul));

            //list.Add(string.Format("j = (d - 0.46 x Xu) / d = (d - 0.42 x 0.48 x d) / d = 1 - 0.42 x 0.48 = 0.798"));
            list.Add(string.Format(""));
            list.Add(string.Format("Xu = 0.48 x d"));
            list.Add(string.Format(""));
            j = 1 - 0.42 * 0.48;
            list.Add(string.Format("j = (d - 0.42 x Xu) / d = (d - 0.42 x 0.48 x d) / d = 1 - 0.42 x 0.48 = 0.798"));
            list.Add(string.Format(""));


            double d_dash = Bar_dia4 / 2 + cover;

            Ast = ((Mul * 1000000) / (0.87 * fy * j * eff_d)) + (Math.Abs(Mu - Mul) * 1000000 / (0.87 * fy * (eff_d - d_dash)));

            double bot_ast = ((Mul * 1000000) / (0.87 * fy * j * eff_d));
            bnos_3 = (int)(bot_ast / (Math.PI * Bar_dia2 * Bar_dia2 / 4.0));
            bnos_3 = bnos_3 + 1;

            if (bnos_3 % 2 != 0)
                bnos_3 += 1;


            double top_ast = Ast - (bnos_3 * (Math.PI * Bar_dia2 * Bar_dia2 / 4.0));

            bnos_2 = (int)(top_ast / (Math.PI * Bar_dia4 * Bar_dia4 / 4.0));
            bnos_2 = bnos_2 + 1;

            if (bnos_2 % 2 != 0)
                bnos_2 += 1;

            if (bnos_2 == 0) bnos_2 = 2;


            list.Add(string.Format("(i) For Tension Steel at Support Top"));
            list.Add(string.Format(""));
            list.Add(string.Format("   Ast  = [Mul x 10^6 / (0.87 x fy x j x d)]"));
            list.Add(string.Format("          + [(Mu - Mu1) x 10^6 / (0.87 x fy x (d - d’)]"));
            list.Add(string.Format(""));

            list.Add(string.Format("        = [{0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})]", Mul, fy, j, eff_d));
            list.Add(string.Format("          + [({0:f3} - {1:f3}) x 10^6 / (0.87 x {2} x ({3} - {4})]", Mu, Mul, fy, eff_d, d_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("        = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));


            //double Ast6 = (2 * Math.PI * Bar_dia3 * Bar_dia3 / 4.0) + (2 * Math.PI * Bar_dia4 * Bar_dia4 / 4.0);
            double Ast2 = (Math.PI * Bar_dia4 * Bar_dia4 / 4.0);


            //bar_nos = (int)(Ast / Ast2);
            //bar_nos = bar_nos + 1;
            //if (bar_nos < 2) bar_nos = 2;

            //if (bar_nos % 2 != 0)
            //    bar_nos = bar_nos + 1;// bar nos allways an even number

            //bnos_2 = 2;
            //bnos_3 = (int)bar_nos - 2; ;


            //Ast2 = Ast2 * bar_nos;



            Ast2 = bnos_2 * (Math.PI * Bar_dia4 * Bar_dia4 / 4.0) + bnos_3 * (Math.PI * Bar_dia2 * Bar_dia2 / 4.0);


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[6] at Inner Supports (Top)";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = Bar_dia4;
            ssr.Length = pen_ult_len + inn_len;
            BOQ.Steel_Reinforcement.Add(ssr);



            //list.Add(string.Format("Provide 2 Nos {0} mm  and 2 Nos {1} bars, ", Bar_dia3, Bar_dia4));
            //list.Add(string.Format("Provide {0} Nos {1} mm bars, ", bar_nos, Bar_dia4));


            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inner Support Top Steel (Ast = {0:f3} Sq.mm.)", bar_nos, Bar_dia4, Ast6));
            ////list.Add(string.Format("Ast6 = {0:f3} Sq.mm.", Ast6));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[6], at Inner Supports (Top)."));
            list.Add(string.Format(""));

            list.Add(string.Format("Bar Dia = d4 = {0} mm. and d2 = {1} mm.", Bar_dia4, Bar_dia2));
            list.Add(string.Format("Provide {0} Nos. {1} mm dia and {2} Nos {3} mm dia bars as Support Steel Top (Ast = {4:f3} Sq.mm.)",
                bnos_2, Bar_dia4, bnos_3, Bar_dia2, Ast2));
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) For Compression Steel at Support Bottom"));
            list.Add(string.Format(""));


            double epsylon = 0.0035 * (0.48 - (d_dash / eff_d) / 0.48);
            list.Add(string.Format("e = Stress in Compressive Steel = 0.0035 x (0.48 - (d’ / d) / 0.48)"));
            list.Add(string.Format("                                = 0.0035 x (0.48 - ({0}/{1}) / 0.48)", d_dash, eff_d));
            list.Add(string.Format("                                = {0:f6}", epsylon));
            list.Add(string.Format(""));


            double sigma_c1 = 361 - 12.95 * Math.Pow((3.804 - epsylon * 1000), 2.0);
            list.Add(string.Format("σc_1 = Approximate Stress in Compress Steel "));
            list.Add(string.Format("     = 361 - 12.95 x (3.804 - e x 10^3)^2  (From Formula)"));
            list.Add(string.Format("     = 361 - 12.95 x (3.804 - {0:f6} x 10^3)^2", epsylon));
            list.Add(string.Format("     = {0:f3} N/Sq.mm.", sigma_c1));
            list.Add(string.Format(""));


            double sigma_c2 = 0.45 * fck;
            list.Add(string.Format("σc_2 = Compressive Stressin Steel = 0.45 x fck = 0.45 x {0} = {1:f3} N/Sq.mm", fck, sigma_c2));
            list.Add(string.Format("     = 361 - 12.95 x (3.804 - e x 10^3)^2  (From Formula)"));
            list.Add(string.Format("     = 361 - 12.95 x (3.804 - {0:f6} x 10^3)^2", epsylon));
            list.Add(string.Format("     = {0:f3} N/Sq.mm.", sigma_c1));
            list.Add(string.Format(""));

            double sigma_c = sigma_c1 - sigma_c2;
            list.Add(string.Format("σc   = Effective Stress for Compressive Steel Reinforcement"));
            list.Add(string.Format("     = σc1 - σc2 "));
            list.Add(string.Format("     = {0:f3} - {1:f3}", sigma_c1, sigma_c2));
            list.Add(string.Format("     = {0:f3} N/Sq.mm.", sigma_c));
            list.Add(string.Format(""));


            double Asc = Math.Abs(Mu - Mul) * 1000000 / (sigma_c * (eff_d - d_dash));
            list.Add(string.Format("    Asc = Area of Compressive Steel"));
            list.Add(string.Format("        = (Mu - Mul) x 10^6 / [σc x (d - d’)]"));
            list.Add(string.Format("        = ({0:f3} - {1:f3}) x 10^6 / [{2:f3} x ({3} - {4})]", Mu, Mul, sigma_c, eff_d, d_dash));
            list.Add(string.Format("        = {0:f3} Sq.mm.", Asc));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double Ast3 = (Math.PI * Bar_dia3 * Bar_dia3 / 4.0);

            bar_nos = (int)(Asc / Ast3);
            bar_nos = bar_nos + 1;
            if (bar_nos < 2) bar_nos = 2;


            if (bar_nos % 2 != 0) bar_nos = bar_nos + 1;

            bnos_4 = (int)bar_nos;

            Ast3 = Ast3 * bar_nos;

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[3] at Inner Supports (Bottom)";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = Bar_dia5;
            ssr.Length = len - end_len_a - end_len_b;
            BOQ.Steel_Reinforcement.Add(ssr);



            //list.Add(string.Format("Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia5));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inner Support Bottom Steel (Ast = {0:f3} Sq.mm.)", bar_nos, Bar_dia5, Ast7));
            ////list.Add(string.Format("Ast7 = {0:f3} Sq.mm.", Ast7));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[7], at Inner Supports (Bottom)."));
            list.Add(string.Format(""));


            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia = D3 = {0} mm.", Bar_dia3));
            list.Add(string.Format("Provide {0} Nos {1} mm dia bars as Support Steel Bottom", bnos_4, Bar_dia3));
            list.Add(string.Format(""));

            //Mu = 93.09;
            //Mu = max_moment[3];
            //list.Add(string.Format("(iii) From Analysis Results,"));
            ////list.Add(string.Format("      Maximum + ve Bending Moment at Inner Supports = Mu = {0:f3}   KNm   (Members B1 to B6 and Joints J2 to J6)", Mu));

            //Mu = AM3;
            //list.Add(string.Format("      Maximum + ve Bending Moment at Inner Supports = AM3 = {0:f3} KN-m", Mu));
            //list.Add(string.Format(""));

            //j = 0.5 + Math.Sqrt(0.25 - Mu * 1000000 / (0.87 * fck * bf * eff_d * eff_d));
            //list.Add(string.Format("j = 0.5 + √[0.25 - Mu x 10^6 / (0.87 x fck x bf x d^2)]"));
            //list.Add(string.Format("          = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3}^2)]", Mu, fck, bf, eff_d));
            //list.Add(string.Format("          = {0:f3}", j));
            //list.Add(string.Format(""));

            //list.Add(string.Format("Area of Steel required = Ast"));
            //list.Add(string.Format(""));

            //Ast = Mu * 1000000 / (0.87 * fy * j * eff_d);
            //list.Add(string.Format("  Ast = Mu x 10^6 / (0.87 x fy x j x d)"));
            //list.Add(string.Format("      = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mu, fy, j, eff_d));
            //list.Add(string.Format("      = {0:f3} Sq.mm.", Ast));
            //list.Add(string.Format(""));

            //double Ast8 = (Math.PI * Bar_dia6 * Bar_dia6 / 4.0);


            //bar_nos = (int)(Ast / Ast8);
            //bar_nos = bar_nos + 1;

            //if (bar_nos < 2) bar_nos = 2;
            //Ast8 = Ast8 * bar_nos;



            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "B_AST[8] at all Inner Span (Top Steel)";
            //ssr.Number_Of_Bars = (int) bar_nos;
            //ssr.Bar_Dia = Bar_dia6;
            //if(inn_len > 0)
            //    ssr.Length = inn_len;
            //else
            //    ssr.Length = pen_ult_len;
            //BOQ.Steel_Reinforcement.Add(ssr);


            //list.Add(string.Format("Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia6));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inner Span Top Steel", bar_nos, Bar_dia6, Ast8));
            //list.Add(string.Format("Ast8 = {0:f3} Sq.mm.", Ast8));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[8], at all Inner Span (Top Steel)."));
            list.Add(string.Format(""));
            #endregion  STEP 10 : REINFORCEMENT AT INNER SUPPORT

            #region STEP 9 : REINFORCEMENT STEEL AT SPAN TOP
            list.Add(string.Format("-------------------------------------------------------------"));
            list.Add(string.Format("STEP 9 : REINFORCEMENT STEEL AT SPAN TOP"));
            list.Add(string.Format("-------------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia = D4 = {0} mm.", Bar_dia4));
            bnos_5 = bnos_2;
            list.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Top", bnos_2, Bar_dia4));
            list.Add(string.Format(""));


            #endregion STEP 10 : REINFORCEMENT STEEL AT SPAN TOP

            #region STEP 10 : SHEAR ENFORCEMENT
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.12 : SHEAR ENFORCEMENT", step));
            list.Add(string.Format("STEP 10 : SHEAR REINFORCEMENT", step));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format("Main Reinforcement Provided at:"));
            list.Add(string.Format(""));
            list.Add(string.Format("End Support:"));
            list.Add(string.Format(""));
            list.Add(string.Format("Tension Steel at Top Reinforcement = Ast4 = {0:f3} Sq.mm.", Ast2));
            list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast3 = {0:f3} Sq.mm.", Ast3));
            //list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast5 = {0:f3} Sq.mm.", Ast5));
            list.Add(string.Format(""));
            list.Add(string.Format("Inner Support:"));
            list.Add(string.Format(""));
            list.Add(string.Format(" Tension Steel at Top Reinforcement = Ast6 = {0:f3} Sq.mm.", Ast2));
            list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast7 = {0:f3} Sq.mm.", Ast3));
            //list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast8 = {0:f3} Sq.mm.", Ast8));
            list.Add(string.Format(""));
            list.Add(string.Format("Minimum Steel for Compression Reinforcement = Asc = {0:f3} Sq.mm.", Asc));
            list.Add(string.Format("Effective Depth of Beam = d = {0} mm.", eff_d));
            list.Add(string.Format("Width of Web of Beam = bw = {0} mm.", bw));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Shear Force at Inner Support = V2 = {0:f3} KN.", V2));
            list.Add(string.Format(""));

            tau_v = V2 * 1000 / (bw * eff_d);
            list.Add(string.Format("Shear Stress = τv = V2 x 1000 / (bw x d)"));
            list.Add(string.Format("                  = {0:f3} x 1000 / ({1} x {2})", V2, bw, eff_d));
            list.Add(string.Format("                  = {0:f3} N/Sq.mm.", tau_v));
            list.Add(string.Format(""));

            double p = Asc * 100 / (bw * eff_d);
            list.Add(string.Format("Percentage of Steel = p = Asc x 100 / (bw x d)"));
            list.Add(string.Format("                        = {0:f3} x 100 / ({1} x {2})", Asc, bw, eff_d));
            list.Add(string.Format("                        = {0:f3}%", p));
            list.Add(string.Format(""));


            //double tau_c = 0.484;
            double tau_c = Tables.Permissible_Shear_Stress(p, (int)fck, ref kStr);
            list.Add(string.Format("From Table1, For fck = {0}   &    p = {1:f3}", fck, p));


            list.Add(string.Format("Shear Capacity of the Section τc = {0:f3} N/Sq.mm.", tau_c));
            list.Add(string.Format(""));
            list.Add(string.Format("Balance Shear Stress to be taken by Shear Reinforcement"));
            double tau = tau_v - tau_c;
            list.Add(string.Format("τ = τv - τc = {0:f3} - {1:f3} = {2:f3} N/Sq.mm.", tau_v, tau_c, tau));
            list.Add(string.Format(""));
            list.Add(string.Format("Providing {0} mm dia 2-legged Stirrups, ", Shear_Bar_dia));

            double Asv = 2 * Math.PI * Shear_Bar_dia * Shear_Bar_dia / 4.0;
            list.Add(string.Format("Area = Asv = 2 x π x {0}^2 / 4  = {1:f3} Sq.mm. ", Shear_Bar_dia, Asv));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Spacing for Stirrups = Sv"));
            list.Add(string.Format(""));

            double Sv1 = Asv * fy / (0.4 * bw);
            double Sv2 = (3.0 * eff_d) / 4.0;
            double Sv3 = 450.0;
            double Sv4 = (0.87 * fy * Asv) / (Math.Abs(tau_v - tau_c) * bw);
            //double Sv = (0.87 * fy * Asv) / ((tau_v - tau_c) * bw);

            list.Add(string.Format("(i)   Sv <= Asv x fy / (0.4 x bw) = {0:f2} x {1} / (0.4 x {2:f2}) = {3:f3} mm", Asv, fy, bw, Sv1));
            list.Add(string.Format("(ii)  Sv = <= (3 x d) / 4 = 3 x {0} / 4 = {1:f2} mm", eff_d, Sv2));
            list.Add(string.Format("(iii) Sv = <= 450 mm"));
            list.Add(string.Format("(iv) Calculated Spacing = Sv "));
            list.Add(string.Format("                        = (0.87 x fy x Asv) / [(τv - τc) x b] "));
            list.Add(string.Format("                        = 0.87 x {0} x {1:f3} / [({2:f3} - {3:f3}) x {4}]", fy, Asv, tau_v, tau_c, bw));
            //list.Add(string.Format("                        = 0.87 x 415 x 100.53 / 221.5"));
            list.Add(string.Format("                        = {0:f3} mm", Sv4));
            list.Add(string.Format(""));

            double Sv = Math.Min(Math.Min(Sv1, Sv2), Math.Min(Sv3, Sv4));

            list.Add(string.Format(""));
            list.Add(string.Format("Sv will be minimum of the above values = {0:f2} mm", Sv));
            list.Add(string.Format(""));

            Sv = (int)(Sv / 10);
            Sv = Sv * 10;


            Ast = 2 * Math.PI * Shear_Bar_dia * Shear_Bar_dia / 4.0;
            double Ast5 = Ast * 1000 / Sv;





            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[9]";
            ssr.Number_Of_Bars = 2;
            ssr.Bar_Dia = Shear_Bar_dia;
            ssr.Length = 2 * (mm.Property.YD + mm.Property.ZD) - 4 * cover / 1000;
            BOQ.Steel_Reinforcement.Add(ssr);


            list.Add(string.Format("Provide  Y'{0} - (2 Legged) Vertical Stirrups @ {1} mm Centre to Centre (Ast = {2:f3} Sq.mm. / metre)", Shear_Bar_dia, Sv, Ast5));

            //list.Add(string.Format("AST9 = {0:f3} x 1000 / {1} Sq.mm. / metre = {2:f3} Sq.mm. / metre.", Ast, Sv, Ast9));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar mark in drawing = B_Ast[5] as Stirrup Steel Shear Reinforcements"));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[9]"));
            list.Add(string.Format(""));

            #endregion STEP 12 : SHEAR ENFORCEMENT



            #region STEP 11 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM ", step));
            list.Add(string.Format("STEP 11 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM ", step));
            list.Add(string.Format("         (D = Thickness of Floor Slab + Depth of Beam Web)"));
            list.Add(string.Format("----------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //MyList
            //double Mu = -239.35;
            //double Mu = max_moment[2];


            Mu = AM4;
            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = AM4 = -{0:f3} kN-m ", Mu));
            list.Add(string.Format(""));
            list.Add(string.Format("50% of Hogging Moment will be taken by Concrete and "));
            list.Add(string.Format("50% of Hogging Bending Moment will be taken by Compression Steel,"));
            list.Add(string.Format(""));
            //list.Add(string.Format("Effective Depth = d"));
            list.Add(string.Format("Effective Depth = d >= [Mu / 0.138 x fck x b]^0.5"));
            Q = 0.138 * fck;

            //d = Math.Pow((Math.Abs(Mu) / 0.138 * fck * b), 0.5);

            d = Math.Pow((Math.Abs(Mu) / Q * 1000), 0.5);


            //d = Math.Pow((Math.Abs(Mu * 1000000) / 0.138 * fck * b), 0.5);


            //d = Math.Pow((Math.Abs(Mu * 1000000) / 0.138 * fck * 1000), 0.5);

            list.Add(string.Format("                    >= [{0:f3} / 0.138 x {1} x 1000]^0.5", Mu, fck));
            list.Add(string.Format("                    >= {0:f3} mm", d));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall Depth = D"));


            _D = d + (Bar_dia1 / 2) + cover;
            list.Add(string.Format("D = d + (Bar_dia / 2) + Cover"));
            list.Add(string.Format("  = {0:f3} + ({1} / 2) + {2}", d, Bar_dia1, cover));

            if (_D < D)
            {
                if (IS_DESIGN_OK) IS_DESIGN_OK = true;

                list.Add(string.Format("  = {0:f3} mm < Provided D = {1} mm,   Hence OK", _D, D));
            }
            else
            {
                list.Add(string.Format("  = {0:f3} mm > Provided D = {1} mm,   Hence NOT OK", _D, D));
                if (IS_DESIGN_OK) IS_DESIGN_OK = false;
            }
            list.Add(string.Format(""));

            //double V = 160.048;
            V = Math.Max(Math.Max(V1, V2), Math.Max(V3, V4));
            list.Add(string.Format("Maximum Shear Force at Support = V = {0:f3} KN", V));
            list.Add(string.Format(""));


            //double tau_v = 2.8; // from Table

            tau_v = Tables.Permissible_Shear_Stress(p, (int)fck, ref kStr);

            //double Asc1 = Math.Abs(V) / (b * d);

            list.Add(string.Format("Shear Stress = V, For Concrete Grade M{0}, Permissible Shear Stress = τv = {1:f3} N/Sq.m. (From Table)", fck, tau_v));
            list.Add(string.Format(""));
            list.Add(string.Format("τv = V / (b x d)"));
            list.Add(string.Format(" d = V / (b x τv)"));
            //list.Add(string.Format("   = (160.408 x 1000) / (1000 x (2.8/2))"));
            //list.Add(string.Format("   = ({0:f3} x 1000) / (1000 x ({1:f3}/2))", V, tau_v));
            list.Add(string.Format("   = ({0:f3} x 1000) / (1000 x ({1:f3}))", V, tau_v));

            //double _d = V * 1000.0 / (1000 * tau_v / 2.0);
            _d = V * 1000.0 / (1000 * tau_v);

            list.Add(string.Format("   = {0:f3} mm", _d));
            list.Add(string.Format(""));

            _D2 = _d + Bar_dia1 / 2.0 + cover;
            list.Add(string.Format("Overall Depth = D = d + Bar_dia / 2 + Cover"));
            list.Add(string.Format("                  = {0:f3} + ({1} / 2) + {2}", _d, Bar_dia1, cover));
            //list.Add(string.Format("                  = {0:f3} mm", _D));


            if (_D2 < D)
            {
                list.Add(string.Format("                  = {0:f3} mm < Provided D = {1} mm,   Hence OK", _D2, D));
            }
            else
            {
                if (IS_DESIGN_OK) IS_DESIGN_OK = false;
                list.Add(string.Format("                  = {0:f3} mm > Provided D = {1} mm,   Hence NOT OK", _D2, D));
            }

            list.Add(string.Format(""));
            list.Add(string.Format(""));

            D_prov = Math.Max(_D, _D2);
            list.Add(string.Format("Considering above two Overall Depths of {0:f3}mm & {1:f3}mm", _D, _D2));


            D_prov = ((int)D_prov) / 100.0;


            sd = (int)((D_prov - ((int)D_prov)) * 100);

            if (sd > 50)
            {
                sd = 100;
            }
            else
            {
                sd = 50;

            }
            D_prov = (((int)D_prov) * 100 + sd);




            list.Add(string.Format("Provide Overall Depth = D = {0}mm", D));
            list.Add(string.Format("Effective Depth = d = D - (Bar_dia / 2) - cover"));

            eff_d = D - Bar_dia1 / 2.0 - cover;
            list.Add(string.Format("                    = {0} - ({1}/2) - {2}", D, Bar_dia1, cover));
            list.Add(string.Format("                    = {0:f2} mm", eff_d));
            list.Add(string.Format(""));

            #endregion STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM


            #region Step 12 : Design Summary
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 12 : DESIGN SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));

            Design_Summary = new List<string>();


            Design_Summary.Add(string.Format("-------------------------------------"));
            Design_Summary.Add(string.Format("BEAM = {0}, FLOOR LEVEL = {1:f3} M", Beam_Title, BOQ.Floor_ELevation));
            Design_Summary.Add(string.Format("CONTINUOUS MEMBERS = {0}", Beam_Nos));





            Design_Summary.Add(string.Format("BEAM SECTION = {0} mm. X {1} mm.", BOQ.Section_B * 1000, BOQ.Section_D * 1000));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Bottom, (Ast = {2:f3} Sq.mm)",
                bnos_1,
                Bar_dia1,
                Ast1));
            Design_Summary.Add(string.Format("Bar mark in drawing = B_Ast[1] as Span Steel (Bottom). "));


            Design_Summary.Add(string.Format(""));

            BOQ.Steel_Reinforcement.Clear();

            #region B_Ast_1
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[1]";
            ssr.Text = "Span Steel (Bottom)";
            ssr.Number_Of_Bars = (int)bnos_1;
            ssr.Bar_Dia = Bar_dia1;
            ssr.Length = len;
            ssr.Bar_Spacing = (int)(len / bnos_1);
            BOQ.Steel_Reinforcement.Add(ssr);
            #endregion B_Ast1

            Design_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Top.",
               bnos_5,
               Bar_dia4));
            Design_Summary.Add(string.Format("Bar mark in drawing = B_Ast[2], as Span Steel (Top)."));


            #region B_Ast_2
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[2]";
            ssr.Text = "Span Steel (Top)";
            ssr.Number_Of_Bars = (int)bnos_5;
            ssr.Bar_Dia = Bar_dia4;
            ssr.Length = len;
            ssr.Bar_Spacing = (int)(len / bnos_5);
            BOQ.Steel_Reinforcement.Add(ssr);
            #endregion B_Ast2



            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide {0} Nos. {1} mm dia and {2} Nos {3} mm dia bars as Support Steel Top (Ast = {4:f3} Sq.mm.)",
                 bnos_2,
                Bar_dia4,
                bnos_3,
                Bar_dia2,
                Ast2
                ));

            #region B_Ast_3
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[3]";
            ssr.Text = "Support Steel Top";
            ssr.Number_Of_Bars = (int)bnos_2;
            ssr.Bar_Dia = Bar_dia4;
            ssr.Length = len;
            ssr.Bar_Spacing = (int)(len / bnos_2);
            BOQ.Steel_Reinforcement.Add(ssr);



            ssr = new Steel_Reinforcement();
            ssr.BarMark = ""; // "B_AST[3]";
            ssr.Text = "";
            ssr.Number_Of_Bars = (int)bnos_3;
            ssr.Bar_Dia = Bar_dia2;
            ssr.Length = len;
            ssr.Bar_Spacing = (int)(len / bnos_3);
            BOQ.Steel_Reinforcement.Add(ssr);



            #endregion B_Ast3


            Design_Summary.Add(string.Format("Bar mark in drawing = B_Ast[3], as Supports Steel (Bottom)."));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Support Steel Bottom.",
                bnos_4,
                Bar_dia3));


            Design_Summary.Add(string.Format("Bar mark in drawing = B_Ast[4], as Supports Steel (Bottom)."));
            Design_Summary.Add(string.Format(""));


            #region B_Ast_4

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[4]";
            ssr.Text = "Support Steel (Bottom)";
            ssr.Number_Of_Bars = (int)bnos_4;
            ssr.Bar_Dia = Bar_dia3;
            ssr.Length = len;
            ssr.Bar_Spacing = (int)(len / bnos_4);
            BOQ.Steel_Reinforcement.Add(ssr);

            #endregion B_Ast4

            Design_Summary.Add(string.Format("Provide  Y'{0} - (2 Legged) Vertical Stirrups @ {1} mm Centre to Centre (Ast = {2:f3} Sq.mm. / metre)",
                Shear_Bar_dia,
                Sv,
                Ast5));
            Design_Summary.Add(string.Format("Bar mark in drawing = B_Ast[5] as Stirrup Steel Shear Reinforcements,"));

            #region B_Ast_5

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[5]";
            ssr.Text = "Stirrup Steel Shear Reinforcements";
            ssr.Bar_Spacing = (int)(Sv);
            ssr.Bar_Dia = Bar_dia3;
            ssr.Length = pen_ult_len;
            ssr.Number_Of_Bars = (int)bnos_4;
            BOQ.Steel_Reinforcement.Add(ssr);

            #endregion B_Ast5

            list.AddRange(Design_Summary.ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            #endregion Step 12 : Design Summary




            #region Step 13 : BOQ SUMMARY

            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 13 : BOQ SUMMARY"));
            list.Add(string.Format("------------------------------------"));

            BOQ_Summary = new List<string>();
            //double floor_lvl = 
            BOQ_Summary.Add(string.Format("BEAM = {0}, Floor Level = {1:f3} m", Beam_Title, BOQ.Floor_ELevation));

            BOQ_Summary.Add(string.Format(""));

            double conc_qty = BOQ.Section_B * BOQ.Section_D * BOQ.Length;
            BOQ_Summary.Add(string.Format("Concrete Quantity = {0:f3} x {1:f3} x {2:f3} = {3:f3} Cu.m.",
                BOQ.Section_B, BOQ.Section_D, BOQ.Length, conc_qty));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("--------------------"));
            BOQ_Summary.Add(string.Format("REBARS QUANTITY"));
            BOQ_Summary.Add(string.Format("--------------------"));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Bottom, (Ast = {2:f3} Sq.mm)",
                bnos_1,
                Bar_dia1,
                Ast1));

            double tot_wgt = bnos_1 * len * Tables.Rebars.Get_Rebar_Weight(Bar_dia1);
            //BOQ_Summary.Add(string.Format("Total Weight = 2Nos. x Length of Beam x Weight/m for 16 mm dia = Ton."));
            BOQ_Summary.Add(string.Format("Total Weight = Nos. x Length of Beam x Weight/m for {0} mm dia", Bar_dia1));

            BOQ_Summary.Add(string.Format("             = {0} x {1:f3} x {2:f6} = {3:f4} Ton.",
                bnos_1, len, Tables.Rebars.Get_Rebar_Weight(Bar_dia1), tot_wgt));

            //BOQ_Summary.Add(string.Format("Bar mark in drawing = B_Ast[1] as Span Steel (Bottom). "));



            BOQ_Summary.Add(string.Format(""));


            BOQ_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Top.",
               bnos_5,
               Bar_dia4));


            BOQ_Summary.Add(string.Format("Total Weight =  Nos. x Length of Beam x Weight/m for {0} mm dia", Bar_dia4));

            tot_wgt = bnos_5 * len * Tables.Rebars.Get_Rebar_Weight(Bar_dia4);
            BOQ_Summary.Add(string.Format("             = {0} x {1:f3} x {2:f6} = {3:f4} Ton.",
                bnos_5, len, Tables.Rebars.Get_Rebar_Weight(Bar_dia1), tot_wgt));


            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide {0} Nos. {1} mm dia and {2} Nos {3} mm dia bars as Support Steel Top (Ast = {4:f3} Sq.mm.)",
                 bnos_2,
                Bar_dia4,
                bnos_3,
                Bar_dia2,
                Ast2
                ));
            BOQ_Summary.Add(string.Format("Total Weight =  Nos. x (Each Span of Beam x 0.3 x 2) x Weight/m for {0} mm dia ", Bar_dia4));
            BOQ_Summary.Add(string.Format("               + Nos. x (Each Span of Beam x 0.3 x 2) x Weight/m for {0} mm dia +", Bar_dia2));

            BOQ_Summary.Add(string.Format(""));
            //inn_len
            //pen_ult_len = (len - end_len_a - end_len_b);
            tot_wgt = bnos_2 * pen_ult_len * 0.3 * 2 * Tables.Rebars.Get_Rebar_Weight(Bar_dia4) +
                         bnos_3 * 0.3 * 2  * pen_ult_len * Tables.Rebars.Get_Rebar_Weight(Bar_dia2);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x 0.3 x 2 x {2:f6}",
                bnos_2, pen_ult_len, Tables.Rebars.Get_Rebar_Weight(Bar_dia4)));
            BOQ_Summary.Add(string.Format("                + {0} x {1:f3} x 0.3 x 2 x {2:f6} ",
                bnos_3, pen_ult_len, Tables.Rebars.Get_Rebar_Weight(Bar_dia2)));
            BOQ_Summary.Add(string.Format("              = {0:f3} Ton", tot_wgt));


            //BOQ_Summary.Add(string.Format("Bar mark in drawing = B_Ast[3], as Supports Steel (Bottom)."));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Support Steel Bottom.",
                bnos_4,
                Bar_dia3));


            BOQ_Summary.Add(string.Format("Total Weight =  Nos. x (Each Span of Beam x 0.3 x 2) x Weight/m for {0} mm dia", Bar_dia3));


            tot_wgt = bnos_4 * pen_ult_len * 0.3 * 2 * Tables.Rebars.Get_Rebar_Weight(Bar_dia3);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x 0.3 x 2 x {2:f6} = {3:f4} Ton.",
                bnos_4, pen_ult_len, Tables.Rebars.Get_Rebar_Weight(Bar_dia3), tot_wgt));


            BOQ_Summary.Add(string.Format(""));



            BOQ_Summary.Add(string.Format("Provide  Y'{0} - (2 Legged) Vertical Stirrups @ {1} mm Centre to Centre (Ast = {2:f3} Sq.mm. / metre)",
                Shear_Bar_dia,
                Sv,
                Ast5));
            BOQ_Summary.Add(string.Format("Total Weight = (Each Span of Beam/spacing) x ((B+D-2xcover)x2 of Beam) x Weight/m for {0} mm dia", Shear_Bar_dia));
            //BOQ_Summary.Add(string.Format("Bar mark in drawing = B_Ast[5] as Stirrup Steel Shear Reinforcements,"));


            tot_wgt = (pen_ult_len*1000 / Sv) * (BOQ.Section_B + BOQ.Section_D - 2 * cover/1000) * 2 * Tables.Rebars.Get_Rebar_Weight(Shear_Bar_dia);


            BOQ_Summary.Add(string.Format("             = ({0:f3}/{1:f3}) x (({2}+{3}-2x{4})x 2) x {5}",
                pen_ult_len, Sv / 1000, BOQ.Section_B, BOQ.Section_D,
                cover / 1000,
                Tables.Rebars.Get_Rebar_Weight(Shear_Bar_dia)));

            BOQ_Summary.Add(string.Format("             = {0:f3} Ton.", tot_wgt));

            list.AddRange(BOQ_Summary.ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            #endregion Step 13 : BOQ SUMMARY


            #region DD

            if (false)
            {

                #region STEP 13 : BILL OF QUANTITY

                list.Add(string.Format("--------------------------------------------------"));
                list.Add(string.Format("STEP 13 : BEAM DESIGN BILL OF QUANTITY (BoQ)", step));
                list.Add(string.Format("--------------------------------------------------"));
                list.Add(string.Format(""));

                //double conc_qty = BOQ.Section_B * BOQ.Section_D * BOQ.Length;
                //list.Add(string.Format("Concrete Quantity = {0} x {1} x {2} = {3:f3} Cu.m.", BOQ.Section_B, BOQ.Section_D, BOQ.Length));
                list.Add(string.Format(""));
                list.Add(string.Format("--------------------"));
                list.Add(string.Format("REBARS QUANTITY"));
                list.Add(string.Format("--------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Provide 2 Nos 16 mm dia bars as Span Steel Bottom, (Ast = 402.124 Sq.mm)"));

                tot_wgt = bnos_1 * len * Tables.Rebars.Get_Rebar_Weight(Bar_dia1);
                list.Add(string.Format("Total Weight = 2Nos. x Length of Beam x Weight/m for 16 mm dia = Ton."));

                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Provide 2 Nos 16 mm dia bars as Span Steel Top."));
                list.Add(string.Format("Total Weight =  Nos. x Length of Beam x Weight/m for 16 mm dia = Ton."));
                list.Add(string.Format(""));
                list.Add(string.Format("Provide 2 Nos. 16 mm dia and 4 Nos 25 mm dia bars as Support Steel Top (Ast = 1963.495 Sq.mm.)"));
                list.Add(string.Format("Total Weight =  Nos. x (Each Span of Beam x 0.3 x 2) x Weight/m for 16 mm dia = Ton."));
                list.Add(string.Format(""));
                list.Add(string.Format("Provide 2 Nos 16 mm dia bars as Support Steel Bottom."));
                list.Add(string.Format("Total Weight =  Nos. x (Each Span of Beam x 0.3 x 2) x Weight/m for 16 mm dia = Ton."));
                list.Add(string.Format(""));
                list.Add(string.Format("Provide  Y'8 - (2 Legged) Vertical Stirrups @ 330 mm Centre to Centre (Ast = 304.639 Sq.mm. / metre)"));
                list.Add(string.Format("Total Weight = (Each Span of Beam/spacing) x ((B+D-2xcover)x2 of Beam) x Weight/m for 8 mm dia = Ton."));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                //list.Add(string.Format(""));
                //list.Add(string.Format("------------------------------------"));
                ////list.Add(string.Format("STEP {0}.13 : BILL OF QUANTITY", step));
                //list.Add(string.Format("STEP 13 : BILL OF QUANTITY", step));
                //list.Add(string.Format("------------------------------------"));
                //list.AddRange(BOQ.Get_Text());
                //list.Add(string.Format(""));



                #endregion STEP 13 : BILL OF QUANTITY

            }

            #endregion DD




            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF DESIGN        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion End of Report

            if (Report_File != "")
            {

                string tmp_file = Get_Report_File(step);

                File.WriteAllLines(tmp_file, list.ToArray());

                tmp_file = Get_BOQ_File(step);

                File.WriteAllLines(tmp_file, BOQ_Summary.ToArray());

                tmp_file = Get_Design_Summary_File(step);

                File.WriteAllLines(tmp_file, Design_Summary.ToArray());

            }

            return list;
        }


       public double floor_elevel = 0.0;

        public List<string> Design_Program_Individual()
        {
            //Store Bar Nos
            int bnos_1, bnos_2, bnos_3, bnos_4, bnos_5, bnos_6;

            int step = 1;

            List<string> list = new List<string>();

            if (BOQ == null)
                BOQ = new Beam_BOQ();

            BOQ.Steel_Reinforcement.Clear();

            //List<int> beam_nos = MyList.Get_Array_Intiger(Beam_Nos);
            //BOQ.BeamNos = Beam_Nos;


            //Beam_Nos = beam_nos[0].ToString();
            //List<MovingLoadAnalysis.Member> beams = new List<MovingLoadAnalysis.Member>();


            //MemberIncidence mm = AST_DOC.Members.Get_Member(beam_nos[0]);

            BOQ.Floor_ELevation = floor_elevel;

            list.Add(string.Format(""));
            list.AddRange(Get_Banner());

            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------------------------------------------------------"));
            list.Add(string.Format("BEAM_DESIGN {0} : Design Data From Structure Model for Beam {1} at Floor Level {2:f3}", step, Beam_Title, floor_elevel));
            list.Add(string.Format("------------------------------------------------------------------------------------"));


            string kStr = "";
            int c = 1;

            double Ly = 0.0;
            double Lx = 0.0;

            Ly = Math.Max(Ly1, Ly2);
            Lx = Math.Max(Lx1, Lx2);



            BOQ.Length = L;



            double l = L;
            double b = Lx;




            list.Add(string.Format("Longest Span Segment of Beam = L = {0:f3} m", l));
            //list.Add(string.Format("Width of Floor Slab on other side of this Segment of Beam = lx = {0:f3} m, ly = l = {1:f3} m", _lx1, Ly));
            list.Add(string.Format("Width of Floor Slab on One side of this Segment of Beam = lx = {0:f3} m, ly = l = {1:f3} m", Lx1, Ly1));
            list.Add(string.Format("Width of Floor Slab on other side of this Segment of Beam = lx = {0:f3} m, ly = l = {1:f3} m", Lx2, Lx2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results obtained the Maximum +ve & -ve values Bending Moments:"));
            list.Add(string.Format(""));
            //list.Add(string.Format("Maximum +ve Bending Moment at End Supports = Mu1 = {0:f3} KN-m", max_moment[0]));
            //list.Add(string.Format("Maximum -ve Bending Moment at End Supports = Mu  = -{0:f3}  KN-m", max_moment[1]));
            //list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -{0:f3} KN-m", max_moment[2]));
            //list.Add(string.Format("Maximum +ve Bending Moment at Inner Supports = Mu = {0:f3}   KN-m", max_moment[3]));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Bending Moment at End Supports = AM1 = {0:f3} KN-m", AM1));
            list.Add(string.Format("Maximum Bending Moment at Penultimate Supports = AM2 = {0:f3} KN-m ", AM2));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum +ve Bending Moment at Inside Supports = AM3 = {0:f3} KN-m", AM3));
            list.Add(string.Format("Maximum -ve Bending Moment at Inside Supports = AM4 = {0:f3} KN-m", AM4));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results obtained the Maximum Shear Forces : "));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Shear Force at End Supports = AV1 = {0:f3} KN", AV1));
            list.Add(string.Format("Maximum Shear Force at Penultimate Supports = AV2 = {0:f3} KN", AV2));
            list.Add(string.Format("Maximum Shear Force at Inside Supports = AV3 = {0:f3} KN ", AV3));
            list.Add(string.Format(""));









            list.Add(string.Format(""));

            #region   User’s Data:

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("USER’S DATA"));
            list.Add(string.Format("------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Dead/Fixed Load on Floor Slab on one side of Beam = W_DL1 = {0} KN/Sq.m.", W_DL1));
            list.Add(string.Format("Live Load on Floor Slab on one side of Beam = W_LL1 = {0} KN/Sq.m.", W_LL1));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));
            //list.Add(string.Format("Main Reinforcement"));
            //list.Add(string.Format("Reinforcement Bar diameter = Bar_dia = {0}mm, {1}mm, {2}mm", Bar_dia1, Bar_dia2, Bar_dia3));

            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia at Span Bottom = d1 = {0} mm", Bar_dia1));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia at Support Top = d2 = {0} mm", Bar_dia2));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia at Support Bottom = d3 = {0} mm", Bar_dia3));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia at Span Top = d4 = {0} mm", Bar_dia4));
            list.Add(string.Format(""));


            list.Add(string.Format("Reinforcement Clear Cover = cover = {0} mm", cover));
            list.Add(string.Format(""));
            list.Add(string.Format("Shear Reinforcement Stirrups Bar diameter = Shear_Bar_dia = {0}mm,", Shear_Bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall Depth of Beam = D = {0} mm", D));

            list.Add(string.Format("Width of Beam Web = bw = {0} mm", bw));
            list.Add(string.Format("Depth of Beam Flange (Thickness of Floor Slab) = df = {0}mm", df));
            list.Add(string.Format("Unit weight of Concrete = γc = {0} KN/Cum", gamma_c));
            list.Add(string.Format(""));
            list.Add(string.Format("Wall Thickness = tw = {0}mm", tw));
            list.Add(string.Format("Plaster Thickness = tp = {0} mm", tp));
            list.Add(string.Format("Height of Wall = hw = {0} m", hw));
            list.Add(string.Format("Unit weight of Wall =  γbw = {0} KN/Cum", gamma_bw));
            list.Add(string.Format("Weight reduction factor for Doors & Windows = fact_wall = {0}", face_wall));
            list.Add(string.Format(""));
            list.Add(string.Format("Live Load Factor = fact_LL = {0}", LL_Fact));
            list.Add(string.Format("Dead Load Factor = fact_DL = {0}", DL_Fact));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion   User’s Data:

            #region STEP 1 : LOAD CALCULATIONS

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------"));
            //list.Add(string.Format("STEP {0}.1 : LOAD CALCULATIONS", step));
            list.Add(string.Format("STEP 1 : LOAD CALCULATIONS", step));
            list.Add(string.Format("-------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Longest Span Segment of Beam = l = ly = {0:f3} m", l));
            list.Add(string.Format(""));
            list.Add(string.Format("Dead Load Calculations"));
            list.Add(string.Format("------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("For Slab on One Side of Longest Span of Beam"));
            list.Add(string.Format("---------------------------------------------"));
            list.Add(string.Format(""));

            double _lx1 = Lx;
            double _ly = Ly;
            b = _lx1;
            list.Add(string.Format("Width of Floor Slab on one side of Beam = {0:f3} m", b));
            list.Add(string.Format("Dead/Fixed Load on Floor Slab on one side of Beam = W_DL1 = {0} KN/Sq.m.", W_DL1));
            list.Add(string.Format("Live Load on Floor Slab on one side of Beam = W_LL1 = {0} KN/Sq.m.", W_LL1));
            list.Add(string.Format(""));
            list.Add(string.Format("Effective dimensions of Slab on one side of Beam = {0:f3}m x {1:f3}m", b, l));

            Lx = _lx1;
            list.Add(string.Format("lx = {0:f3}m, ly = {1:f3}m", _lx1, _ly));
            bool is_trap = true;
            if (Ly == Lx)
            {
                is_trap = false;
                list.Add(string.Format(""));
                list.Add(string.Format("If    ly <= lx    Then Effective Area of Floor Slab is Triangular."));
                Lx = _lx1 / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = lx/2 = {0:f3}/2 = {1}", _lx1, Lx));
            }
            else if (Ly < Lx)
            {
                is_trap = false;
                list.Add(string.Format("If        ly < lx         Then Effective Area of Slab is Trapezoidal."));

                Lx = Ly / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = ly/2 = {0:f3}/2 = {1}", Ly, Lx));
            }
            else
            {

                list.Add(string.Format("If        ly > lx         Then Effective Area of Slab is Trapezoidal."));

                Lx = _lx1 / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = lx/2 = {0:f3}/2 = {1}", _lx1, Lx));
            }


            //double dl_alpha = Lx / (2 * Ly);
            double dl_alpha = Lx / Ly;

            list.Add(string.Format(""));
            list.Add(string.Format("For Dead Load   α = lx / ly = {0:f3} / {1:f3} = {2:f3}", Lx, Ly, dl_alpha));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double DL_EUDL_BM1 = W_DL1 * Lx * (3.0 - 4.0 * dl_alpha * dl_alpha) / 6.0;
            double DL_Total_Load1 = W_DL1 * Lx * Ly * (1 - dl_alpha) / 2.0;

            if (is_trap)
            {
                DL_EUDL_BM1 = W_DL1 * Lx * (3.0 - 4.0 * dl_alpha * dl_alpha) / 6.0;
                DL_Total_Load1 = W_DL1 * Lx * Ly * (1 - dl_alpha) / 2.0;
                list.Add(string.Format("DL_EUDL_BM1 = Equivalent Uniformly Distributed Load for Bending Moment"));
                list.Add(string.Format("                = W_DL1 x lx x (3 - 4 x α^2) / 6"));
                list.Add(string.Format("                = {0:f3} x {1:f3} x (3 - 4 x {2:f3}^2) / 6", W_DL1, Lx, dl_alpha));
                list.Add(string.Format("                = {0:f3} kN/m", DL_EUDL_BM1));
                list.Add(string.Format(""));


                list.Add(string.Format("DL_Total_Load1 = W_DL1 x lx x ly x (1 - α) / 2"));
                list.Add(string.Format("                  = {0:f3} x {1:f3} x {2:f3} x (1 - {3:f3}) / 2", W_DL1, Lx, Ly, dl_alpha));
                list.Add(string.Format("                  = {0:f3} kN", DL_Total_Load1));
                list.Add(string.Format(""));
            }
            else
            {
                DL_EUDL_BM1 = W_DL1 * Lx / 3.0;
                DL_Total_Load1 = W_DL1 * Lx * Lx / 4;

                list.Add(string.Format("DL_EUDL_BM1 = Equivalent Uniformly Distributed Load for Bending Moment"));
                list.Add(string.Format("                = W_DL1 x lx / 3 "));
                list.Add(string.Format("                = {0:f3} x {1:f3} / 3 ", W_DL1, Lx));
                list.Add(string.Format("                = {0:f3} kN/m", DL_EUDL_BM1));
                list.Add(string.Format(""));

                list.Add(string.Format("DL_ Total _Load2 = W_DL1 x lx^2 / 4"));
                list.Add(string.Format("                 = {0:f3} x {1:f3}^2 / 4", W_DL1, Lx));
                list.Add(string.Format("                 = {0:f3} kN", DL_Total_Load1));

            }
            list.Add(string.Format(""));
            list.Add(string.Format("For Slab on Other Side of Longest Span of Beam"));
            list.Add(string.Format("-----------------------------------------------"));
            list.Add(string.Format(""));
            //l = _lx2;
            double _lx2 = Lx2;
            Lx = _lx2;
            list.Add(string.Format("Width of Floor Slab on other side of Beam = {0} m", Lx));

            double W_DL2 = W_DL1;
            double W_LL2 = W_LL1;


            list.Add(string.Format("Dead/Fixed Load on Floor Slab on other side of Beam = W_DL2 = {0} KN/Sq.m.", W_DL2));
            list.Add(string.Format("Live Load on Floor Slab on one side of Beam = W_LL2 = {0} KN/Sq.m.", W_LL2));
            list.Add(string.Format(""));


            list.Add(string.Format("Effective dimensions of Slab on other side of Beam = {0:f3}m x {1:f3}2m", Lx, Ly));
            list.Add(string.Format(""));
            list.Add(string.Format("lx = {0:f3}m, ly = {1:f3}m", Lx, Ly));

            is_trap = true;
            if (Ly == Lx)
            {
                is_trap = false;
                list.Add(string.Format("If    ly = lx    Then Effective Area of Floor Slab is Triangular."));

                Lx = _lx1 / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = lx/2 = {0:f3}/2 = {1}", _lx1, Lx));
            }
            else if (Ly < Lx)
            {
                list.Add(string.Format("If    ly < lx    Then Effective Area of Floor Slab is Triangular."));
                Lx = Ly / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = ly/2 = {0:f3}/2 = {1}", Ly, Lx));
            }
            else
            {
                list.Add(string.Format("If        ly > lx         Then Effective Area of Slab is Trapezoidal."));
                Lx = _lx2 / 2;
                list.Add(string.Format(""));
                list.Add(string.Format("lx = lx/2 = {0:f3}/2 = {1}", _lx2, Lx));
            }

            list.Add(string.Format(""));

            double DL_EUDL_BM2 = W_DL2 * Lx / 3.0;
            double DL_Total_Load2 = W_DL2 * Lx * Lx / 4.0;

            if (is_trap)
            {
                DL_EUDL_BM2 = W_DL2 * Lx * (3.0 - 4.0 * dl_alpha * dl_alpha) / 6.0;
                DL_Total_Load2 = W_DL2 * Lx * Ly * (1 - dl_alpha) / 2.0;
                list.Add(string.Format("DL_EUDL_BM2 = Equivalent Uniformly Distributed Load for Bending Moment"));
                list.Add(string.Format("                = W_DL1 x lx x (3 - 4 x α^2) / 6"));
                list.Add(string.Format("                = {0:f3} x {1:f3} x (3 - 4 x {2:f3}^2) / 6", W_DL2, Lx, dl_alpha));
                list.Add(string.Format("                = {0:f3} kN/m", DL_EUDL_BM2));
                list.Add(string.Format(""));


                list.Add(string.Format("DL_Total_Load1 = W_DL1 x lx x ly x (1 - α) / 2"));
                list.Add(string.Format("                  = {0:f3} x {1:f3} x {2:f3} x (1 - {3:f3}) / 2", W_DL2, Lx, Ly, dl_alpha));
                list.Add(string.Format("                  = {0:f3} kN", DL_Total_Load2));
                list.Add(string.Format(""));
            }
            else
            {
                DL_EUDL_BM2 = W_DL2 * Lx / 3.0;
                DL_Total_Load2 = W_DL2 * Lx * Lx / 4.0;
                list.Add(string.Format("DL_EUDL_BM2 = Equivalent Uniformly Distributed Load for Bending Moment"));
                list.Add(string.Format("                = W_DL2 x lx / 3 "));
                list.Add(string.Format("                = {0:f3} x {1:f3} / 3 ", W_DL2, Lx));
                list.Add(string.Format("                = {0:f3} kN/m", DL_EUDL_BM2));
                list.Add(string.Format(""));

                list.Add(string.Format("DL_ Total _Load2 = W_DL2 x lx^2 / 4"));
                list.Add(string.Format("                 = {0:f3} x {1:f3}^2 / 4", W_DL2, Lx));
                list.Add(string.Format("                 = {0:f3} kN", DL_Total_Load2));
                list.Add(string.Format(""));
            }



            list.Add(string.Format(""));
            list.Add(string.Format("For Live Load Calculations"));
            list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));

            double EUDL_LL = (DL_EUDL_BM1 + DL_EUDL_BM2) * W_LL1 / W_DL1;
            double Total_Load_LL = (DL_Total_Load1 + DL_Total_Load2) * W_LL1 / W_DL1;


            list.Add(string.Format("EUDL_LL = Equivalent Uniformly Distributed Load for Bending Moment"));
            list.Add(string.Format("              = (DL_EUDL_BM1 + DL_EUDL_BM2 ) x W_LL1 / W_DL1"));
            list.Add(string.Format("              = ({0:f3} + {1:f3}) x {2:f3} / {3:f3}", DL_EUDL_BM1, DL_EUDL_BM2, W_LL1, W_DL1));
            list.Add(string.Format("              = {0:f3} kN", EUDL_LL));
            list.Add(string.Format(""));


            list.Add(string.Format("Total_Load_LL = (DL_Total_Load1 + DL_Total_Load2) x W_LL1 / W_DL1"));
            list.Add(string.Format("              = ({0:f3} + {1:f3}) x {2:f3} / {3:f3}", DL_Total_Load1, DL_Total_Load2, W_LL1, W_DL1));
            list.Add(string.Format("              = {0:f3} kN", Total_Load_LL));
            list.Add(string.Format(""));




            list.Add(string.Format("Width of Beam Web = bw = {0}mm", bw));
            list.Add(string.Format("Depth of Beam Flange = Thickness of Slab = df = {0}mm", df));
            list.Add(string.Format("Unit weight of Concrete = γc = {0} kN/Cum", gamma_c));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(i) Dead Load"));
            list.Add(string.Format("--------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Left Weight of Beam"));
            list.Add(string.Format("Width of Beam Web = bw = {0}mm", bw));

            double dw = D - df;
            list.Add(string.Format("Depth of Beam Web = dw = Overall Depth - Thickness of Slab"));
            list.Add(string.Format("                                = D - df"));
            list.Add(string.Format("                                = {0} - {1}", D, df));
            list.Add(string.Format("                                = {0}mm", dw));
            list.Add(string.Format(""));

            double SELF_WEIGHT = bw / 1000.0 * dw / 1000.0 * gamma_c;
            list.Add(string.Format("Self Weight of Beam = SELF_WEIGHT = bw x dw x γc "));
            list.Add(string.Format("                                  = {0:f3} x {1:f3} x {2}", bw / 1000, dw / 1000, gamma_c));
            list.Add(string.Format("                                  = {0:f3} kN/m", SELF_WEIGHT));
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) Wall Load"));
            list.Add(string.Format("----------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Wall Thickness = tw = {0}mm", tw));
            list.Add(string.Format("Plaster Thickness = tp = {0} mm", tp));
            list.Add(string.Format("Height of Wall = hw = {0} m", hw));
            list.Add(string.Format("Unit weight of Wall =  γbw = {0} kN/Cu.m", gamma_bw));
            list.Add(string.Format("Weight reduction factor for Doors & Windows = fact_wall = {0}", face_wall));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Wall Load"));
            list.Add(string.Format(""));
            list.Add(string.Format("= WALL_WEIGHT "));


            double WALL_WEIGHT = ((tw + 2 * tp) / 1000) * hw * gamma_bw * face_wall;
            list.Add(string.Format("= ((tw+2xtp)/1000) x hw x γbw x fact_wall"));
            list.Add(string.Format("= (({0}+2x{1})/1000) x {2} x {3} x {4}", tw, tp, hw, gamma_bw, face_wall));
            list.Add(string.Format("= {0:f3} kN/m", WALL_WEIGHT));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iii) Total EUDL for Dead Load = EUDL_DL"));
            list.Add(string.Format(""));

            double EUDL_DL = DL_EUDL_BM1 + DL_EUDL_BM2 + SELF_WEIGHT + WALL_WEIGHT;
            list.Add(string.Format("= DL_EUDL_BM1 + DL_EUDL_BM2 + SELF_WEIGHT + WALL_WEIGHT"));
            list.Add(string.Format("= {0:f3} + {1:f3} + {2:f3} + {3:f3}", DL_EUDL_BM1, DL_EUDL_BM2, SELF_WEIGHT, WALL_WEIGHT));
            list.Add(string.Format("= {0:f3} kN/m", EUDL_DL));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iv) Total Load for Dead Load = Total_Load_DL"));
            list.Add(string.Format(""));

            double Total_Load_DL = DL_Total_Load1 + DL_Total_Load2 + SELF_WEIGHT * l + WALL_WEIGHT * l;
            list.Add(string.Format("= DL_Total_Load1 + DL_Total_Load2+ SELF_WEIGHT x l + WALL_WEIGHT x l"));
            list.Add(string.Format("= {0:f3} + {1:f3} + {2:f3} x {3:f3} + {4:f3} x {3:f3}", DL_Total_Load1, DL_Total_Load2, SELF_WEIGHT, l, WALL_WEIGHT));
            list.Add(string.Format("= {0:f3} kN", Total_Load_DL));
            list.Add(string.Format(""));
            #endregion STEP 1 : LOAD CALCULATIONS

            #region STEP 2 : CHARACTERISTIC LOADS

            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------"));
            //list.Add(string.Format("STEP {0}.2 : CHARACTERISTIC LOADS", step));
            list.Add(string.Format("STEP 2 : CHARACTERISTIC LOADS", step));
            list.Add(string.Format("---------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("        EUDL for Dead Load = EUDL_DL = {0:f3} kN/m", EUDL_DL));
            list.Add(string.Format("        EUDL for Live Load = EUDL_LL = {0:f3} kN/m", EUDL_LL));
            list.Add(string.Format(""));
            list.Add(string.Format("        Total Load for Dead Load = Total_Load_DL = {0:f3} kN", Total_Load_DL));
            list.Add(string.Format("        Total Load for Live Load = Total_Load_LL = {0:f3} kN", Total_Load_LL));
            list.Add(string.Format(""));

            #endregion STEP2 : CHARACTERISTIC LOADS

            #region   STEP 3 : CALCULATION FOR BENDING MOMENT
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------------------"));
            //list.Add(string.Format("STEP {0}.3 : CALCULATION FOR BENDING MOMENT", step));
            list.Add(string.Format("STEP 3 : CALCULATION FOR BENDING MOMENT", step));
            list.Add(string.Format("---------------------------------------------"));
            list.Add(string.Format(""));

            double fact_LL = LL_Fact;
            double fact_DL = DL_Fact;



            list.Add(string.Format("Dead Load factor = fact_DL = {0}", fact_DL));
            list.Add(string.Format("Live Load factor = fact_LL = {0}", fact_LL));
            list.Add(string.Format(""));
            list.Add(string.Format("Characteristic Dead Load = EUDL_DL = {0:f3} KN/m", EUDL_DL));
            list.Add(string.Format(""));

            double Design_DL = EUDL_DL * fact_DL;
            list.Add(string.Format("Factored Dead Load = Design_DL = EUDL_DL x fact_DL "));
            list.Add(string.Format("                             = {0:f3} x {1}", EUDL_DL, fact_DL));
            list.Add(string.Format("                             = {0:f3} KN/m", Design_DL));
            list.Add(string.Format(""));
            list.Add(string.Format("Characteristic Live Load = EUDL_LL = {0:f3} KN/m", EUDL_LL));
            list.Add(string.Format(""));


            double Design_LL = EUDL_LL * fact_LL;
            list.Add(string.Format("Factored Live Load = Design_LL = EUDL_LL x fact_LL"));
            list.Add(string.Format("                             = {0:f3} x {1}", EUDL_LL, fact_LL));
            list.Add(string.Format("                             = {0:f3} KN/m", Design_LL));
            list.Add(string.Format(""));

            double EUDL_FL = Design_DL;
            list.Add(string.Format("Fixed Load EUDL = EUDL_FL = Design_DL = {0:f3} KN/m", EUDL_FL));
            list.Add(string.Format(""));

            double EUDL_NF = EUDL_LL * fact_LL + EUDL_DL * fact_DL;

            list.Add(string.Format("Not Fixed Load EUDL = EUDL_NF = EUDL_LL x fact_LL + EUDL_DL x fact_DL"));
            list.Add(string.Format("                              = {0:f3} x {1} + {2:f3} x {3}", EUDL_LL, fact_LL, EUDL_DL, fact_DL));
            list.Add(string.Format("                              = {0:f3} KN/m", EUDL_NF));
            list.Add(string.Format(""));

            double BM1 = (EUDL_NF * l * l) / 10.0 + (EUDL_FL * l * l) / 12.0;

            list.Add(string.Format("BM1 = Bending Moments in End Span Centre = (EUDL_NF x l^2)/10 + (EUDL_FL x l^2)/12"));
            list.Add(string.Format("                                         = ({0:f3} x {1:f3}^2)/10 + ({2:f3} x {1:f3}^2)/12", EUDL_NF, l, EUDL_FL));
            list.Add(string.Format("                                         = {0:f3} kN-m", BM1));
            list.Add(string.Format(""));

            double BM2 = (EUDL_NF * l * l) / 12.0 + (EUDL_FL * l * l) / 24.0;

            list.Add(string.Format("BM2 = Bending Moments in Inside Span Centre = (EUDL_NF x l^2)/12 + (EUDL_FL x l^2)/24"));
            list.Add(string.Format("                                            = ({0:f3} x {1:f3}^2)/12 + ({2:f3} x {1:f3}^2)/24", EUDL_NF, l, EUDL_FL));
            list.Add(string.Format("                                            = {0:f3} kN-m", BM2));
            list.Add(string.Format(""));


            double BM_Sag = Math.Max(BM1, BM2);
            list.Add(string.Format("Maximum Sag Bending Moment of BM1 & BM2 = BM_Sag = {0:f3} kN-m", BM_Sag));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double BM3_1 = -((EUDL_NF * l * l) / 9 + (EUDL_FL * l * l) / 10);


            list.Add(string.Format("BM3 (1)  Bending Moments in Penultimate End Supports = - [(EUDL_NF x l^2)/9 + (EUDL_FL x l^2)/10]"));
            list.Add(string.Format("                                                     = - [({0:f3} x {1:f3}^2)/9 + ({2:f3} x {1:f3}^2)/10]", EUDL_NF, l, EUDL_FL));
            list.Add(string.Format("                                                     = {0:f3} KNm", BM3_1));
            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results,"));
            //list.Add(string.Format("BM3 (2)  Maximum Bending Moment. in Penultimate Supports = **** kNm (Take Absolute value)"));

            //double BM3_2 = -90.23;
            //double BM3_2 = pen_ult_max_moment[0];
            double BM3_2 = AM2;

            list.Add(string.Format("BM3 (2)  Maximum Bending Moment. in Penultimate Supports = AM2 = {0:f3} kN-m", BM3_2));
            list.Add(string.Format(""));

            double BM3 = Math.Max(Math.Abs(BM3_1), Math.Abs(BM3_2));
            list.Add(string.Format("BM3 = (Absolute Maximum value of BM3 (1) and BM3 (2)) = -{0:f3} KN-m ", BM3));
            list.Add(string.Format(""));

            double BM4_1 = -((EUDL_NF * l * l) / 9.0 + (EUDL_FL * l * l) / 12.0);
            list.Add(string.Format("BM4 (1) Bending Moments in Inside Supports = - [(EUDL_NF x l^2)/9 + (EUDL_DL x l^2)/12]"));
            list.Add(string.Format("                                           = - [({0:f3} x {1:f3}^2)/9 + ({2:f3} x {1:f3}^2)/12]", EUDL_NF, l, EUDL_FL));
            list.Add(string.Format("                                           = {0:f3} KN-m", BM4_1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("From Analysis Results,"));


            //double BM4_2 = max_moment[2];
            double BM4_2 = AM3;


            list.Add(string.Format("BM4 (2) Maximum Bending Moments in Inside Supports = AM3 = -{0:f3} kN-m", BM4_2));
            list.Add(string.Format(""));

            double BM4 = Math.Max(Math.Abs(BM4_1), Math.Abs(BM4_2));
            list.Add(string.Format("BM4 = (Absolute Maximum value of BM4 (1) and BM4 (2))) = -{0:f3} kN-m.", BM4));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double BM_hog = Math.Max(Math.Abs(BM3), Math.Abs(BM4));
            list.Add(string.Format("Taking absolute maximum value of BM3 and BM4,"));
            list.Add(string.Format("Maximum Hogging Bending Moments = BM_hog = -{0:f3} kN-m", BM_hog));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion     STEP 3 : CALCULATION FOR BENDING MOMENT

            #region STEP 4 : CALCULATION FOR SHEAR FORCE
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------------"));
            //list.Add(string.Format("STEP {0}.4 : CALCULATION FOR SHEAR FORCE ", step));
            list.Add(string.Format("STEP 4 : CALCULATION FOR SHEAR FORCE ", step));
            list.Add(string.Format("-----------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(i) Shear force at End Support"));
            list.Add(string.Format(""));

            double V1_1 = Total_Load_DL * 0.4 + (Total_Load_DL * 0.5 + Total_Load_LL * 1.5) * 0.45;
            list.Add(string.Format("= Total_Load_DL x 10.4 + [Total_Load_DL x 0.5 + Total_Load_LL x 1.5] x 0.45"));
            list.Add(string.Format("= {0:f3} x 0.4 + [{0:f3} x 0.5 + {1:f3} x 1.5] x 0.45", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} kN", V1_1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            //double V1_2 = 45.02;
            //double V1_2 = StructureAnalysis.GetJoint_ShearForce(end_support);
            double V1_2 = AV1;
            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Shear Force at Joints at either End Supports = AV1 = {0:f3} kN", V1_2));
            list.Add(string.Format(""));

            double V1 = Math.Max(V1_1, V1_2);
            list.Add(string.Format(""));
            list.Add(string.Format("V1 = Higher of the above two values =  {0:f3} kN", V1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) Shear Force on outer side at Penultimate Supports"));
            list.Add(string.Format(""));

            double V2_1 = Total_Load_DL * 1.5 * 0.6 + Total_Load_LL * 1.5 * 0.6;

            list.Add(string.Format("= Total_Load_DL x 1.5 x 0.6 + Total_Load_LL x 1.5 x 0.6"));
            list.Add(string.Format("= {0:f3} x 1.5 x 0.6 + {1:f3} x 1.5 x 0.6", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} KN", V2_1));
            list.Add(string.Format(""));


            //double V2_2 = 75.70;
            //double V2_2 = StructureAnalysis.GetJoint_ShearForce(pen_ultimate);
            double V2_2 = AV2;
            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum Shear Force at Joints at either Penultimate Supports = AV2 = {0:f3} KN", V2_2));
            list.Add(string.Format(""));


            double V2 = Math.Max(V2_1, V2_2);
            list.Add(string.Format("V2 = Higher of the above two values = {0:f3} KN", V2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iii) Shear Force on Inner side at Penultimate Supports"));
            list.Add(string.Format(""));

            double V3_1 = Total_Load_DL * 0.55 + (Total_Load_DL * 0.5 + Total_Load_LL * 1.5) * 0.6;

            list.Add(string.Format("= Total_Load_DL x 0.55 + [Total_Load_DL x 0.5 + Total_Load_LL x 1.5] x 0.6"));
            list.Add(string.Format("= {0:f3} x 0.55 + [{0:f3} x 0.5 + {1:f3} x 1.5] x 0.6", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} KN", V3_1));
            list.Add(string.Format(""));

            //double V3_2 = 12.023;
            //double V3_2 = StructureAnalysis.GetJoint_ShearForce(inner_support);
            double V3_2 = AV3;

            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum Shear Force at Joints at Inner side = AV3 = {0:f3} KN", V3_2));
            list.Add(string.Format(""));

            double V3 = Math.Max(V3_1, V3_2);
            list.Add(string.Format("V3 = Higher of the above two values = {0:f3} KN", V3));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("(iv) Shear Force at Inner Supports"));
            list.Add(string.Format(""));

            double V4_1 = Total_Load_DL * 0.5 + (Total_Load_DL * 0.5 + Total_Load_LL * 1.5) * 0.6;
            list.Add(string.Format("= Total_Load_DL x 0.5 + [Total_Load_DL x 0.5 + Total_Load_LL x 1.5] x 0.6"));
            list.Add(string.Format("= {0:f3} x 0.5 + [{0:f3} x 0.5 + {1:f3} x 1.5] x 0.6", Total_Load_DL, Total_Load_LL));
            list.Add(string.Format("= {0:f3} KN", V4_1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double V4_2 = AV3;

            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum Shear Force at Joint at Inner Supports = {0:f3} KN", V4_2));
            list.Add(string.Format(""));

            double V4 = Math.Max(V4_1, V4_2);
            list.Add(string.Format("V4 = Higher of the above two values = {0:f3} KN", V4));
            list.Add(string.Format(""));

            #endregion STEP 4 : CALCULATION FOR SHEAR FORCE

            IS_DESIGN_OK = true;

            #region STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("----------------------------------------------------------"));
            ////list.Add(string.Format("STEP {0}.5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM ", step));
            //list.Add(string.Format("STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM ", step));
            //list.Add(string.Format("        (D = Thickness of Floor Slab + Depth of Beam Web)"));
            //list.Add(string.Format("----------------------------------------------------------"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //MyList
            //double Mu = -239.35;
            //double Mu = max_moment[2];
            double Mu = AM4;
            //list.Add(string.Format("From Analysis Results,"));
            //list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = AM4 = -{0:f3} kN-m ", Mu));
            //list.Add(string.Format(""));
            //list.Add(string.Format("50% of Hogging Moment will be taken by Concrete and "));
            //list.Add(string.Format("50% of Hogging Bending Moment will be taken by Compression Steel,"));
            //list.Add(string.Format(""));
            ////list.Add(string.Format("Effective Depth = d"));
            //list.Add(string.Format("Effective Depth = d >= [Mu / 0.138 x fck x b]^0.5"));
            double Q = 0.138 * fck;

            double d = Math.Pow((Math.Abs(Mu) / 0.138 * fck * b), 0.5);

            d = Math.Pow((Math.Abs(Mu) / Q * 1000), 0.5);


            ////d = Math.Pow((Math.Abs(Mu * 1000000) / 0.138 * fck * b), 0.5);


            ////d = Math.Pow((Math.Abs(Mu * 1000000) / 0.138 * fck * 1000), 0.5);

            //list.Add(string.Format("                    >= [{0:f3} / 0.138 x {1} x 1000]^0.5", Mu, fck));
            //list.Add(string.Format("                    >= {0:f3} mm", d));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Overall Depth = D"));


            double _D = d + (Bar_dia1 / 2) + cover;
            //list.Add(string.Format("D = d + (Bar_dia / 2) + Cover"));
            //list.Add(string.Format("  = {0:f3} + ({1} / 2) + {2}", d, Bar_dia1, cover));

            //if (_D < D)
            //{
            //    if (IS_DESIGN_OK) IS_DESIGN_OK = true;

            //    list.Add(string.Format("  = {0:f3} mm < Provided D = {1} mm,   Hence OK", _D, D));
            //}
            //else
            //{
            //    list.Add(string.Format("  = {0:f3} mm > Provided D = {1} mm,   Hence NOT OK", _D, D));
            //    if (IS_DESIGN_OK) IS_DESIGN_OK = false;
            //}
            //list.Add(string.Format(""));

            //double V = 160.048;
            double V = Math.Max(Math.Max(V1, V2), Math.Max(V3, V4));
            //list.Add(string.Format("Maximum Shear Force at Support = V = {0:f3} KN", V));
            //list.Add(string.Format(""));


            //double tau_v = 2.8; // from Table

            double tau_v = Tables.Permissible_Shear_Stress(0.5, (int)fck, ref kStr);

            //double Asc1 = Math.Abs(V) / (b * d);

            //list.Add(string.Format("Shear Stress = V, For Concrete Grade M{0}, Permissible Shear Stress = τv = {1} N/Sq.m.", fck, tau_v));
            //list.Add(string.Format(""));
            //list.Add(string.Format("τv = V / (b x d)"));
            //list.Add(string.Format(" d = V / (b x τv)"));
            ////list.Add(string.Format("   = (160.408 x 1000) / (1000 x (2.8/2))"));
            ////list.Add(string.Format("   = ({0:f3} x 1000) / (1000 x ({1:f3}/2))", V, tau_v));
            //list.Add(string.Format("   = ({0:f3} x 1000) / (1000 x ({1:f3}))", V, tau_v));

            //double _d = V * 1000.0 / (1000 * tau_v / 2.0);
            double _d = V * 1000.0 / (1000 * tau_v);

            //list.Add(string.Format("   = {0:f3} mm", _d));
            //list.Add(string.Format(""));

            double _D2 = _d + Bar_dia1 / 2.0 + cover;
            //list.Add(string.Format("Overall Depth = D = d + Bar_dia / 2 + Cover"));
            //list.Add(string.Format("                  = {0:f3} + ({1} / 2) + {2}", _d, Bar_dia1, cover));
            //list.Add(string.Format("                  = {0:f3} mm", _D));


            //if (_D2 < D)
            //{
            //    list.Add(string.Format("                  = {0:f3} mm < Provided D = {1} mm,   Hence OK", _D2, D));
            //}
            //else
            //{
            //    if (IS_DESIGN_OK) IS_DESIGN_OK = false;
            //    list.Add(string.Format("                  = {0:f3} mm > Provided D = {1} mm,   Hence NOT OK", _D2, D));
            //}

            //list.Add(string.Format(""));
            //list.Add(string.Format(""));

            double D_prov = Math.Max(_D, _D2);
            //list.Add(string.Format("Considering above two Overall Depths of {0:f3}mm & {1:f3}mm", _D, _D2));


            D_prov = ((int)D_prov) / 100.0;


            double sd = (int)((D_prov - ((int)D_prov)) * 100);

            if (sd > 50)
            {
                sd = 100;
            }
            else
            {
                sd = 50;

            }
            D_prov = (((int)D_prov) * 100 + sd);

            list.Add(string.Format("Provide Overall Depth = D = {0}mm", D));
            list.Add(string.Format("Effective Depth = d = D - (Bar_dia / 2) - cover"));

            double eff_d = D - Bar_dia1 / 2.0 - cover;
            list.Add(string.Format("                    = {0} - ({1}/2) - {2}", D, Bar_dia1, cover));
            list.Add(string.Format("                    = {0:f2} mm", eff_d));
            list.Add(string.Format(""));

            #endregion STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM

            #region STEP 5 : CALCULATION FOR WIDTH OF FLANGE
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------"));
            //list.Add(string.Format("STEP {0}.6 : CALCULATION FOR WIDTH OF FLANGE", step));
            //list.Add(string.Format("STEP 6 : CALCULATION FOR WIDTH OF FLANGE", step));
            list.Add(string.Format("STEP 5 : CALCULATION FOR WIDTH OF FLANGE", step));
            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format(""));

            list.Add(string.Format("Width of Flange = bf"));
            list.Add(string.Format("                = (lo/6) + bw + 6 x df"));

            double lo = 0.7 * l * 1000;
            double bf = (lo / 6) + bw + 6 * df;

            list.Add(string.Format("Effective Span = lo = 0.7 x (Span Length of Beam = l)"));
            list.Add(string.Format("                    = 0.7 x {0}", l * 1000));
            list.Add(string.Format("                    = {0:f0} mm", lo));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Width of Beam Stem/Web = bw = {0} mm", bw));
            list.Add(string.Format("Depth of RCC Slab = df = {0} mm", df));
            list.Add(string.Format(""));

            list.Add(string.Format("Width of Flange = bf = (Lo/6) + bw + 6 x df"));
            list.Add(string.Format("                     = ({0}/6) + {1} + 6 x {2}", lo, bw, df));
            list.Add(string.Format("                     = {0:f1} mm", bf));
            list.Add(string.Format(""));
            #endregion STEP 6 : CALCULATION FOR WIDTH OF FLANGE

            #region STEP 6 : CAPACITY CALCULATION FOR BENDING MOMENT

            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.7 : CAPACITY CALCULATION FOR BENDING MOMENT", step));
            list.Add(string.Format("STEP 6 : CAPACITY CALCULATION FOR BENDING MOMENT", step));
            list.Add(string.Format("-----------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Capacity of Beam Section to take Bending Moment"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double M_ultimate = 0.138 * fck * bf * eff_d * eff_d / 1000000;
            list.Add(string.Format("M_ultimate = Q x bf x d^2    [ Q = 0.138 x fck]"));
            list.Add(string.Format(""));
            list.Add(string.Format("           = 0.138 x {0} x {1:f2} x {2:f2}^2 / 10^6", fck, bf, eff_d));
            if (M_ultimate > BM_Sag)
                list.Add(string.Format("           = {0:f3} kN-m > BM_Sag = {1:f3} kN-m", M_ultimate, BM_Sag));
            else
                list.Add(string.Format("           = {0:f3} kN-m < BM_Sag = {1:f3} kN-m", M_ultimate, BM_Sag));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion STEP 7 : CAPACITY CALCULATION FOR BENDING MOMENT

            #region STEP 7 : CALCULATION FOR REINFORCEMENT STEEL

            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.8 : CALCULATION FOR REINFORCEMENT STEEL AT END SPAN", step));
            //list.Add(string.Format("STEP 8 : CALCULATION FOR REINFORCEMENT STEEL AT END SPAN", step));
            list.Add(string.Format("STEP 7 : REINFORCEMENT STEEL AT SPAN BOTTOM", step));
            list.Add(string.Format("-------------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));
            //list.Add(string.Format("------------------------------"));
            //list.Add(string.Format("STEP {0}.8.1 : END SPAN", step));
            //list.Add(string.Format("-------------------------------"));
            list.Add(string.Format(""));

            double Mult = BM1;
            //list.Add(string.Format("Mult = BM1 = {0:f3} KNm", Mult));
            list.Add(string.Format("Mu = BM1 = {0:f3} KNm", Mult));
            list.Add(string.Format(""));
            list.Add(string.Format("Lever Arm Factor = j"));
            list.Add(string.Format(""));

            double j = 0.5 + Math.Sqrt(Math.Abs(0.25 - Mult * 1000000 / (0.87 * fck * bf * eff_d * eff_d)));
            //list.Add(string.Format("j = 0.5 + √[0.25 - Mult x 10^6 / (0.87 x fck x bf x d^2)]"));
            list.Add(string.Format("j = 0.5 + √[0.25 - Mu x 10^6 / (0.87 x fck x bf x d^2)]"));
            list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3}^2)]", Mult, fck, bf, eff_d));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));
            list.Add(string.Format("From Stress consideration,"));


            double Xv = eff_d * (1 - j) / 0.420;
            list.Add(string.Format("Xu = d x (1 - j) / 0.42"));
            list.Add(string.Format("   = {0} x (1 - {1:f3}) / 0.42", eff_d, j));

            if (Xv < df)
                list.Add(string.Format("   = {0:f3} mm < df = {1:f3} mm", Xv, df));
            else
                list.Add(string.Format("   = {0:f3} mm > df = {1:f3} mm", Xv, df));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("So, the neutral axis is within the flange of Beam Section."));
            list.Add(string.Format(""));

            double Ast = Mult * 1000000 / (0.87 * fy * j * eff_d);
            list.Add(string.Format("Area of Steel required = Ast = Mu x 10^6 / (0.87 x fy x j x d)"));
            //list.Add(string.Format("Area of Steel required = Ast = Mult x 10^6 / (0.87 x fy x j x d)"));
            list.Add(string.Format("                             = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mult, fy, j, eff_d));
            list.Add(string.Format("                             = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));

            double bar_nos = 3;
            double Ast1 = Math.PI * Bar_dia1 * Bar_dia1 / 4;
            //bar_nos = Ast / Ast1;


            bar_nos = (int)(Ast / Ast1);

            bar_nos = bar_nos + 1;

            if (bar_nos < 2)
                bar_nos = 2;

            if (bar_nos % 2 != 0)
                bar_nos = bar_nos + 1;// bar nos allways an even number

            bnos_1 = (int)bar_nos;


            Ast1 = Ast1 * bar_nos;



            Steel_Reinforcement ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[1] in End Span Bottom";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = Bar_dia1;
            ssr.Length = L;
            BOQ.Steel_Reinforcement.Add(ssr);



            //list.Add(string.Format("Let us provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia1));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as End Span Bottom Steel (Ast = {2:f3} Sq.mm.)", bar_nos, Bar_dia1, Ast1));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[1] in End Span Bottom."));
            //list.Add(string.Format(""));

            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia = d1 = {0} mm.", Bar_dia1));
            list.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Bottom, (Ast = {2:f3} Sq.mm)", bar_nos, Bar_dia1, Ast1));
            list.Add(string.Format(""));

            //list.Add(string.Format("Ast1 = {0:f3} Sq.mm.", Ast1));
            #endregion STEP 8 : CALCULATION FOR REINFORCEMENT STEEL

            #region STEP 9 : INSIDE PENULTIMATE SPAN

            //list.Add(string.Format(""));
            //list.Add(string.Format("-------------------------------------"));
            ////list.Add(string.Format("STEP {0}.9 : INSIDE PENULTIMATE SPAN", step));
            //list.Add(string.Format("STEP 9 : INSIDE PENULTIMATE SPAN", step));
            //list.Add(string.Format("-------------------------------------"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            //list.Add(string.Format("Steel Grade = fy = {0}", fy));
            //list.Add(string.Format(""));

            //Mult = BM2;
            //list.Add(string.Format("Mult = BM2 = {0:f3} KNm", Mult));
            //list.Add(string.Format(""));

            //j = 0.5 + Math.Sqrt(Math.Abs(0.25 - Mult * 1000000 / (0.87 * fck * bf * eff_d * eff_d)));

            //list.Add(string.Format("j = 0.5 + √[0.25 - Mult x 10^6 / (0.87 x fck x bf x d^2)]"));
            //list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3}^2)]", Mult, fck, bf, eff_d));
            //list.Add(string.Format("  = {0:f3}", j));
            //list.Add(string.Format(""));

            //Ast = Mult * 1000000 / (0.87 * fy * j * eff_d);

            //list.Add(string.Format("Area of Steel required = Ast = Mult x 10^6 / (0.87 x fy x j x d)"));
            //list.Add(string.Format("                             = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mult, fy, j, eff_d));
            //list.Add(string.Format("                             = {0:f3} Sq.mm.", Ast));
            //list.Add(string.Format(""));

            //double Ast2 = Math.PI * Bar_dia1 * Bar_dia1 / 4;

            //bar_nos = (int)(Ast / Ast2);
            //bar_nos = bar_nos + 1;

            //if (bar_nos < 2)
            //    bar_nos = 2;

            //Ast2 = Ast2 * bar_nos;


            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "B_AST[2] in Inside Span Bottom";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = Bar_dia1;
            //if(inn_len == 0)
            //    ssr.Length = pen_ult_len + inn_len;
            //else
            //    ssr.Length = inn_len;

            //BOQ.Steel_Reinforcement.Add(ssr);


            //list.Add(string.Format("Let us provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia1));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inside Span Bottom Steel (Ast = {2:f3} Sq.mm.)", bar_nos, Bar_dia1, Ast2));
            ////list.Add(string.Format("Ast2 = {0:f3} Sq.mm.", Ast2));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[2] in Inside Span Bottom."));

            //#endregion STEP 9 : INSIDE PENULTIMATE SPAN

            //#region STEP 10 : REINFORCEMENT AT END SUPPORTS

            //list.Add(string.Format(""));
            //list.Add(string.Format("---------------------------------------------------------------"));
            ////list.Add(string.Format("STEP {0}.10 : REINFORCEMENT AT PENULTIMATE END SUPPORTS", step));
            //list.Add(string.Format("STEP 10 : REINFORCEMENT AT PENULTIMATE END SUPPORTS", step));
            //list.Add(string.Format("---------------------------------------------------------------"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            //list.Add(string.Format("Steel Grade = fy = {0}", fy));
            //list.Add(string.Format(""));
            //list.Add(string.Format("(i) Bottom Steel Reinforcement at Penultimate End Support "));
            //list.Add(string.Format(""));
            ////list.Add(string.Format("From Analysis Results,"));

            ////double Mul = 143.714;
            ////double Mul = BM_hog;
            //double Mul = AM2;
            ////list.Add(string.Format("Maximum +ve Bending Moment at End Supports = Mu1 = {0:f3} KNm  (Member B1 & B6 and Joints J1 and J7)", Mul));
            //list.Add(string.Format("Maximum Bending Moment at Penultimate End Supports = AM2 = {0:f3} KN-m ", Mul));
            //list.Add(string.Format(""));

            //j = 0.5 + Math.Sqrt(Math.Abs(0.25 - Mul * 1000000 / (0.87 * fck * bf * eff_d * eff_d)));
            ////list.Add(string.Format("j = 0.5 + √[0.25 - Mu1 x 10^6 / (0.87 x fck x bf x d^2)]"));
            ////list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f2} x {3}^2)]", Mul, fck, bf, eff_d));
            //////list.Add(string.Format("  = 0.974"));
            ////list.Add(string.Format("  = {0:f3}", j));
            //list.Add(string.Format(""));


            //Ast = Mul * 1000000 / (0.87 * fy * j * eff_d);
            ////list.Add(string.Format("Area of Steel required = Ast = Mu1 x 10^6 / (0.87 x fy x j x d)"));
            ////list.Add(string.Format("                             = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mul, fy, j, eff_d));
            ////list.Add(string.Format("                             = {0:f3} Sq.mm.", Ast));
            ////list.Add(string.Format(""));
            //double Ast3 = (Math.PI * Bar_dia1 * Bar_dia1 / 4.0);




            //bar_nos = (int)(Ast / Ast3);
            //bar_nos = bar_nos + 1;

            //if (bar_nos < 2) bar_nos = 2;

            //Ast3 = Ast3 * bar_nos;



            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "B_AST[3] at End Support Bottom";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = Bar_dia1;
            //ssr.Length = len;
            //BOQ.Steel_Reinforcement.Add(ssr);


            //list.Add(string.Format("Provide {0} Nos {1} mm dia bars as Ast1 as bottom Steel, (Ast = {2:f3} Sq.mm)", bar_nos, Bar_dia1, Ast3));
            ////list.Add(string.Format("Ast_provided = {0}Y' - {1} at End Support Bottom Steel", bar_nos, Bar_dia1));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[3] at End Support Bottom."));

            ////list.Add(string.Format("Ast3 = {0:f3} Sq.mm.", Ast3));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("(ii) Top Steel Reinforcement at Penultimate End Support:"));
            //list.Add(string.Format(""));

            ////Mu = -188.72;
            ////Mu = max_moment[1];
            //Mu = BM_hog;
            ////Mu = AM2;
            ////Mu = BM3;
            ////list.Add(string.Format("From Analysis Results,"));
            ////list.Add(string.Format("Maximum -ve Bending Moment at End Supports = Mu  = -{0} kN-m  (Member B1 & B6 and Joints J1 and J7)", Mu));
            ////list.Add(string.Format("Maximum Bending Moment at Penultimate End Supports  = Mu = AM2  = -{0:f3} kN-m", Mu));
            //list.Add(string.Format("Maximum Bending Moment at Penultimate End Supports  = Mu = BM3  = -{0:f3} kN-m", Mu));
            //list.Add(string.Format(""));

            //list.Add(string.Format("Mul = (0.138 x fck x bw / d^2)/10^6"));

            //Mul = ((0.138 * fck * bw) * (eff_d * eff_d) / 1000000);
            //list.Add(string.Format("    = (0.138 x {0} x {1} x {2}^2)/10^6", fck, bw, eff_d));
            //list.Add(string.Format("    = {0:f3} kN-m", Mul));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Now, Tension Steel at top at Penultimate End Supports are calculated"));
            //double d_dash = cover + Bar_dia1 / 2.0;
            //list.Add(string.Format("d' = Cover + Bar_dia / 2.0 = {0} + {1}/2 = {2} mm", cover, Bar_dia1, d_dash));
            //list.Add(string.Format(""));

            //double Xu = 0.48 * eff_d;
            //list.Add(string.Format("Xu = 0.48 x d"));
            //list.Add(string.Format(""));

            //j = (1 - 0.42 * 0.48);
            //list.Add(string.Format("  j = (d - 0.42 x Xu) / d"));
            //list.Add(string.Format("    = (d - 0.42 x 0.48 x d)/d", Xv));
            //list.Add(string.Format("    = (1 - 0.42 x 0.48) = {0:f3}", j));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Ast = [Mul x 10^6 / (0.87 x fy x j x d)] + [(Mu - Mu1) x 10^6 / (0.87 x fy - d’)]"));

            //Ast = (Mul * 1000000 / (0.87 * fy * j * eff_d)) + (Math.Abs(Mu - Mul) * 1000000 / (0.87 * fy * (eff_d - d_dash)));
            //list.Add(string.Format("    = [{0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})]", Mul, fy, j, eff_d));
            //list.Add(string.Format("      + [({0:f3} - {1:f3}) x 10^6 / (0.87 x {2} x  ({3} - {4}))]", Mu, Mul, fy, eff_d, d_dash));
            //list.Add(string.Format(""));
            //list.Add(string.Format("    = {0:f3} Sq.mm.", Ast));
            //list.Add(string.Format(""));

            //double Ast4 = Math.PI * Bar_dia2 * Bar_dia2 / 4.0;

            //bar_nos = (int)(Ast / Ast4);
            //bar_nos = bar_nos + 1;

            //if (bar_nos < 2) bar_nos = 2;
            //Ast4 = Ast4 * bar_nos;


            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "B_AST[4] at Penultimate End Supports (Top)";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = Bar_dia2;
            //ssr.Length = len;
            //BOQ.Steel_Reinforcement.Add(ssr);

            //list.Add(string.Format(" Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia2));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as End Support Top Steel (Ast = {2:f3} Sq.mm.)", bar_nos, Bar_dia2, Ast4));
            ////list.Add(string.Format("Ast4 = {0:f3} Sq.mm.", Ast4));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[4], at Penultimate End Supports (Top)."));
            //list.Add(string.Format(""));
            //list.Add(string.Format("(iii) Bottom Steel Reinforcement at Penultimate End Support"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("d' =  Bardia / 2 + Cover = ({0}/2) + {1} = {2} mm", Bar_dia1, cover, d_dash));
            //list.Add(string.Format(""));

            //double epsylon = 0.0035 * (0.48 - d_dash / eff_d) / 0.48;
            //list.Add(string.Format("e = Stress in Compressive Steel = 0.0035 x (0.48 - d’ / d) / 0.48 (From Formula)"));
            //list.Add(string.Format("                                = 0.0035 x (0.48 - {0:f3} / {1}) / 0.48", d_dash, eff_d));
            //list.Add(string.Format("                                = {0:f6}", epsylon));
            //list.Add(string.Format(""));


            //double sigma_c1 = 361 - 12.95 * Math.Pow((3.804 - epsylon * 1000), 2.0);
            //list.Add(string.Format("σc_1 = Approximate Steel in Compression Steel "));
            //list.Add(string.Format(""));
            //list.Add(string.Format("     = 361 - 12.95 x (3.804 - e x 10^3)^2       (From Formula)"));
            //list.Add(string.Format("     = 361 - 12.95 x (3.804 - {0:f6} x 10^3)^2", epsylon));
            //list.Add(string.Format("     = {0:f3} N/Sq.mm.", sigma_c1));
            //list.Add(string.Format(""));

            //double sigma_c2 = 0.45 * fck;
            //list.Add(string.Format("σc_2 = Compressive Stress in Steel = 0.45 x fck = 0.45 x {0} = {1:f3} N/Sq.mm.", fck, sigma_c2));
            //list.Add(string.Format(""));

            //double sigma_c = sigma_c1 - sigma_c2;
            //list.Add(string.Format("σc = Effective Stress for Compressive Steel Reinforcement"));
            //list.Add(string.Format("     = σc1 - σc2 = {0:f3} - {1:f3} = {2:f3} N/Sq.mm.", sigma_c1, sigma_c2, sigma_c));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Area of Compression Steel = Ast "));
            //list.Add(string.Format(""));

            //Ast = Math.Abs(Mu - Mul) * 1000000 / ((eff_d - d_dash) * sigma_c);
            //list.Add(string.Format("  Ast = (Mu - Mu1) x 10^6 / [(d - d’) x σc]"));
            //list.Add(string.Format("      = ({0:f3} - {1:f3}) x 10^6 / [({2} - {3}) x {4:f3}]", Mu, Mul, eff_d, d_dash, sigma_c));
            ////list.Add(string.Format("      = 38.24 x 106 / (434 x 343.2)"));
            //list.Add(string.Format("      = {0:f3} Sq.mm.", Ast));
            //list.Add(string.Format(""));

            //double Ast5 = Math.PI * Bar_dia3 * Bar_dia3 / 4.0;

            //bar_nos = (int)(Ast / Ast5);
            //bar_nos = bar_nos + 1;

            //if (bar_nos < 2) bar_nos = 2;
            //Ast5 = Ast5 * bar_nos;


            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "B_AST[5] at Penultimate End Supports (Bottom)";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = Bar_dia3;
            //ssr.Length = len - end_len_a - end_len_b;
            //BOQ.Steel_Reinforcement.Add(ssr);

            //list.Add(string.Format("Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia3));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as End Support Bottom Steel (Ast = {2:f3} Sq.mm.)", bar_nos, Bar_dia3, Ast5));
            ////list.Add(string.Format("Ast5 = {0:f3} Sq.mm.", Ast5));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[5], at Penultimate End Supports (Bottom)."));
            //list.Add(string.Format(""));
            #endregion  STEP 10 : REINFORCEMENT AT END SUPPORTS



            #region  STEP 8 : REINFORCEMENT AT INNER SUPPORT

            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.11 : REINFORCEMENT AT INNER SUPPORT", step));
            list.Add(string.Format("STEP 8 : REINFORCEMENT AT SUPPORT TOP AND BOTTOM", step));
            list.Add(string.Format("---------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format(""));

            //Mu = -239.35;
            //Mu = max_moment[2];
            //Mu = AM4;
            Mu = BM_hog;
            list.Add(string.Format(""));
            list.Add(string.Format("Bending -ve Moments at Inside Supports = Mu = BM_hog = -{0:f3} kN-m", Mu));
            list.Add(string.Format(""));
            //list.Add(string.Format("From Analysis Results,"));
            ////list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -{0} kN-m   (Members B1 to B6 and Joints J2 to J6)", Mu));
            //list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = Mu = -{0} kN-m", Mu));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double Mul = 0.138 * fck * bw * eff_d * eff_d / 1000000;
            list.Add(string.Format("Mul = 0.138 x fck x bw x d^2 / 10^6"));
            list.Add(string.Format("    = 0.138 x {0} x {1} x {2}^2 / 10^6", fck, bw, eff_d));
            list.Add(string.Format("    = {0:f3} kN-m", Mul));

            //list.Add(string.Format("j = (d - 0.46 x Xu) / d = (d - 0.42 x 0.48 x d) / d = 1 - 0.42 x 0.48 = 0.798"));
            list.Add(string.Format(""));
            list.Add(string.Format("Xu = 0.48 x d"));
            list.Add(string.Format(""));
            j = 1 - 0.42 * 0.48;
            list.Add(string.Format("j = (d - 0.42 x Xu) / d = (d - 0.42 x 0.48 x d) / d = 1 - 0.42 x 0.48 = 0.798"));
            list.Add(string.Format(""));


            double d_dash = Bar_dia4 / 2 + cover;

            Ast = ((Mul * 1000000) / (0.87 * fy * j * eff_d)) + (Math.Abs(Mu - Mul) * 1000000 / (0.87 * fy * (eff_d - d_dash)));

            double bot_ast = ((Mul * 1000000) / (0.87 * fy * j * eff_d));
            bnos_3 = (int)(bot_ast / (Math.PI * Bar_dia2 * Bar_dia2 / 4.0));

            if (bnos_3 <= 2)
                bnos_3 = 2;
            else
                bnos_3 = bnos_3 + 1;

            if (bnos_3 % 2 != 0)
                bnos_3 += 1;


            double top_ast = Ast - (bnos_3 * (Math.PI * Bar_dia2 * Bar_dia2 / 4.0));

            bnos_2 = (int)(top_ast / (Math.PI * Bar_dia4 * Bar_dia4 / 4.0));
            bnos_2 = bnos_2 + 1;

            if (bnos_2 % 2 != 0)
                bnos_2 += 1;



            list.Add(string.Format("(i) For Tension Steel at Support Top"));
            list.Add(string.Format(""));
            list.Add(string.Format("   Ast  = [Mul x 10^6 / (0.87 x fy x j x d)]"));
            list.Add(string.Format("          + [(Mu - Mu1) x 10^6 / (0.87 x fy x (d - d’)]"));
            list.Add(string.Format(""));

            list.Add(string.Format("        = [{0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})]", Mul, fy, j, eff_d));
            list.Add(string.Format("          + [({0:f3} - {1:f3}) x 10^6 / (0.87 x {2} x ({3} - {4})]", Mu, Mul, fy, eff_d, d_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("        = {0:f3} Sq.mm.", Ast));
            list.Add(string.Format(""));


            //double Ast6 = (2 * Math.PI * Bar_dia3 * Bar_dia3 / 4.0) + (2 * Math.PI * Bar_dia4 * Bar_dia4 / 4.0);
            double Ast2 = (Math.PI * Bar_dia4 * Bar_dia4 / 4.0);


            //bar_nos = (int)(Ast / Ast2);
            //bar_nos = bar_nos + 1;
            //if (bar_nos < 2) bar_nos = 2;

            //if (bar_nos % 2 != 0)
            //    bar_nos = bar_nos + 1;// bar nos allways an even number

            //bnos_2 = 2;
            //bnos_3 = (int)bar_nos - 2; ;


            //Ast2 = Ast2 * bar_nos;



            Ast2 = bnos_2 * (Math.PI * Bar_dia4 * Bar_dia4 / 4.0) + bnos_3 * (Math.PI * Bar_dia2 * Bar_dia2 / 4.0);


            double pen_ult_len = 0.0;
            double inn_len = 0.0;
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[6] at Inner Supports (Top)";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = Bar_dia4;
            ssr.Length = pen_ult_len + inn_len;
            BOQ.Steel_Reinforcement.Add(ssr);



            //list.Add(string.Format("Provide 2 Nos {0} mm  and 2 Nos {1} bars, ", Bar_dia3, Bar_dia4));
            //list.Add(string.Format("Provide {0} Nos {1} mm bars, ", bar_nos, Bar_dia4));


            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inner Support Top Steel (Ast = {0:f3} Sq.mm.)", bar_nos, Bar_dia4, Ast6));
            ////list.Add(string.Format("Ast6 = {0:f3} Sq.mm.", Ast6));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[6], at Inner Supports (Top)."));
            list.Add(string.Format(""));

            list.Add(string.Format("Bar Dia = d4 = {0} mm. and d2 = {1} mm.", Bar_dia4, Bar_dia2));
            list.Add(string.Format("Provide {0} Nos. {1} mm dia and {2} Nos {3} mm dia bars as Support Steel Top (Ast = {4:f3} Sq.mm.)",
                bnos_2, Bar_dia4, bnos_3, Bar_dia2, Ast2));
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) For Compression Steel at Support Bottom"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double epsylon = 0.0035 * (0.48 - (d_dash / eff_d) / 0.48);
            list.Add(string.Format("e = Stress in Compressive Steel = 0.0035 x (0.48 - (d’ / d) / 0.48)"));
            list.Add(string.Format("                                = 0.0035 x (0.48 - ({0}/{1}) / 0.48)", d_dash, eff_d));
            list.Add(string.Format("                                = {0:f6}", epsylon));
            list.Add(string.Format(""));


            double sigma_c1 = 361 - 12.95 * Math.Pow((3.804 - epsylon * 1000), 2.0);
            list.Add(string.Format("σc_1 = Approximate Stress in Compress Steel "));
            list.Add(string.Format("     = 361 - 12.95 x (3.804 - e x 10^3)^2  (From Formula)"));
            list.Add(string.Format("     = 361 - 12.95 x (3.804 - {0:f6} x 10^3)^2", epsylon));
            list.Add(string.Format("     = {0:f3} N/Sq.mm.", sigma_c1));
            list.Add(string.Format(""));


            double sigma_c2 = 0.45 * fck;
            list.Add(string.Format("σc_2 = Compressive Stressin Steel = 0.45 x fck = 0.45 x {0} = {1:f3} N/Sq.mm", fck, sigma_c2));
            list.Add(string.Format("     = 361 - 12.95 x (3.804 - e x 10^3)^2  (From Formula)"));
            list.Add(string.Format("     = 361 - 12.95 x (3.804 - {0:f6} x 10^3)^2", epsylon));
            list.Add(string.Format("     = {0:f3} N/Sq.mm.", sigma_c1));
            list.Add(string.Format(""));

            double sigma_c = sigma_c1 - sigma_c2;
            list.Add(string.Format("σc   = Effective Stress for Compressive Steel Reinforcement"));
            list.Add(string.Format("     = σc1 - σc2 "));
            list.Add(string.Format("     = {0:f3} - {1:f3}", sigma_c1, sigma_c2));
            list.Add(string.Format("     = {0:f3} N/Sq.mm.", sigma_c));
            list.Add(string.Format(""));


            double Asc = Math.Abs(Mu - Mul) * 1000000 / (sigma_c * (eff_d - d_dash));
            list.Add(string.Format("    Asc = Area of Compressive Steel"));
            list.Add(string.Format("        = (Mu - Mul) x 10^6 / [σc x (d - d’)]"));
            list.Add(string.Format("        = ({0:f3} - {1:f3}) x 10^6 / [{2:f3} x ({3} - {4})]", Mu, Mul, sigma_c, eff_d, d_dash));
            list.Add(string.Format("        = {0:f3} Sq.mm.", Asc));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double Ast3 = (Math.PI * Bar_dia3 * Bar_dia3 / 4.0);

            bar_nos = (int)(Asc / Ast3);
            bar_nos = bar_nos + 1;
            if (bar_nos < 2) bar_nos = 2;


            if (bar_nos % 2 != 0) bar_nos = bar_nos + 1;

            bnos_4 = (int)bar_nos;

            Ast3 = Ast3 * bar_nos;




            double len = L, end_len_a = 0, end_len_b = 0;





            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[3] at Inner Supports (Bottom)";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = Bar_dia5;
            ssr.Length = len - end_len_a - end_len_b;
            BOQ.Steel_Reinforcement.Add(ssr);



            //list.Add(string.Format("Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia5));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inner Support Bottom Steel (Ast = {0:f3} Sq.mm.)", bar_nos, Bar_dia5, Ast7));
            ////list.Add(string.Format("Ast7 = {0:f3} Sq.mm.", Ast7));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[7], at Inner Supports (Bottom)."));
            list.Add(string.Format(""));


            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia = D3 = {0} mm.", Bar_dia3));
            list.Add(string.Format("Provide {0} Nos {1} mm dia bars as Support Steel Bottom", bnos_4, Bar_dia3));
            list.Add(string.Format(""));

            //Mu = 93.09;
            //Mu = max_moment[3];
            //list.Add(string.Format("(iii) From Analysis Results,"));
            ////list.Add(string.Format("      Maximum + ve Bending Moment at Inner Supports = Mu = {0:f3}   KNm   (Members B1 to B6 and Joints J2 to J6)", Mu));

            //Mu = AM3;
            //list.Add(string.Format("      Maximum + ve Bending Moment at Inner Supports = AM3 = {0:f3} KN-m", Mu));
            //list.Add(string.Format(""));

            //j = 0.5 + Math.Sqrt(0.25 - Mu * 1000000 / (0.87 * fck * bf * eff_d * eff_d));
            //list.Add(string.Format("j = 0.5 + √[0.25 - Mu x 10^6 / (0.87 x fck x bf x d^2)]"));
            //list.Add(string.Format("          = 0.5 + √[0.25 - {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3}^2)]", Mu, fck, bf, eff_d));
            //list.Add(string.Format("          = {0:f3}", j));
            //list.Add(string.Format(""));

            //list.Add(string.Format("Area of Steel required = Ast"));
            //list.Add(string.Format(""));

            //Ast = Mu * 1000000 / (0.87 * fy * j * eff_d);
            //list.Add(string.Format("  Ast = Mu x 10^6 / (0.87 x fy x j x d)"));
            //list.Add(string.Format("      = {0:f3} x 10^6 / (0.87 x {1} x {2:f3} x {3})", Mu, fy, j, eff_d));
            //list.Add(string.Format("      = {0:f3} Sq.mm.", Ast));
            //list.Add(string.Format(""));

            //double Ast8 = (Math.PI * Bar_dia6 * Bar_dia6 / 4.0);


            //bar_nos = (int)(Ast / Ast8);
            //bar_nos = bar_nos + 1;

            //if (bar_nos < 2) bar_nos = 2;
            //Ast8 = Ast8 * bar_nos;



            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "B_AST[8] at all Inner Span (Top Steel)";
            //ssr.Number_Of_Bars = (int) bar_nos;
            //ssr.Bar_Dia = Bar_dia6;
            //if(inn_len > 0)
            //    ssr.Length = inn_len;
            //else
            //    ssr.Length = pen_ult_len;
            //BOQ.Steel_Reinforcement.Add(ssr);


            //list.Add(string.Format("Provide {0} Nos {1} mm dia bars, ", bar_nos, Bar_dia6));
            //list.Add(string.Format("Ast_provided = {0}Y' - {1} as Inner Span Top Steel", bar_nos, Bar_dia6, Ast8));
            //list.Add(string.Format("Ast8 = {0:f3} Sq.mm.", Ast8));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[8], at all Inner Span (Top Steel)."));
            list.Add(string.Format(""));
            #endregion  STEP 10 : REINFORCEMENT AT INNER SUPPORT

            #region STEP 9 : REINFORCEMENT STEEL AT SPAN TOP
            list.Add(string.Format("-------------------------------------------------------------"));
            list.Add(string.Format("STEP 9 : REINFORCEMENT STEEL AT SPAN TOP"));
            list.Add(string.Format("-------------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Dia = D4 = {0} mm.", Bar_dia4));
            bnos_5 = bnos_2;
            list.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Top", bnos_2, Bar_dia4));
            list.Add(string.Format(""));


            #endregion STEP 10 : REINFORCEMENT STEEL AT SPAN TOP

            #region STEP 10 : SHEAR ENFORCEMENT
            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.12 : SHEAR ENFORCEMENT", step));
            list.Add(string.Format("STEP 10 : SHEAR REINFORCEMENT", step));
            list.Add(string.Format("--------------------------------------------------"));
            list.Add(string.Format("Main Reinforcement Provided at:"));
            list.Add(string.Format(""));
            list.Add(string.Format("End Support:"));
            list.Add(string.Format(""));
            list.Add(string.Format("Tension Steel at Top Reinforcement = Ast4 = {0:f3} Sq.mm.", Ast2));
            list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast3 = {0:f3} Sq.mm.", Ast3));
            //list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast5 = {0:f3} Sq.mm.", Ast5));
            list.Add(string.Format(""));
            list.Add(string.Format("Inner Support:"));
            list.Add(string.Format(""));
            list.Add(string.Format(" Tension Steel at Top Reinforcement = Ast6 = {0:f3} Sq.mm.", Ast2));
            list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast7 = {0:f3} Sq.mm.", Ast3));
            //list.Add(string.Format("Compression Steel at Bottom Reinforcement = Ast8 = {0:f3} Sq.mm.", Ast8));
            list.Add(string.Format(""));
            list.Add(string.Format("Minimum Steel for Compression Reinforcement = Asc = {0:f3} Sq.mm.", Asc));
            list.Add(string.Format("Effective Depth of Beam = d = {0} mm.", eff_d));
            list.Add(string.Format("Width of Web of Beam = bw = {0} mm.", bw));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Shear Force at Inner Support = V2 = {0:f3} KN.", V2));
            list.Add(string.Format(""));

            tau_v = V2 * 1000 / (bw * eff_d);
            list.Add(string.Format("Shear Stress = τv = V2 x 1000 / (bw x d)"));
            list.Add(string.Format("                  = {0:f3} x 1000 / ({1} x {2})", V2, bw, eff_d));
            list.Add(string.Format("                  = {0:f3} N/Sq.mm.", tau_v));
            list.Add(string.Format(""));

            double p = Asc * 100 / (bw * eff_d);
            list.Add(string.Format("Percentage of Steel = p = Asc x 100 / (bw x d)"));
            list.Add(string.Format("                        = {0:f3} x 100 / ({1} x {2})", Asc, bw, eff_d));
            list.Add(string.Format("                        = {0:f3}%", p));
            list.Add(string.Format(""));


            //double tau_c = 0.484;
            double tau_c = Tables.Permissible_Shear_Stress(p, (int)fck, ref kStr);
            list.Add(string.Format("From Table1, For fck = {0}   &    p = {1:f3}", fck, p));


            list.Add(string.Format("Shear Capacity of the Section τc = {0:f3} N/Sq.mm.", tau_c));
            list.Add(string.Format(""));
            list.Add(string.Format("Balance Shear Stress to be taken by Shear Reinforcement"));
            double tau = tau_v - tau_c;
            list.Add(string.Format("τ = τv - τc = {0:f3} - {1:f3} = {2:f3} N/Sq.mm.", tau_v, tau_c, tau));
            list.Add(string.Format(""));
            list.Add(string.Format("Providing {0} mm dia 2-legged Stirrups, ", Shear_Bar_dia));

            double Asv = 2 * Math.PI * Shear_Bar_dia * Shear_Bar_dia / 4.0;
            list.Add(string.Format("Area = Asv = 2 x π x {0}^2 / 4  = {1:f3} Sq.mm. ", Shear_Bar_dia, Asv));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Spacing for Stirrups = Sv"));
            list.Add(string.Format(""));

            double Sv1 = Asv * fy / (0.4 * bw);
            double Sv2 = (3.0 * eff_d) / 4.0;
            double Sv3 = 450.0;
            double Sv4 = (0.87 * fy * Asv) / (Math.Abs(tau_v - tau_c) * bw);
            //double Sv = (0.87 * fy * Asv) / ((tau_v - tau_c) * bw);

            list.Add(string.Format("(i)   Sv <= Asv x fy / (0.4 x bw) = {0:f2} x {1} / (0.4 x {2:f2}) = {3:f3} mm", Asv, fy, bw, Sv1));
            list.Add(string.Format("(ii)  Sv = <= (3 x d) / 4 = 3 x {0} / 4 = {1:f2} mm", eff_d, Sv2));
            list.Add(string.Format("(iii) Sv = <= 450 mm"));
            list.Add(string.Format("(iv) Calculated Spacing = Sv "));
            list.Add(string.Format("                        = (0.87 x fy x Asv) / [(τv - τc) x b] "));
            list.Add(string.Format("                        = 0.87 x {0} x {1:f3} / [({2:f3} - {3:f3}) x {4}]", fy, Asv, tau_v, tau_c, bw));
            //list.Add(string.Format("                        = 0.87 x 415 x 100.53 / 221.5"));
            list.Add(string.Format("                        = {0:f3} mm", Sv4));
            list.Add(string.Format(""));

            double Sv = Math.Min(Math.Min(Sv1, Sv2), Math.Min(Sv3, Sv4));

            list.Add(string.Format(""));
            list.Add(string.Format("Sv will be minimum of the above values = {0:f2} mm", Sv));
            list.Add(string.Format(""));

            Sv = (int)(Sv / 10);
            Sv = Sv * 10;


            Ast = 2 * Math.PI * Shear_Bar_dia * Shear_Bar_dia / 4.0;
            double Ast5 = Ast * 1000 / Sv;





            ssr = new Steel_Reinforcement();
            ssr.BarMark = "B_AST[9]";
            ssr.Number_Of_Bars = 2;
            ssr.Bar_Dia = Shear_Bar_dia;
            ssr.Length = 2 * (B + D) - 4 * cover / 1000;
            BOQ.Steel_Reinforcement.Add(ssr);


            list.Add(string.Format("Provide  Y'{0} - (2 Legged) Vertical Stirrups @ {1} mm Centre to Centre (Ast = {2:f3} Sq.mm. / metre)", Shear_Bar_dia, Sv, Ast5));

            //list.Add(string.Format("AST9 = {0:f3} x 1000 / {1} Sq.mm. / metre = {2:f3} Sq.mm. / metre.", Ast, Sv, Ast9));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar mark in drawing = B_Ast[5] as Stirrup Steel Shear Reinforcements"));
            //list.Add(string.Format("Bar mark in drawing = B_Ast[9]"));
            list.Add(string.Format(""));

            #endregion STEP 12 : SHEAR ENFORCEMENT



            #region STEP 11 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM ", step));
            list.Add(string.Format("STEP 11 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM ", step));
            list.Add(string.Format("         (D = Thickness of Floor Slab + Depth of Beam Web)"));
            list.Add(string.Format("----------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //MyList
            //double Mu = -239.35;
            //double Mu = max_moment[2];


            Mu = AM4;
            list.Add(string.Format("From Analysis Results,"));
            list.Add(string.Format("Maximum -ve Bending Moment at Inner Supports = AM4 = -{0:f3} kN-m ", Mu));
            list.Add(string.Format(""));
            list.Add(string.Format("50% of Hogging Moment will be taken by Concrete and "));
            list.Add(string.Format("50% of Hogging Bending Moment will be taken by Compression Steel,"));
            list.Add(string.Format(""));
            //list.Add(string.Format("Effective Depth = d"));
            list.Add(string.Format("Effective Depth = d >= [Mu / 0.138 x fck x b]^0.5"));
            Q = 0.138 * fck;

            //d = Math.Pow((Math.Abs(Mu) / 0.138 * fck * b), 0.5);

            d = Math.Pow((Math.Abs(Mu) / Q * 1000), 0.5);


            //d = Math.Pow((Math.Abs(Mu * 1000000) / 0.138 * fck * b), 0.5);


            //d = Math.Pow((Math.Abs(Mu * 1000000) / 0.138 * fck * 1000), 0.5);

            list.Add(string.Format("                    >= [{0:f3} / 0.138 x {1} x 1000]^0.5", Mu, fck));
            list.Add(string.Format("                    >= {0:f3} mm", d));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall Depth = D"));


            _D = d + (Bar_dia1 / 2) + cover;
            list.Add(string.Format("D = d + (Bar_dia / 2) + Cover"));
            list.Add(string.Format("  = {0:f3} + ({1} / 2) + {2}", d, Bar_dia1, cover));

            if (_D < D)
            {
                if (IS_DESIGN_OK) IS_DESIGN_OK = true;

                list.Add(string.Format("  = {0:f3} mm < Provided D = {1} mm,   Hence OK", _D, D));
            }
            else
            {
                list.Add(string.Format("  = {0:f3} mm > Provided D = {1} mm,   Hence NOT OK", _D, D));
                if (IS_DESIGN_OK) IS_DESIGN_OK = false;
            }
            list.Add(string.Format(""));

            //double V = 160.048;
            V = Math.Max(Math.Max(V1, V2), Math.Max(V3, V4));
            list.Add(string.Format("Maximum Shear Force at Support = V = {0:f3} KN", V));
            list.Add(string.Format(""));


            //double tau_v = 2.8; // from Table

            tau_v = Tables.Permissible_Shear_Stress(p, (int)fck, ref kStr);

            //double Asc1 = Math.Abs(V) / (b * d);

            list.Add(string.Format("Shear Stress = V, For Concrete Grade M{0}, Permissible Shear Stress = τv = {1:f3} N/Sq.m. (From Table)", fck, tau_v));
            list.Add(string.Format(""));
            list.Add(string.Format("τv = V / (b x d)"));
            list.Add(string.Format(" d = V / (b x τv)"));
            //list.Add(string.Format("   = (160.408 x 1000) / (1000 x (2.8/2))"));
            //list.Add(string.Format("   = ({0:f3} x 1000) / (1000 x ({1:f3}/2))", V, tau_v));
            list.Add(string.Format("   = ({0:f3} x 1000) / (1000 x ({1:f3}))", V, tau_v));

            //double _d = V * 1000.0 / (1000 * tau_v / 2.0);
            _d = V * 1000.0 / (1000 * tau_v);

            list.Add(string.Format("   = {0:f3} mm", _d));
            list.Add(string.Format(""));

            _D2 = _d + Bar_dia1 / 2.0 + cover;
            list.Add(string.Format("Overall Depth = D = d + Bar_dia / 2 + Cover"));
            list.Add(string.Format("                  = {0:f3} + ({1} / 2) + {2}", _d, Bar_dia1, cover));
            //list.Add(string.Format("                  = {0:f3} mm", _D));


            if (_D2 < D)
            {
                list.Add(string.Format("                  = {0:f3} mm < Provided D = {1} mm,   Hence OK", _D2, D));
            }
            else
            {
                if (IS_DESIGN_OK) IS_DESIGN_OK = false;
                list.Add(string.Format("                  = {0:f3} mm > Provided D = {1} mm,   Hence NOT OK", _D2, D));
            }

            list.Add(string.Format(""));
            list.Add(string.Format(""));

            D_prov = Math.Max(_D, _D2);
            list.Add(string.Format("Considering above two Overall Depths of {0:f3}mm & {1:f3}mm", _D, _D2));


            D_prov = ((int)D_prov) / 100.0;


            sd = (int)((D_prov - ((int)D_prov)) * 100);

            if (sd > 50)
            {
                sd = 100;
            }
            else
            {
                sd = 50;

            }
            D_prov = (((int)D_prov) * 100 + sd);




            list.Add(string.Format("Provide Overall Depth = D = {0}mm", D));
            list.Add(string.Format("Effective Depth = d = D - (Bar_dia / 2) - cover"));

            eff_d = D - Bar_dia1 / 2.0 - cover;
            list.Add(string.Format("                    = {0} - ({1}/2) - {2}", D, Bar_dia1, cover));
            list.Add(string.Format("                    = {0:f2} mm", eff_d));
            list.Add(string.Format(""));

            #endregion STEP 5 : CALCULATION FOR OVERALL DEPTH ‘D’ OF BEAM



            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 12 : DESIGN SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));

            Design_Summary = new List<string>();

            Beam_Title = "B1";
            Beam_Nos = "B1";
            Design_Summary.Add(string.Format("-------------------------------------"));
            Design_Summary.Add(string.Format("BEAM = {0}, FLOOR LEVEL = {1:f3} M", Beam_Title, BOQ.Floor_ELevation));
            Design_Summary.Add(string.Format("CONTINUOUS MEMBERS = {0}", Beam_Nos));

            BOQ.Section_B = B / 1000;
            BOQ.Section_D = D / 1000;

            Design_Summary.Add(string.Format("BEAM SECTION = {0} mm. X {1} mm.", BOQ.Section_B * 1000, BOQ.Section_D * 1000));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Bottom, (Ast = {2:f3} Sq.mm)",
                bnos_1,
                Bar_dia1,
                Ast1));
            Design_Summary.Add(string.Format("Bar mark in drawing = B_Ast[1] as Span Steel (Bottom). "));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Top.",
               bnos_5,
               Bar_dia4));
            Design_Summary.Add(string.Format("Bar mark in drawing = B_Ast[2], as Span Steel (Top)."));

            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide {0} Nos. {1} mm dia and {2} Nos {3} mm dia bars as Support Steel Top (Ast = {4:f3} Sq.mm.)",
                 bnos_2,
                Bar_dia4,
                bnos_3,
                Bar_dia2,
                Ast2
                ));
            Design_Summary.Add(string.Format("Bar mark in drawing = B_Ast[3], as Supports Steel (Bottom)."));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Support Steel Bottom.",
                bnos_4,
                Bar_dia3));
            Design_Summary.Add(string.Format("Bar mark in drawing = B_Ast[4], as Supports Steel (Top)."));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide  Y'{0} - (2 Legged) Vertical Stirrups @ {1} mm Centre to Centre (Ast = {2:f3} Sq.mm. / metre)",
                Shear_Bar_dia,
                Sv,
                Ast5));
            Design_Summary.Add(string.Format("Bar mark in drawing = B_Ast[5] as Stirrup Steel Shear Reinforcements,"));

            list.AddRange(Design_Summary.ToArray());
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            #region STEP 13 : BILL OF QUANTITY


            BOQ_Summary = new List<string>();
            //double floor_lvl = 
            BOQ_Summary.Add(string.Format("BEAM = {0}, Floor Level = {1:f3} m", Beam_Title, BOQ.Floor_ELevation));

            BOQ_Summary.Add(string.Format(""));

            double conc_qty = BOQ.Section_B * BOQ.Section_D * BOQ.Length;
            BOQ_Summary.Add(string.Format("Concrete Quantity = {0:f3} x {1:f3} x {2:f3} = {3:f3} Cu.m.",
                BOQ.Section_B, BOQ.Section_D, BOQ.Length, conc_qty));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("--------------------"));
            BOQ_Summary.Add(string.Format("REBARS QUANTITY"));
            BOQ_Summary.Add(string.Format("--------------------"));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Bottom, (Ast = {2:f3} Sq.mm)",
                bnos_1,
                Bar_dia1,
                Ast1));

            double tot_wgt = bnos_1 * len * Tables.Rebars.Get_Rebar_Weight(Bar_dia1);
            //BOQ_Summary.Add(string.Format("Total Weight = 2Nos. x Length of Beam x Weight/m for 16 mm dia = Ton."));
            BOQ_Summary.Add(string.Format("Total Weight = Nos. x Length of Beam x Weight/m for {0} mm dia", Bar_dia1));

            BOQ_Summary.Add(string.Format("             = {0} x {1:f3} x {2:f6} = {3:f4} Ton.",
                bnos_1, len, Tables.Rebars.Get_Rebar_Weight(Bar_dia1), tot_wgt));

            //BOQ_Summary.Add(string.Format("Bar mark in drawing = B_Ast[1] as Span Steel (Bottom). "));



            BOQ_Summary.Add(string.Format(""));


            BOQ_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Span Steel Top.",
               bnos_5,
               Bar_dia4));


            BOQ_Summary.Add(string.Format("Total Weight =  Nos. x Length of Beam x Weight/m for {0} mm dia", Bar_dia4));

            tot_wgt = bnos_5 * len * Tables.Rebars.Get_Rebar_Weight(Bar_dia4);
            BOQ_Summary.Add(string.Format("             = {0} x {1:f3} x {2:f6} = {3:f4} Ton.",
                bnos_5, len, Tables.Rebars.Get_Rebar_Weight(Bar_dia1), tot_wgt));


            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide {0} Nos. {1} mm dia and {2} Nos {3} mm dia bars as Support Steel Top (Ast = {4:f3} Sq.mm.)",
                 bnos_2,
                Bar_dia4,
                bnos_3,
                Bar_dia2,
                Ast2
                ));
            BOQ_Summary.Add(string.Format("Total Weight =  Nos. x (Each Span of Beam x 0.3 x 2) x Weight/m for {0} mm dia ", Bar_dia4));
            BOQ_Summary.Add(string.Format("               + Nos. x (Each Span of Beam x 0.3 x 2) x Weight/m for {0} mm dia +", Bar_dia2));

            BOQ_Summary.Add(string.Format(""));
            //inn_len
            //pen_ult_len = (len - end_len_a - end_len_b);
            tot_wgt = bnos_2 * pen_ult_len * 0.3 * 2 * Tables.Rebars.Get_Rebar_Weight(Bar_dia4) +
                         bnos_3 * 0.3 * 2 * pen_ult_len * Tables.Rebars.Get_Rebar_Weight(Bar_dia2);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x 0.3 x 2 x {2:f6}",
                bnos_2, pen_ult_len, Tables.Rebars.Get_Rebar_Weight(Bar_dia4)));
            BOQ_Summary.Add(string.Format("                + {0} x {1:f3} x 0.3 x 2 x {2:f6} ",
                bnos_3, pen_ult_len, Tables.Rebars.Get_Rebar_Weight(Bar_dia2)));
            BOQ_Summary.Add(string.Format("              = {0:f3} Ton", tot_wgt));


            //BOQ_Summary.Add(string.Format("Bar mark in drawing = B_Ast[3], as Supports Steel (Bottom)."));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide {0} Nos {1} mm dia bars as Support Steel Bottom.",
                bnos_4,
                Bar_dia3));


            BOQ_Summary.Add(string.Format("Total Weight =  Nos. x (Each Span of Beam x 0.3 x 2) x Weight/m for {0} mm dia", Bar_dia3));


            tot_wgt = bnos_4 * pen_ult_len * 0.3 * 2 * Tables.Rebars.Get_Rebar_Weight(Bar_dia3);

            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x 0.3 x 2 x {2:f6} = {3:f4} Ton.",
                bnos_4, pen_ult_len, Tables.Rebars.Get_Rebar_Weight(Bar_dia3), tot_wgt));


            BOQ_Summary.Add(string.Format(""));



            BOQ_Summary.Add(string.Format("Provide  Y'{0} - (2 Legged) Vertical Stirrups @ {1} mm Centre to Centre (Ast = {2:f3} Sq.mm. / metre)",
                Shear_Bar_dia,
                Sv,
                Ast5));
            BOQ_Summary.Add(string.Format("Total Weight = (Each Span of Beam/spacing) x ((B+D-2xcover)x2 of Beam) x Weight/m for {0} mm dia", Shear_Bar_dia));
            //BOQ_Summary.Add(string.Format("Bar mark in drawing = B_Ast[5] as Stirrup Steel Shear Reinforcements,"));


            tot_wgt = (pen_ult_len * 1000 / Sv) * (BOQ.Section_B + BOQ.Section_D - 2 * cover / 1000) * 2 * Tables.Rebars.Get_Rebar_Weight(Shear_Bar_dia);


            BOQ_Summary.Add(string.Format("             = ({0:f3}/{1:f3}) x (({2}+{3}-2x{4})x 2) x {5}",
                pen_ult_len, Sv / 1000, BOQ.Section_B, BOQ.Section_D,
                cover / 1000,
                Tables.Rebars.Get_Rebar_Weight(Shear_Bar_dia)));

            BOQ_Summary.Add(string.Format("             = {0:f3} Ton.", tot_wgt));

            list.AddRange(BOQ_Summary.ToArray());

            //list.Add(string.Format(""));
            //list.Add(string.Format("------------------------------------"));
            ////list.Add(string.Format("STEP {0}.13 : BILL OF QUANTITY", step));
            //list.Add(string.Format("STEP 13 : BILL OF QUANTITY", step));
            //list.Add(string.Format("------------------------------------"));
            //list.AddRange(BOQ.Get_Text());
            //list.Add(string.Format(""));



            #endregion STEP 13 : BILL OF QUANTITY


            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF DESIGN        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion End of Report

            if (Report_File != "")
            {
                File.WriteAllLines(Report_File, list.ToArray());
                File.WriteAllLines(File_Design_Summary, Design_Summary.ToArray());

                string tmp_file = Get_Report_File(step);

                File.WriteAllLines(tmp_file, list.ToArray());

                tmp_file = Get_BOQ_File(step);

                File.WriteAllLines(tmp_file, BOQ_Summary.ToArray());

                tmp_file = Get_Design_Summary_File(step);

                File.WriteAllLines(tmp_file, Design_Summary.ToArray());

            }

            return list;
        }

        public string Get_Report_File(int step)
        {

            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "DESIGN_B" + step.ToString("000") + ".TXT");
            return tmp_file;
        }


        public string Get_BOQ_File(int step)
        {

            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            tmp_file = Path.Combine(tmp_file, "BOQ");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "BOQ_B" + step.ToString("000") + ".TXT");
            return tmp_file;
        }

        public string Get_Design_Summary_File(int step)
        {

            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            tmp_file = Path.Combine(tmp_file, "DESIGN SUMMARY");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "DESIGN_SUMMARY_B" + step.ToString("000") + ".TXT");
            return tmp_file;
        }


        public string File_Design_Summary
        {
            get
            {
                string des_sum = Path.Combine(Path.GetDirectoryName(Get_Report_File(1)), "BEAM_DESIGN_SUMMARY.TXT");
                return des_sum;
            }
        }
    }

    public class BeamData
    {
        public bool IsSelect { get; set; }
        public string BeamNos { get; set; }
        public string Continuous_BeamMembers { get; set; }
        public double Breadth { get; set; }
        public double Depth { get; set; }
        public double d1 { get; set; }
        public double d2 { get; set; }
        public double d3 { get; set; }
        public double d4 { get; set; }
        public double d5 { get; set; }
        public double d6 { get; set; }


        public double AM1 { get; set; }
        public double AM2 { get; set; }
        public double AM3 { get; set; }
        public double AM4 { get; set; }
        public double AV1 { get; set; }
        public double AV2 { get; set; }
        public double AV3 { get; set; }

        public BeamData()
        {
            IsSelect = false;
            BeamNos = "";
            Continuous_BeamMembers = "";
            Breadth = 0.0;
            Depth = 0.0;
            d1 = 0.0;
            d2 = 0.0;
            d3 = 0.0;
            d4 = 0.0;
            d5 = 0.0;
            d6 = 0.0;

            AM1 = 0.0;
            AM2 = 0.0;
            AM3 = 0.0;
            AM4 = 0.0;
            AV1 = 0.0;
            AV2 = 0.0;
            AV3 = 0.0;
        }

    }

    public class ColumnDesign
    {

        public ASTRADoc AST_DOC { get; set; }
        public ColumnData Col_Data { get; set; }

        public Column_BOQ BOQ { get; set; }
        public ColumnDesign()
        {
            //All_Column_Data = new List<ColumnData>();
        }
        public string Report_File { get; set; }
        public string Beam_Nos { get; set; }

        public bool IS_DESIGN_OK { get; set; }

        public double Pu, Mux, Muy, fck, fy, D, b, bar_dia, bar_nos;
        public double H;
        public double tie_dia, Cover;

        public List<ColumnData> All_Column_Data { get; set; }

        public List<string> Design_Summary { get; set; }

        public List<string> BOQ_Summary { get; set; }

        public void Calculate_Program()
        {
            List<string> list = Get_Banner();

            #region User Input Data


            //Pu = 978.18;
            //Mux = 40.092;
            //Muy = 206.55;
            //fck = 20;
            //fy = 415;
            //D = 300;
            //b = 500;
            //bar_dia = 25;
            //tie_dia = 8;
            //Cover = 40;


            list.Add(string.Format("Maximum Forces in Vertical Members Obtained from Analysis Results:"));
            list.Add(string.Format("Pu = {0:f3} KN (Compressive Force along the axis of Column in Vertical Direction)", Pu));
            list.Add(string.Format(""));
            list.Add(string.Format("Mux = {0:f3} KN-m", Mux));
            list.Add(string.Format("Muy = {0:f3} KN-m", Muy));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Reinforcement Steel Grade = fy = Fe{0}", fy));
            list.Add(string.Format(""));
            list.Add(string.Format("Try Size of Column D = {0} mm", D));
            list.Add(string.Format("                   b = {0} mm", b));
            list.Add(string.Format(""));
            list.Add(string.Format("Diameter of Reinforcement Steel Bars = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format("Diameter of Lateral Binder Tie Bars = tie_dia = {0} mm", tie_dia));
            list.Add(string.Format("Reinforcement Side Cover = Cover = {0} mm", Cover));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion User Input Data



            #region STEP 1 : Design Calculation

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("STEP 1 : Design Calculation"));
            list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double ex = Muy / Pu;
            list.Add(string.Format("Eccentricity with respect to Muy = ex = Muy / Pu = {0:f3} / {1:f3} = {2:f3}", Muy, Pu, ex));
            list.Add(string.Format("D = {0} mm = {1:f3} m", D, D / 1000));

            //D = D;
            double ex_by_D = ex / (D / 1000);

            list.Add(string.Format(""));
            list.Add(string.Format("ex / D = {0:f3} / {1:f3} = {2:f3}", ex, (D / 1000), ex_by_D));

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double p = 2.0;
            list.Add(string.Format("Considering 2% Steel Reinforcement, p = {0}", p));

            double Ac = ((100 - p) / 100.0) * D * b;
            list.Add(string.Format(""));
            list.Add(string.Format("Ac = Effective Area of Concrete = (100-p) x D x b"));
            list.Add(string.Format("                                = {0:f3} x {1} x {2}", ((100 - p) / 100.0), D, b));
            list.Add(string.Format("                                = {0:f3} Sq.mm", Ac));
            list.Add(string.Format(""));

            double Asc = (p / 100.0) * D * b;
            list.Add(string.Format("Asc = Area of Steel = p x D x b = {0:f3} x {1} x {2} Sq.mm = {3:f3} Sq.mm", (p / 100.0), D, b, Asc));
            list.Add(string.Format(""));
            list.Add(string.Format("From equation:"));
            list.Add(string.Format(""));

            double Puz = 0.45 * fck * Ac + 0.75 * fy * Asc;
            list.Add(string.Format("Puz = 0.45 x fck x Ac + 0.75 x fy x Asc"));
            list.Add(string.Format("    = 0.45 x {0} x {1:f3} + 0.75 x {2} x {3:f3}", fck, Ac, fy, Asc));
            list.Add(string.Format("    = {0:f3} N", Puz));
            Puz = Puz / 1000.0;
            list.Add(string.Format("    = {0:f3} kN", Puz));
            list.Add(string.Format(""));

            double req_area = (Pu * 1000) / ((0.23 * fck) + (0.1 * p * fy / 100));
            list.Add(string.Format("Required Cross Section Area of Column"));
            list.Add(string.Format(""));
            list.Add(string.Format("      = Pu x 1000 / [(0.23 x fck) + (0.1 x p x fy / 100)]"));
            list.Add(string.Format("      = {0:f3} x 1000 / [(0.23 x {1}) + (0.1 x {2} x {3} / 100)]", Pu, fck, p, fy));
            list.Add(string.Format("      = {0:f3} Sq.mm.", req_area));
            list.Add(string.Format(""));

            double alpha_n = 1 + ((Pu / Puz) - 0.2) * (5.0 / 3.0);
            list.Add(string.Format("   αn = 1 + [(Pu / Puz) - 0.2] x (5/3)"));
            list.Add(string.Format("      = 1 + [({0:f3} / {1:f3}) - 0.2] x (5 x 3)", Pu, Puz));
            list.Add(string.Format("      = {0:f3}", alpha_n));
            list.Add(string.Format(""));



            double Mu = Math.Pow((Math.Pow(Mux, alpha_n) + Math.Pow(Muy, alpha_n)), (1 / alpha_n));
            list.Add(string.Format("Mu (Y' - effective) = [(Mux)^αn + (Muy)^αn]^(1/ αn)"));
            list.Add(string.Format("                   = [{0:f3}^{1:f3} + {2:f3}^{1:f3}]^(1/{1:f3})", Mux, alpha_n, Muy));
            list.Add(string.Format("                   = {0:f3} KN-m", Mu));
            list.Add(string.Format(""));

            list.Add(string.Format("From section = D x b = {0} x {1}", D, b));

            Ac = D * b;
            list.Add(string.Format("Area provided = Ac = {0:f3} Sq.mm.", Ac));
            list.Add(string.Format(""));


            double val1 = Pu / (fck * b * D);
            list.Add(string.Format("(i)   Pu / (fck x b x D) = ({0:f3} x 1000) / ({1} x {2} x {3}) = {4:f3}", Pu, fck, b, D, val1));
            double val2 = Mu / (fck * b * D * D);
            list.Add(string.Format("(ii)  Mu / (fck x b x D^2) = ({0:f3} x 1000 x 1000) / ({1} x {2} x {3}^2) = {4:f3}", Mu, fck, b, D, val2));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Steel Bar diameter = bar_dia= {0} m", bar_dia));

            double d_dash = Cover + (bar_dia / 2.0);
            list.Add(string.Format("  d' = Cover + (bar_dia/ 2.0)"));
            list.Add(string.Format("     = {0} + ({1} / 2.0)", Cover, bar_dia));
            list.Add(string.Format("     = {0:f3} mm", d_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("D = {0} mm", D));
            list.Add(string.Format(""));

            double val3 = d_dash / D;

            if (val3 < 0.2)
            {
                val3 = 0.2;
                list.Add(string.Format("d' / D = {0:f3} / {1} = {2:f3} ≈ 0.2", d_dash, D, (d_dash / D)));
            }
            else
            {
                list.Add(string.Format("d' / D = {0:f3} / {1} = {2:f3}", d_dash, D, (d_dash / D)));
            }


            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("From Interaction Diagram for:"));
            list.Add(string.Format("Reinforcement Equally Distributed in two opposite side, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));


            //list.Add(string.Format("(Open Interaction Diagram)"));
            frm_InteractionDiagram fid = new frm_InteractionDiagram();


            fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get, p / fck = ";
            fid.Value_1 = "0.22";
            fid.ShowDialog();

            double p_by_fck = MyList.StringToDouble(fid.Value_1, 0.22);
            list.Add(string.Format(""));
            list.Add(string.Format("We get, p / fck = {0}", p_by_fck));
            list.Add(string.Format(""));
            p = p_by_fck * fck;
            if (p > 4.0)
            {
                list.Add(string.Format("Percentage of Steel = p = {0:f3} x fck = {0:f3} x {1} = {2:f3}% > 4%", p_by_fck, fck, p));
                list.Add(string.Format("So the Section is Inadequate"));
            }
            else
            {
                list.Add(string.Format("Percentage of Steel = p = {0:f3} x fck = {0:f3} x {1} = {2:f3}% < 4%", p_by_fck, fck, p));
                list.Add(string.Format("So the Section is Adequate"));
            }
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion STEP 1 : Design Calculation


            #region  STEP 2:
            list.Add(string.Format(""));
            list.Add(string.Format("------------------"));
            list.Add(string.Format("STEP 2 : "));
            list.Add(string.Format("------------------"));
            list.Add(string.Format(""));

            double Ast = p * Ac / 100.0;
            list.Add(string.Format("Area of Steel required = Ast = p x Ac / 100 = {0:f3} x {1:f3} / 100 = {2:f3} Sq.mm.", p, Ac, Ast));
            list.Add(string.Format(""));

            double bar_nos = 14;
            //bar_dia = 25;
            list.Add(string.Format("Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Diameter = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("Let us provide {0} Y' {1} Rebars", bar_nos, bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("({0} nos. of {1} mm diameter steel reinforcement bars)", bar_nos, bar_dia));
            list.Add(string.Format(""));

            double CAst = bar_nos * (Math.PI * bar_dia * bar_dia / 4.0);
            list.Add(string.Format("CAst = {0} x {1:f3} = {2:f3} Sq.mm.", bar_nos, (Math.PI * bar_dia * bar_dia / 4.0), CAst));
            list.Add(string.Format(""));

            p = CAst * 100 / Ac;
            if (p < 4.0)
            {
                list.Add(string.Format("Percentage of Steel provided = p = CAst x 100 / Ac"));
                list.Add(string.Format("                                 = {0:f3} x 100 / {1:f3}", CAst, Ac));
                list.Add(string.Format("                                 = {0:f3}%  <  4%, So OK", p));
            }
            else
            {
                list.Add(string.Format("Percentage of Steel provided = p = CAst x 100 / Ac"));
                list.Add(string.Format("                                 = {0:f3} x 100 / {1:f3}", CAst, Ac));
                list.Add(string.Format("                                 = {0:f3}%  >  4%, So NOT OK", p));
            }
            list.Add(string.Format(""));

            p_by_fck = p / fck;
            list.Add(string.Format("p / fck = {0:f3} / {1} = {1:f3}", p, p_by_fck));

            val3 = d_dash / D;
            if (val3 < 0.2)
            {
                list.Add(string.Format("d’ / D = {0:f3} / {1} = {2:f3} ≈ 0.2", d_dash, D, val3));
                val3 = 0.2;
            }
            else
            {
                list.Add(string.Format("d’ / D = {0:f3} / {1} = {2:f3}", d_dash, D, val3));
            }
            list.Add(string.Format(""));
            list.Add(string.Format("With section orientation D={0} mm and b={1} mm", D, b));
            list.Add(string.Format("Dimension D is in the direction of Muy and dimension b is in the direction of Mux"));
            list.Add(string.Format("Steel Reinforcement Bar Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Steel Reinforcement Bar Diameter = bar_dia  = {0} mm", bar_dia));
            list.Add(string.Format("Design is  OK."));
            list.Add(string.Format(""));
            #endregion  STEP 2:


            #region  STEP 3 :

            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------"));
            list.Add(string.Format("STEP 3 :"));
            list.Add(string.Format("-------------------------"));
            list.Add(string.Format(""));

            bar_nos = 8;
            list.Add(string.Format("Next, Let us try with Steel  Rebars:"));
            list.Add(string.Format("Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Diameter = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("From Interaction Diagram for:"));
            list.Add(string.Format("Reinforcement equally distributed in two opposite side, "));


            double val4 = Pu / (fck * b * D);
            list.Add(string.Format("Steel grade = fy = {0}, d’ / D = {1:f3} and Pu / (fck x b x D) = {2:f3}", fy, val3, val4));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("(Open Interaction Diagram)"));

            fid = new frm_InteractionDiagram();

            fid.Rebar_Nos = bar_nos;
            fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get, Muy1 / (fck x b x D x D) = ";
            fid.Value_1 = "0.23";
            fid.ShowDialog();


            double val5 = MyList.StringToDouble(fid.Value_1, 0.23);
            list.Add(string.Format("We get, Muy1 / (fck x b x D x D) = {0:f3}", val5));
            list.Add(string.Format(""));

            double Muy1 = val5 * (fck * b * D * D);
            list.Add(string.Format("Muy1 = {0:f3} x {1} x {2} x {3} x {3} = {4:f3} KNm", val5, fck, b, D, Muy1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double bar_area = Math.PI * bar_dia * bar_dia / 4.0;
            list.Add(string.Format("bar_area = 3.1416 x {0} x {0} / 4 = {1:f3} Sq.mm", bar_dia, bar_area));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            p = bar_nos * bar_area * 100 / (D * b);

            list.Add(string.Format("Percentage of Steel = p = bar_nos  x bar_area x 100 / (D x b)"));
            list.Add(string.Format("                        = {0}  x {1} x 100 / ({2} x {3})", bar_nos, bar_area, D, b));
            list.Add(string.Format("                        = {0:f3}%", p));
            list.Add(string.Format(""));

            Puz = 0.45 * fck * Ac + 0.75 * fy * CAst;
            list.Add(string.Format("   Puz = 0.45 x fck x Ac + 0.75 x fy x CAst"));
            list.Add(string.Format("       = 0.45 x {0} x {1:f3} + 0.75 x {2} x {3:f3}", fck, Ac, fy, CAst));
            list.Add(string.Format("       = {0:f3} N", Puz));
            Puz = Puz / 1000.0;
            list.Add(string.Format("       = {0:f3} KN.", Puz));
            list.Add(string.Format(""));

            p_by_fck = p / fck;
            list.Add(string.Format("p / fck = {0:f3} / {1} = {2:f3}", p, fck, p_by_fck));
            list.Add(string.Format(""));
            list.Add(string.Format("Pu / (fck x b x D) = {0:f3} x 1000 / ({1} x {2} x {3}) = {4:f3}", Pu, fck, b, D, val4));
            list.Add(string.Format(""));

            #endregion  STEP 3 :


            #region STEP 4 :
            list.Add(string.Format(""));
            list.Add(string.Format("------------------"));
            list.Add(string.Format("STEP 4 :"));
            list.Add(string.Format("------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Now, Let us try by changing the orientation of the"));
            list.Add(string.Format("Column Section with reduced steel reinforcements,"));
            list.Add(string.Format(""));

            double D_dash = b;

            b = D;


            list.Add(string.Format("Taking D’ = b = {0} mm and b = {1} mm,", D_dash, b));
            list.Add(string.Format(""));

            double val6 = d_dash / D_dash;
            if (val6 < 0.1)
            {
                list.Add(string.Format("d' / D’ = {0:f3} / {1} = {2:f3} = 0.10", d_dash, D_dash, val6));
                val6 = 0.1;
            }
            else
            {
                list.Add(string.Format("d' / D’ = {0:f3} / {1} = {2:f3}", d_dash, D_dash, val6));
            }
            list.Add(string.Format(""));
            list.Add(string.Format("From Interaction Diagram for:"));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement equally distributed on four sides,"));
            list.Add(string.Format("Steel Grade = fy = {0}, d’/D’ = {1:f3} and p / fck = {2:f3}", fy, val6, p_by_fck));


            fid = new frm_InteractionDiagram();

            fid.Rebar_Nos = bar_nos;
            fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get value of Mux1 / (fck x b x D’ x D’) = ";
            fid.Value_1 = "0.155";

            fid.ShowDialog();

            double val7 = MyList.StringToDouble(fid.Value_1, 0.155);


            list.Add(string.Format(""));
            list.Add(string.Format("For value of Pu / (fck x b x D’) = {0:f3}", val4));
            list.Add(string.Format(""));
            //list.Add(string.Format("(Open Interaction Diagram)"));
            //double val7 = 0.155;



            list.Add(string.Format("We get value of Mux1 / (fck x b x D’ x D’) = {0:f3}", val7));

            double Mux1 = val7 * fck * b * D_dash * D_dash;
            list.Add(string.Format("Therefore, Mux1 = {0:f3} x {1} x {2} x {3} x {3}", val7, fck, b, D_dash));
            list.Add(string.Format("                = {0:f3} N-m", Mux1));
            Mux1 = Mux1 / 1000000;
            list.Add(string.Format("                = {0:f3} KNm.", Mux1));
            list.Add(string.Format(""));



            alpha_n = 1 + ((Pu / Puz) - 0.2) * (5 / 3);
            list.Add(string.Format("αn = 1 + [(Pu / Puz) - 0.2] x (5/3)"));
            list.Add(string.Format("   = 1 + [({0:f3} / {1:f3}) - 0.2] x (5/3)", Pu, Puz));
            list.Add(string.Format("   = {0:f3}", alpha_n));
            list.Add(string.Format(""));

            double val8 = (Mux / Mux1) * alpha_n + (Muy / Muy1) * alpha_n;
            list.Add(string.Format("(Mux / Mux1) αn + (Muy / Muy1) αn"));
            list.Add(string.Format("= ({0:f3} / {1:f3}) x {2:f3} + ({3:f3} / {4:f3}) x {5:f3}", Mux, Mux1, alpha_n, Muy, Muy1, alpha_n));
            list.Add(string.Format("= {0:f3} + {1:f3}", ((Mux / Mux1) * alpha_n), ((Muy / Muy1) * alpha_n)));
            list.Add(string.Format(""));

            bool IS_DESIGN_OK = true;
            if (val8 < 1)
                list.Add(string.Format("= {0:f3} < 1         So, OK", val8));
            else
            {
                list.Add(string.Format("= {0:f3} > 1         So, NOT OK", val8));
                IS_DESIGN_OK = false;
            }
            list.Add(string.Format(""));
            list.Add(string.Format("So the Section  = b x D’ = {0} x {1}", b, D_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("With section orientation D = {0} mm and b = {1} mm ", D_dash, b));
            list.Add(string.Format(""));
            list.Add(string.Format("Dimension D’ is in the direction of Muy and dimension b is in the direction of Mux"));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel Reinforcement Bar Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel Reinforcement Bar Diameter = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format(""));

            if (IS_DESIGN_OK)
                list.Add(string.Format("Design is  OK."));
            else
                list.Add(string.Format("Design is  NOT OK."));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            CAst = Math.PI * bar_dia * bar_dia / 4;
            list.Add(string.Format("CAst = Steel Reinforcement Bars  {0} Nos. {1} mm diameter = {0} x {2:f3} = {3:f3} Sq.mm.", bar_nos, bar_dia, CAst, (bar_nos * CAst)));
            #endregion STEP 4 :



            File.WriteAllLines(Report_File, list.ToArray());


        }

        public static List<string> Get_Banner()
        {

            List<string> list = new List<string>();


            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*           DESIGN OF RCC COLUMN             *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");

            #endregion
            return list;
        }


        public List<string> Design_Program_Loop(int step)
        {
            IS_DESIGN_OK = true;
            BOQ = new Column_BOQ();

            List<string> list = new List<string>();


            //string Beam_Nos = 
            //ColumnN

            //string Beam_Nos = Col_Data.Continuous_ColumnMembers;


            List<int> beam_nos = MyList.Get_Array_Intiger(Beam_Nos);


            BOQ.ColumnNos = Beam_Nos;
            IS_DESIGN_OK = true;

            MemberIncidence mm = AST_DOC.Members.Get_Member(beam_nos[0]);


            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------------------------"));
            //list.Add(string.Format("STEP {0}.0 : Design Data From Structure Model for Column {1}", step, Col_Data.ColumnNos));
            list.Add(string.Format("COLUMN_DESIGN {0} : Design Data From Structure Model", step, Col_Data.ColumnNos));
            list.Add(string.Format("-------------------------------------------------------------------"));

            list.Add(string.Format(""));

            JointCoordinateCollection cont_jcc = new JointCoordinateCollection();
            MemberIncidenceCollection mbr_coll = new MemberIncidenceCollection();
            DirecctionCollection dc1 = new DirecctionCollection();


            //List<int> all_beams = MyStrings.Get_Array_Intiger(Beam_Nos);
            List<int> all_beams = Get_Continuous_Members(mm, ref cont_jcc, ref mbr_coll);

            list.Add(string.Format(""));

            string kStr = "";
            int c = 1;

            double Ly = 0.0;
            double Lx = 0.0;

            MovingLoadAnalysis.Member mbr = null;
            list.Add(string.Format(""));

            if (beam_nos.Count > 0)
            {
                list.Add(string.Format("Column {0}, Continuous with Member Nos. {1}", Col_Data.ColumnNos, Col_Data.Continuous_ColumnMembers.Replace(" ", ", ")));
            }
            else if (beam_nos.Count > 0)
            {
                list.Add(string.Format("Column {0}, Member No. {1}", Col_Data.ColumnNos, Col_Data.Continuous_ColumnMembers));
            }

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("EACH MEMBER AND ITS JOINTS :"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));

            List<int> lst_jnts = new List<int>();

            double _l1, _l2;




            list.Add(string.Format("--------------------------------------------------------------------------------------"));
            list.Add(string.Format("Member#   Joint1   X         Y        Z      Joint2    X         Y       Z      Length"));
            list.Add(string.Format("--------------------------------------------------------------------------------------"));




            BOQ.Floor_ELevation_From = mbr_coll[0].StartNode.Y;
            BOQ.Floor_ELevation_To = mbr_coll[mbr_coll.Count - 1].EndNode.Y;
            BOQ.Section_B = mm.Property.YD;
            BOQ.Section_D = mm.Property.ZD;

            BOQ.Length = 0;
            foreach (var item in mbr_coll)
            {

                list.Add(string.Format("{0,5} {1,8} {2,8:f3} {3,8:f3} {4,8:f3} {5,8} {6,8:f3} {7,8:f3} {8,8:f3} {9,8:f3}",
                    item.MemberNo,
                    item.StartNode.NodeNo,
                    item.StartNode.Point.x,
                    item.StartNode.Point.y,
                    item.StartNode.Point.z,
                    item.EndNode.NodeNo,
                    item.EndNode.Point.x,
                    item.EndNode.Point.y,
                    item.EndNode.Point.z,
                    item.Length));

                BOQ.Length = BOQ.Length + item.Length;

            }
            list.Add(string.Format("--------------------------------------------------------------------------------------"));

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #region User Input Data


            //Pu = 978.18;
            //Mux = 40.092;
            //Muy = 206.55;
            //fck = 20;
            //fy = 415;
            //D = 300;
            //b = 500;
            //bar_dia = 25;
            //tie_dia = 8;
            //Cover = 40;


            list.Add(string.Format("Maximum Forces in Vertical Members Obtained from Analysis Results:"));
            list.Add(string.Format("Pu = {0:f3} KN (Compressive Force along the axis of Column in Vertical Direction)", Pu));
            list.Add(string.Format(""));
            list.Add(string.Format("Mux = {0:f3} KN-m", Mux));
            list.Add(string.Format("Muy = {0:f3} KN-m", Muy));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Reinforcement Steel Grade = fy = Fe{0}", fy));
            list.Add(string.Format(""));
            list.Add(string.Format("Try Size of Column D = {0} mm", D));
            list.Add(string.Format("                   b = {0} mm", b));
            list.Add(string.Format(""));
            list.Add(string.Format("Diameter of Reinforcement Steel Bars = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format("Number of Main Steel Reinforcement Bars = bar_nos = {0} nos", bar_nos));

            list.Add(string.Format(""));
            list.Add(string.Format("Diameter of Lateral Binder Tie Bars = tie_dia = {0} mm", tie_dia));
            list.Add(string.Format("Reinforcement Side Cover = Cover = {0} mm", Cover));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion User Input Data

            #region STEP 1 : Design Calculation

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------"));
            //list.Add(string.Format("STEP {0}.1 : DESIGN CALCULATION", step));
            list.Add(string.Format("STEP 1 : DESIGN CALCULATION", step));
            list.Add(string.Format("-----------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double ex = Muy / Pu;
            list.Add(string.Format("Eccentricity with respect to Muy = ex = Muy / Pu = {0:f3} / {1:f3} = {2:f3}", Muy, Pu, ex));
            list.Add(string.Format("D = {0} mm = {1:f3} m", D, D / 1000));

            //D = D;
            double ex_by_D = ex / (D / 1000);

            list.Add(string.Format(""));
            list.Add(string.Format("ex / D = {0:f3} / {1:f3} = {2:f3}", ex, (D / 1000), ex_by_D));

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double p = 2.0;
            list.Add(string.Format("Considering 2% Steel Reinforcement, p = {0}", p));

            double Ac = ((100 - p) / 100.0) * D * b;
            list.Add(string.Format(""));
            list.Add(string.Format("Ac = Effective Area of Concrete = (100-p)/100 x D x b"));
            list.Add(string.Format("                                = {0:f3} x {1} x {2}", ((100 - p) / 100.0), D, b));
            list.Add(string.Format("                                = {0:f3} Sq.mm", Ac));
            list.Add(string.Format(""));

            double Asc = (p / 100.0) * D * b;
            list.Add(string.Format("Required Area of Steel = Asc = Area of Steel = p x D x b = {0:f3} x {1} x {2} Sq.mm = {3:f3} Sq.mm", (p / 100.0), D, b, Asc));
            list.Add(string.Format(""));
            list.Add(string.Format("From equation:"));
            list.Add(string.Format(""));

            double Puz = 0.45 * fck * Ac + 0.75 * fy * Asc;
            list.Add(string.Format("Puz = 0.45 x fck x Ac + 0.75 x fy x Asc"));
            list.Add(string.Format("    = 0.45 x {0} x {1:f3} + 0.75 x {2} x {3:f3}", fck, Ac, fy, Asc));
            list.Add(string.Format("    = {0:f3} N", Puz));
            Puz = Puz / 1000.0;
            list.Add(string.Format("    = {0:f3} kN", Puz));
            list.Add(string.Format(""));

            double req_area = (Pu * 1000) / ((0.23 * fck) + (0.1 * p * fy / 100));
            list.Add(string.Format("Required Cross Section Area of Column"));
            list.Add(string.Format(""));
            list.Add(string.Format("      = Pu x 1000 / [(0.23 x fck) + (0.1 x p x fy / 100)]"));
            list.Add(string.Format("      = {0:f3} x 1000 / [(0.23 x {1}) + (0.1 x {2} x {3} / 100)]", Pu, fck, p, fy));
            list.Add(string.Format("      = {0:f3} Sq.mm.", req_area));
            list.Add(string.Format(""));

            double alpha_n = 1 + ((Pu / Puz) - 0.2) * (5.0 / 3.0);
            list.Add(string.Format("   αn = 1 + [(Pu / Puz) - 0.2] x (5/3)"));
            list.Add(string.Format("      = 1 + [({0:f3} / {1:f3}) - 0.2] x (5 x 3)", Pu, Puz));
            list.Add(string.Format("      = {0:f3}", alpha_n));
            list.Add(string.Format(""));



            double Mu = Math.Pow((Math.Pow(Mux, alpha_n) + Math.Pow(Muy, alpha_n)), (1 / alpha_n));
            list.Add(string.Format("Mu (Y' - effective) = [(Mux)^αn + (Muy)^αn]^(1/ αn)"));
            list.Add(string.Format("                   = [{0:f3}^{1:f3} + {2:f3}^{1:f3}]^(1/{1:f3})", Mux, alpha_n, Muy));
            list.Add(string.Format("                   = {0:f3} KN-m", Mu));
            list.Add(string.Format(""));

            list.Add(string.Format("From section = D x b = {0} x {1}", D, b));

            Ac = D * b;
            list.Add(string.Format("Area provided = Ac = {0:f3} Sq.mm.", Ac));
            list.Add(string.Format(""));


            double val1 = Pu * 1000 / (fck * b * D);
            list.Add(string.Format("(i)   Pu / (fck x b x D) = ({0:f3} x 1000) / ({1} x {2} x {3}) = {4:f3}", Pu, fck, b, D, val1));
            double val2 = Mu * 1000 * 1000 / (fck * b * D * D);
            list.Add(string.Format("(ii)  Mu / (fck x b x D^2) = ({0:f3} x 1000 x 1000) / ({1} x {2} x {3}^2) = {4:f3}", Mu, fck, b, D, val2));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Steel Bar diameter = bar_dia= {0} mm", bar_dia));

            double d_dash = Cover + (bar_dia / 2.0);
            list.Add(string.Format("  d' = Cover + (bar_dia/ 2.0)"));
            list.Add(string.Format("     = {0} + ({1} / 2.0)", Cover, bar_dia));
            list.Add(string.Format("     = {0:f3} mm", d_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("D = {0} mm", D));
            list.Add(string.Format(""));

            double val3 = d_dash / D;

            if (val3 < 0.2)
            {
                val3 = 0.2;
                list.Add(string.Format("d' / D = {0:f3} / {1} = {2:f3} ≈ 0.2", d_dash, D, (d_dash / D)));
            }
            else
            {
                list.Add(string.Format("d' / D = {0:f3} / {1} = {2:f3}", d_dash, D, (d_dash / D)));
            }


            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram for:"));
            //list.Add(string.Format("Reinforcement Equally Distributed in two opposite side, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));
            //Chiranjit [2015 04 09]
            //list.Add(string.Format("Reinforcement Equally Distributed in four opposite sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));


            //list.Add(string.Format("(Open Interaction Diagram)"));
            frm_InteractionDiagram fid = new frm_InteractionDiagram();

            fid.SetText1_Tab1 = "Pu / (fck x b x D) = " + val1.ToString("f3");
            fid.SetText2_Tab1 = "Mu / (fck x b x D^2) = " + val2.ToString("f3");
            fid.Rebar_Nos = bar_nos;
            fid.Tab_Heading = "Mux1/fck x b x D x D  (X-X axis)";

            //fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get, p / fck = ";
            //fid.Value_1 = "0.22";
            //fid.Value_1 = "0.18";
            fid.Value_1 = "0.02";


            fid.fy1 = fy;
            fid.da = val3;
            //fid.D = D;

            int side = 2;

            //if (bar_nos % 4 == 0)
            //{

            HEADSNeed.ASTRA.ASTRAForms.frm_Intact_Diag1 ffm = new HEADSNeed.ASTRA.ASTRAForms.frm_Intact_Diag1();

            ffm.Rebar_Nos = (int)bar_nos;
            ffm.Fy = fy;
            ffm.d_dash_by_D = val3.ToString();

            //side = 2;
            if (ffm.ShowDialog() == DialogResult.Cancel)
            {
                //this.Close();
                return null;
            }
            side = ffm.Side;
            //}
            fid.side = side;


            fid.ShowDialog();





            //if (side == 2)
            //{
            //    list.Add(string.Format("Reinforcement Equally Distributed in Two sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));
            //}
            //else
            //    list.Add(string.Format("Reinforcement Equally Distributed in Four sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));
            //list.Add(string.Format("Reinforcement Equally Distributed in Four opposite sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));

            double p_by_fck = MyList.StringToDouble(fid.Value_1, 0.22);
            list.Add(string.Format(""));

            #region Chiranjit [2015 06 09]

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("From Interaction Diagram (1) for:"));
            list.Add(string.Format(""));

            if (side == 2)
            {
                list.Add(string.Format("Reinforcement Equally Distributed in Two sides, "));
            }
            else
                list.Add(string.Format("Reinforcement Equally Distributed in Four sides, "));
            


            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format("d’ / D = {0}", val3));
            list.Add(string.Format("Pu / (fck x b x D) = {0:f3}", val1));
            list.Add(string.Format("Mu / (fck x b x D^2) = {0:f3}", val2));
            list.Add(string.Format(""));


            #endregion Chiranjit [2015 06 09]



            list.Add(string.Format("We get, p / fck = {0}", p_by_fck));
            list.Add(string.Format(""));
            p = p_by_fck * fck;
            if (p > 4.0)
            {
                list.Add(string.Format("Percentage of Steel = p = {0:f3} x fck = {0:f3} x {1} = {2:f3}% > 4%", p_by_fck, fck, p));
                list.Add(string.Format("So the Section is Inadequate"));
            }
            else
            {
                list.Add(string.Format("Percentage of Steel = p = {0:f3} x fck = {0:f3} x {1} = {2:f3}% < 4%", p_by_fck, fck, p));
                list.Add(string.Format("So the Section is Adequate"));
            }
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion STEP 1 : Design Calculation


            #region  STEP 2:
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------"));
            //list.Add(string.Format("STEP {0}.2 : Area of Steel ", step));
            list.Add(string.Format("STEP 2 : Area of Steel ", step));
            list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));

            double Ast = p * Ac / 100.0;
            list.Add(string.Format("Area of Steel required = Ast = p x Ac / 100 = {0:f3} x {1:f3} / 100 = {2:f3} Sq.mm.", p, Ac, Ast));
            list.Add(string.Format(""));

            double CAst = (Math.PI * bar_dia * bar_dia / 4.0);


            //double bar_nos = 14;

            //bar_nos = (int)(Ast / CAst);
            //bar_nos += 1.0;




            Steel_Reinforcement ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[1]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = BOQ.Length;
            BOQ.Steel_Reinforcement.Add(ssr);


            //bar_dia = 25;
            list.Add(string.Format("Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Diameter = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("Let us provide {0} Y' {1} Rebars", bar_nos, bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("({0} nos. of {1} mm diameter steel reinforcement bars)", bar_nos, bar_dia));
            list.Add(string.Format(""));

            list.Add(string.Format("CAst = {0} x {1:f3} = {2:f3} Sq.mm.", bar_nos, CAst = (Math.PI * bar_dia * bar_dia / 4.0), CAst = CAst * bar_nos));
            list.Add(string.Format(""));

            p = CAst * 100 / Ac;
            if (p < 4.0)
            {
                list.Add(string.Format("Percentage of Steel provided = p = CAst x 100 / Ac"));
                list.Add(string.Format("                                 = {0:f3} x 100 / {1:f3}", CAst, Ac));
                list.Add(string.Format("                                 = {0:f3}%  <  4%, So OK", p));
            }
            else
            {
                list.Add(string.Format("Percentage of Steel provided = p = CAst x 100 / Ac"));
                list.Add(string.Format("                                 = {0:f3} x 100 / {1:f3}", CAst, Ac));
                list.Add(string.Format("                                 = {0:f3}%  >  4%, So NOT OK", p));
                IS_DESIGN_OK = false;

            }
            list.Add(string.Format(""));

            p_by_fck = p / fck;
            list.Add(string.Format("p / fck = {0:f3} / {1} = {2:f6}", p, fck, p_by_fck));

            val3 = d_dash / D;
            if (val3 < 0.2)
            {
                list.Add(string.Format("d’ / D = {0:f3} / {1} = {2:f3} ≈ 0.2", d_dash, D, val3));
                val3 = 0.2;
            }
            else
            {
                list.Add(string.Format("d’ / D = {0:f3} / {1} = {2:f3}", d_dash, D, val3));
            }
            list.Add(string.Format(""));
            list.Add(string.Format("With section orientation D={0} mm and b={1} mm", D, b));
            list.Add(string.Format("Dimension D is in the direction of Muy and dimension b is in the direction of Mux"));
            list.Add(string.Format("Steel Reinforcement Bar Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Steel Reinforcement Bar Diameter = bar_dia  = {0} mm", bar_dia));

            if (IS_DESIGN_OK)
                list.Add(string.Format("Design is  OK."));
            else
                list.Add(string.Format("Design is NOT OK."));
            list.Add(string.Format(""));
            #endregion  STEP 2:


            #region  STEP 3 :

            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------"));
            //list.Add(string.Format("STEP {0}.3 : Steel  Rebars", step));
            //list.Add(string.Format("STEP {0}.3 : CHECK DESIGN", step));
            list.Add(string.Format("STEP 3 : CHECK DESIGN", step));
            list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));

            //bar_nos = 8;
            //list.Add(string.Format("Next, Let us try with Steel  Rebars:"));
            list.Add(string.Format("Let us try with Steel  Rebars:"));
            list.Add(string.Format("Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Diameter = bar_dia = {0} mm", bar_dia));


            double bar_area = Math.PI * bar_dia * bar_dia / 4.0;
            list.Add(string.Format("bar_area = 3.1416 x {0} x {0} / 4 = {1:f3} Sq.mm", bar_dia, bar_area));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            p = bar_nos * bar_area * 100 / (D * b);

            list.Add(string.Format("Percentage of Steel = p = bar_nos  x bar_area x 100 / (D x b)"));
            list.Add(string.Format("                        = {0}  x {1} x 100 / ({2} x {3})", bar_nos, bar_area, D, b));
            list.Add(string.Format("                        = {0:f3}%", p));
            list.Add(string.Format(""));

            Puz = 0.45 * fck * Ac + 0.75 * fy * CAst;
            list.Add(string.Format("   Puz = 0.45 x fck x Ac + 0.75 x fy x CAst"));
            list.Add(string.Format("       = 0.45 x {0} x {1:f3} + 0.75 x {2} x {3:f3}", fck, Ac, fy, CAst));
            list.Add(string.Format("       = {0:f3} N", Puz));
            Puz = Puz / 1000.0;
            list.Add(string.Format("       = {0:f3} KN.", Puz));
            list.Add(string.Format(""));


            double val4 = Pu * 1000 / (fck * b * D);
            p_by_fck = p / fck;
            list.Add(string.Format("Pu / (fck x b x D) = {0:f3} x 1000 / ({1} x {2} x {3}) = {4:f3}", Pu, fck, b, D, val4));
            list.Add(string.Format(""));
            list.Add(string.Format("p / fck = {0:f3} / {1} = {2:f3}", p, fck, p_by_fck));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram for:"));
            ////list.Add(string.Format("Reinforcement equally distributed in two opposite side, "));
            //list.Add(string.Format("Reinforcement equally distributed in four opposite sides, "));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[2]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = BOQ.Length;
            BOQ.Steel_Reinforcement.Add(ssr);



            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("(Open Interaction Diagram)"));

            fid = new frm_InteractionDiagram();

            fid.Rebar_Nos = bar_nos;

            fid.SetText1_Tab1 = "Pu / (fck x b x D) = " + val4.ToString("f3");
            fid.SetText2_Tab1 = "p / fck =  " + p_by_fck.ToString("f3");
            fid.Tab_Heading = "Muy1/fck x D x b x b  (Y-Y axis)";
            //fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get, Muy1 / (fck x b x D x D) = ";
            fid.Value_1 = "0.23";

            fid.fy1 = fy;
            fid.da = val3;
            fid.ShowDialog();

            //side = fid.side;

            list.Add(string.Format("Taking   b = {0} mm and D = {1} mm,", b, D));

            if (side == 2)
                list.Add(string.Format("Reinforcement equally distributed in two opposite sides, "));
            else
                list.Add(string.Format("Reinforcement equally distributed in four opposite sides, "));

            //list.Add(string.Format("Steel grade = fy = {0}, d’ / D = {1:f3} and Pu / (fck x b x D) = {2:f3}", fy, val3, val4));

            list.Add(string.Format("For values of Steel grade = fy = {0}, d’ / D = {1:f3}/{2} = {3:f3} ", fy, d_dash, D, d_dash / D));
            list.Add(string.Format("Pu / (fck x b x D) = {0:f3}", val4));
            list.Add(string.Format("p / fck = {0:f3} / {1} = {2:f3}", p, fck, p_by_fck));
          

            double val5 = MyList.StringToDouble(fid.Value_1, 0.23);
            list.Add(string.Format("From Interaction Diagram (2), We get, Muy1 / (fck x b x D x D) = {0:f3}", val5));
            list.Add(string.Format(""));

            double Muy1 = val5 * (fck * b * D * D);
            list.Add(string.Format("Therefore, Muy1 = {0:f3} x {1} x {2} x {3} x {3}", val5, fck, b, D, Muy1));
            list.Add(string.Format("                = {0:f3} N-m", Muy1));
            Muy1 = Muy1 / 1000000.0;
            list.Add(string.Format("                = {0:f3} KN-m", Muy1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion  STEP 3 :


            #region STEP 4 :
            //list.Add(string.Format(""));
            //list.Add(string.Format("---------------------------"));
            //list.Add(string.Format("STEP {0}.4 : CHECK DESIGN", step));
            //list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));
            //list.Add(string.Format("Now, Let us try by changing the orientation of the"));
            list.Add(string.Format("Next, Let us try by changing the orientation of the"));
            list.Add(string.Format("Column Section with reduced steel reinforcements,"));
            list.Add(string.Format(""));

            //double D_dash = Math.Min(D, b);
            double D_dash = b;

            double _b = b;
            //b = Math.Max(D, b);

            double b_dash = D;

            //double D_dash = b;

            //b = D;


            list.Add(string.Format("Taking D’ = b = {0} mm and b' = D = {1} mm, d'/D’ = {2:f3}/{0} = {3:f3} ", D_dash, b_dash, d_dash, d_dash / D_dash));
            //list.Add(string.Format("Taking D’ = b = {0} mm and b' = D = {1} mm, d'/D’ = 52.500/400 = 0.131 ", D_dash, b_dash));
            //list.Add(string.Format("Taking D’ = {0} mm and b = {1} mm,", D, b));


            list.Add(string.Format(""));

            double val6 = d_dash / D_dash;
            if (val6 < 0.1)
            {
                list.Add(string.Format(""));
                list.Add(string.Format("d' / D’ = {0:f3} / {1} = {2:f3} = 0.10", d_dash, D_dash, val6));
                val6 = 0.1;
            }
            else
            {
                //list.Add(string.Format("d' / D’ = {0:f3} / {1} = {2:f3}", d_dash, D_dash, val6));
            }



            list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram for:"));
            list.Add(string.Format(""));


            fid = new frm_InteractionDiagram();

            fid.Rebar_Nos = bar_nos;

            //fid.SetText1_Tab1 = "Pu / (fck x b x D) = " + val1.ToString("f3");
            //fid.SetText2_Tab1 = "Mu / (fck x b x D^2) = " + val2.ToString("f3");
            fid.SetText1_Tab1 = "Pu / (fck x b x D) = " + val4.ToString("f3");
            fid.SetText2_Tab1 = "p / fck =  " + p_by_fck.ToString("f3");
            fid.Tab_Heading = "Mux1 / (fck x b' x D’ x D’)";
            //fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get value of Mux1 / (fck x b' x D’ x D’) = ";
            fid.Value_1 = "0.155";


            fid.fy1 = fy;
            fid.da = val3;

            fid.ShowDialog();

            //side = fid.side;
            if (side == 2)
                list.Add(string.Format("Reinforcement equally distributed on Two sides,"));
            else
                list.Add(string.Format("Reinforcement equally distributed on Four sides,"));


            //list.Add(string.Format("For values of Steel Grade = fy = {0}, d’/D’ = {1:f3} and p / fck = {2:f3}", fy, val6, p_by_fck));
            list.Add(string.Format("For values of Steel Grade = fy = {0}, d’/D’ = {1:f3} / {2} = {3:f3}", fy, d_dash, D_dash, d_dash / D_dash));



            double val7 = MyList.StringToDouble(fid.Value_1, 0.155);


            list.Add(string.Format(""));
            list.Add(string.Format("For value of Pu / (fck x b' x D’) = {0:f3}", val4));
            list.Add(string.Format("p / fck = {0:f3}/{1} = {2:f3}", p, fck, p_by_fck));
            list.Add(string.Format(""));
            //list.Add(string.Format("(Open Interaction Diagram)"));
            //double val7 = 0.155;



            list.Add(string.Format("From Interaction Diagram (3), We get, Mux1 / (fck x b' x D’ x D’) = {0:f3}", val7));


            #region Chiranjit [2015 06 09]

            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Pu / (fck x b x D) = 46.690 x 1000 / (20 x 400 x 600) = 0.010"));
            //list.Add(string.Format("p / fck = 1.227 / 20 = 0.061"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Taking b = 400 mm and D = 600 mm,"));
            //list.Add(string.Format("Reinforcement equally distributed in two opposite sides, "));
            //list.Add(string.Format("For values of Steel grade = fy = 415, d’ / D = 52.5/600 = 0.0.0875 "));
            //list.Add(string.Format("Pu / (fck x b x D) = 0.010"));
            //list.Add(string.Format("p / fck = 1.227 / 20 = 0.061"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram (2), we get, Muy1 / (fck x b x D x D) = 0.230"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Therefore, Muy1 = 0.230 x 20 x 400 x 600 x 600 / 10^6 "));
            //list.Add(string.Format("    = 662400000.000 N-mm"));
            //list.Add(string.Format("    = 662.400 KN-m"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Next, Let us try by changing the orientation of the"));
            //list.Add(string.Format("Column Section with reduced steel reinforcements,"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Taking D’ = b = 400 mm and b' = D = 600 mm, d'/D’ = 52.500/400 = 0.131"));
            //list.Add(string.Format("Reinforcement equally distributed in two opposite sides, "));
            //list.Add(string.Format("For values of Steel Grade = fy = 415, d’/D’ = 52.500/400 = 0.131 "));
            //list.Add(string.Format("Pu / (fck x b' x D’) = 0.010"));
            //list.Add(string.Format("p / fck = 1.227 / 20 = 0.061"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram (3), we get, Mux1 / (fck x b' x D’ x D’) = 0.155"));
            //list.Add(string.Format(""));



            #endregion Chiranjit [2015 06 09]



            double Mux1 = val7 * fck * b_dash * D_dash * D_dash;
            list.Add(string.Format("Therefore, Mux1 = {0:f3} x {1} x {2} x {3} x {3}", val7, fck, b_dash, D_dash));
            list.Add(string.Format("                = {0:f3} N-mm", Mux1));
            Mux1 = Mux1 / 1000000;
            list.Add(string.Format("                = {0:f3} KN-m.", Mux1));
            list.Add(string.Format(""));



            alpha_n = 1 + ((Pu / Puz) - 0.2) * (5 / 3);
            list.Add(string.Format("αn = 1 + [(Pu / Puz) - 0.2] x (5/3)"));
            list.Add(string.Format("   = 1 + [({0:f3} / {1:f3}) - 0.2] x (5/3)", Pu, Puz));
            list.Add(string.Format("   = {0:f3}", alpha_n));
            list.Add(string.Format(""));

            double val8 = (Mux / Mux1) * alpha_n + (Muy / Muy1) * alpha_n;
            list.Add(string.Format("(Mux / Mux1) αn + (Muy / Muy1) αn"));
            list.Add(string.Format("= ({0:f3} / {1:f3}) x {2:f3} + ({3:f3} / {4:f3}) x {5:f3}", Mux, Mux1, alpha_n, Muy, Muy1, alpha_n));
            list.Add(string.Format("= {0:f3} + {1:f3}", ((Mux / Mux1) * alpha_n), ((Muy / Muy1) * alpha_n)));
            list.Add(string.Format(""));

            if (val8 < 1)
            {
                list.Add(string.Format("= {0:f3} < 1         So, OK", val8));
            }
            else
            {
                list.Add(string.Format("= {0:f3} > 1         So, NOT OK", val8));
                IS_DESIGN_OK = false;
            }
            list.Add(string.Format(""));
            list.Add(string.Format("So the Section  = b' x D’ = {0} x {1}", b_dash, D_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("With section orientation D' = {0} mm and b' = {1} mm ", D_dash, b_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("Dimension D’ is in the direction of Muy and dimension b is in the direction of Mux"));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel Reinforcement Bar Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel Reinforcement Bar Diameter = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format(""));

            if (IS_DESIGN_OK)
                list.Add(string.Format("Design is  OK."));
            else
                list.Add(string.Format("Design is  NOT OK."));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //b

            list.Add(string.Format(""));


            CAst = Math.PI * bar_dia * bar_dia / 4;
            list.Add(string.Format("CAst = Steel Reinforcement Bars  {0} Nos. {1} mm diameter = {0} x {2:f3} = {3:f3} Sq.mm.", bar_nos, bar_dia, CAst, (bar_nos * CAst)));

            #endregion STEP 4 :


            #region STEP 5 :

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------------"));
            //list.Add(string.Format("STEP {0}.5 : LATERAL TIE OF COLUMN", step));
            //list.Add(string.Format("STEP {0}.4 : LATERAL TIE OF COLUMN", step));
            list.Add(string.Format("STEP 4 : LATERAL TIE OF COLUMN", step));
            list.Add(string.Format("-----------------------------------------"));
            list.Add(string.Format(""));

            double len = 2 * (D + b) - 4 * Cover;
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Length of The Tie =  2 x (D + b) - 4 * Cover", len));
            list.Add(string.Format("                  =  2 x ({0} + {1}) - 4 x {2}", D, b, Cover));
            list.Add(string.Format("                  =  {0} mm", len));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Refer to IS-456 Clause No-25.2-32"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("   i)  Dia of Lateral Ties <= (1/4)th of the Dia of the longest longitudinal bar"));
            list.Add(string.Format("                    <= (1/4) x {0} = {1} mm", bar_dia, bar_dia / 4.0));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("  ii)  Dia of Lateral Ties <= 5 mm"));
            list.Add(string.Format(""));
            list.Add(string.Format("Let us provide Y{0} lateral tie bars", tie_dia));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Spacing of lateral ties"));
            list.Add(string.Format("-----------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double tie_space1 = Math.Min(D, b);

            list.Add(string.Format("i) Spacing >= The least lateral dimension of the compression member."));
            list.Add(string.Format("           >= {0} mm ", tie_space1));
            list.Add(string.Format(""));
            double tie_space2 = bar_dia * 16;


            list.Add(string.Format("ii) Spacing >= 16 times of the smalest dia logitudinal bar."));
            list.Add(string.Format("            >= 16 X {0}", bar_dia));
            list.Add(string.Format("            >= {0}", tie_space2));
            list.Add(string.Format(""));
            double tie_space3 = tie_dia * 48;

            list.Add(string.Format("iii) Spacing >= 48 times the dia of the lateral tie."));

            list.Add(string.Format("             >= 48 X {0}", tie_dia));
            list.Add(string.Format("             >= {0}", tie_space3));

            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double tie_sp = Math.Min(Math.Min(tie_space1, tie_space2), tie_space3);

            tie_sp = (int)tie_sp / 10;
            tie_sp = (int)tie_sp * 10;



            list.Add(string.Format("So here we provide Y{0} lateral tie @{1} mm c/c.", tie_dia, tie_sp));
            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[3]";
            ssr.Bar_Dia = tie_dia;
            ssr.Length = 2 * (BOQ.Section_B + BOQ.Section_D) - 4 * Cover / 1000.0;

            bar_nos = ((int)(BOQ.Length * 1000 / tie_sp)) + 1;
            ssr.Number_Of_Bars = (int)bar_nos;

            BOQ.Steel_Reinforcement.Add(ssr);


            #region step 5
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format("STEP 5 DESIGN SUMMARY"));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format(""));

            Design_Summary = new List<string>();

            Design_Summary.Add(string.Format("COLUMN = {0}", Col_Data.ColumnNos));
            Design_Summary.Add(string.Format("CONTINUOUS MEMBERS = {0}", Col_Data.Continuous_ColumnMembers));
                      
            Design_Summary.Add(string.Format("Column Section = {0} mm. x {1} mm.", BOQ.Section_B * 1000, BOQ.Section_D * 1000));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide Main Steel Reinforcement Bars {0} Nos. {1} mm diameter",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars,
                BOQ.Steel_Reinforcement[0].Bar_Dia));


            Design_Summary.Add(string.Format("(Total Steel = Cast1 = {0:f3} Sq.mm.)", BOQ.Steel_Reinforcement[0].Area));
            Design_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[1]"));
            Design_Summary.Add(string.Format(""));

            CAst = (Math.PI * tie_dia * tie_dia / 4.0) * (1000.0 / tie_sp);
            Design_Summary.Add(string.Format("Provide Y{0} lateral tie @ {1} mm c/c.  (Steel per metre = C_Ast[2] = {2:f3} Sq.mm. / metre)", tie_dia, tie_sp, CAst));
            Design_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[2]"));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));

            list.AddRange(Design_Summary.ToArray());
            Design_Summary.Add(string.Format("---------------------------------------------------------------------------------------"));
            #endregion step 5


            #region step 5
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format("STEP 6 : BOQ SUMMARY"));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format(""));

            BOQ_Summary = new List<string>();

            double conc_weight = BOQ.Section_B * BOQ.Section_D * BOQ.Length;
            BOQ_Summary.Add(string.Format("Concrete Quantity = {0:f3} x {1:f3} x {2:f3} = {3:f3} Cu.m",
                BOQ.Section_B, BOQ.Section_D, BOQ.Length, conc_weight));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("---------------------"));
            BOQ_Summary.Add(string.Format("REBAR QUANTITY"));
            BOQ_Summary.Add(string.Format("---------------------"));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide Main Steel Reinforcement Bars {0} Nos. {1} mm diameter",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars,
                BOQ.Steel_Reinforcement[0].Bar_Dia));


            BOQ_Summary.Add(string.Format("(Total Steel = Cast1 = {0:f3} Sq.mm.)", BOQ.Steel_Reinforcement[0].Area));
            //BOQ_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[1]"));



            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "C_AST[1]";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = bar_dia;
            //ssr.Length = BOQ.Length;
            //BOQ.Steel_Reinforcement.Add(ssr);


            double tot_wgt = BOQ.Steel_Reinforcement[0].Number_Of_Bars * len * Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[0].Bar_Dia);




            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars, 
                BOQ.Length,
                Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[0].Bar_Dia), 
                tot_wgt));


            BOQ_Summary.Add(string.Format(""));

            CAst = (Math.PI * tie_dia * tie_dia / 4.0) * (1000.0 / tie_sp);
            BOQ_Summary.Add(string.Format("Provide Y{0} lateral tie @ {1} mm c/c.  (Steel per metre = C_Ast[2] = {2:f3} Sq.mm. / metre)", tie_dia, tie_sp, CAst));
            //BOQ_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[2]"));
            tot_wgt = BOQ.Steel_Reinforcement[2].Number_Of_Bars * 
                BOQ.Steel_Reinforcement[2].Length * 
                Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[2].Bar_Dia);



            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
                BOQ.Steel_Reinforcement[2].Number_Of_Bars,
                BOQ.Steel_Reinforcement[2].Length,
                Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[2].Bar_Dia),
                tot_wgt));

            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[3]";
            ssr.Bar_Dia = tie_dia;
            ssr.Length = 2 * (BOQ.Section_B + BOQ.Section_D) - 4 * Cover / 1000.0;

            bar_nos = ((int)(BOQ.Length * 1000 / tie_sp)) + 1;
            ssr.Number_Of_Bars = (int)bar_nos;





            list.AddRange(BOQ_Summary.ToArray());

            BOQ_Summary.Add(string.Format("----------------------------------------------------------------------------"));

            #endregion step 5



            list.Add(string.Format(""));
            if (Report_File != "")
            {
                string tmp_file = Get_Report_File(step);
                File.WriteAllLines(tmp_file, list.ToArray());

                tmp_file = Get_BOQ_File(step);
                File.WriteAllLines(tmp_file, BOQ_Summary.ToArray());

                tmp_file = Get_Design_Summary_File(step);
                File.WriteAllLines(tmp_file, Design_Summary.ToArray());
            }

            list.Add(string.Format(""));

            #endregion STEP 5 :


            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF DESIGN        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion End of Report



            list.Add(string.Format(""));
            list.Add(string.Format(""));

            return list;

            //bar_nos
        }

        public List<string> Design_Program_Individual(int step)
        {

            IS_DESIGN_OK = true;
            BOQ = new Column_BOQ();

            List<string> list = new List<string>();


            list.AddRange(Get_Banner());


            //List<int> beam_nos = MyList.Get_Array_Intiger(Beam_Nos);


            BOQ.ColumnNos = Beam_Nos;
            IS_DESIGN_OK = true;


            //List<int> all_beams = Get_Continuous_Members(mm, ref cont_jcc, ref mbr_coll);

            list.Add(string.Format(""));

            string kStr = "";
            int c = 1;

            double Ly = 0.0;
            double Lx = 0.0;

            MovingLoadAnalysis.Member mbr = null;
            list.Add(string.Format(""));



            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("EACH MEMBER AND ITS JOINTS :"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));

            List<int> lst_jnts = new List<int>();

            double _l1, _l2;

            //BOQ.Floor_ELevation_From = mbr_coll[0].StartNode.Y;
            //BOQ.Floor_ELevation_To = mbr_coll[mbr_coll.Count - 1].EndNode.Y;
            BOQ.Section_B = b / 1000;
            BOQ.Section_D = D / 1000;

            BOQ.Length = 0;

            list.Add(string.Format(""));





            #region User Input Data


            //Pu = 978.18;
            //Mux = 40.092;
            //Muy = 206.55;
            //fck = 20;
            //fy = 415;
            //D = 300;
            //b = 500;
            //bar_dia = 25;
            //tie_dia = 8;
            //Cover = 40;


            list.Add(string.Format("Maximum Forces in Vertical Members Obtained from Analysis Results:"));
            list.Add(string.Format("Pu = {0:f3} KN (Compressive Force along the axis of Column in Vertical Direction)", Pu));
            list.Add(string.Format(""));
            list.Add(string.Format("Mux = {0:f3} KN-m", Mux));
            list.Add(string.Format("Muy = {0:f3} KN-m", Muy));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Reinforcement Steel Grade = fy = Fe{0}", fy));
            list.Add(string.Format(""));
            list.Add(string.Format("Try Size of Column D = {0} mm", D));
            list.Add(string.Format("                   b = {0} mm", b));
            list.Add(string.Format(""));
            list.Add(string.Format("Diameter of Reinforcement Steel Bars = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format("Number of Main Steel Reinforcement Bars = bar_nos = {0} nos", bar_nos));

            list.Add(string.Format(""));
            list.Add(string.Format("Diameter of Lateral Binder Tie Bars = tie_dia = {0} mm", tie_dia));
            list.Add(string.Format("Reinforcement Side Cover = Cover = {0} mm", Cover));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion User Input Data



            #region STEP 1 : Design Calculation

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------"));
            //list.Add(string.Format("STEP {0}.1 : DESIGN CALCULATION", step));
            list.Add(string.Format("STEP 1 : DESIGN CALCULATION", step));
            list.Add(string.Format("-----------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double ex = Muy / Pu;
            list.Add(string.Format("Eccentricity with respect to Muy = ex = Muy / Pu = {0:f3} / {1:f3} = {2:f3}", Muy, Pu, ex));
            list.Add(string.Format("D = {0} mm = {1:f3} m", D, D / 1000));

            //D = D;
            double ex_by_D = ex / (D / 1000);

            list.Add(string.Format(""));
            list.Add(string.Format("ex / D = {0:f3} / {1:f3} = {2:f3}", ex, (D / 1000), ex_by_D));

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double p = 2.0;
            list.Add(string.Format("Considering 2% Steel Reinforcement, p = {0}", p));

            double Ac = ((100 - p) / 100.0) * D * b;
            list.Add(string.Format(""));
            list.Add(string.Format("Ac = Effective Area of Concrete = (100-p)/100 x D x b"));
            list.Add(string.Format("                                = {0:f3} x {1} x {2}", ((100 - p) / 100.0), D, b));
            list.Add(string.Format("                                = {0:f3} Sq.mm", Ac));
            list.Add(string.Format(""));

            double Asc = (p / 100.0) * D * b;
            list.Add(string.Format("Required Area of Steel = Asc = Area of Steel = p x D x b = {0:f3} x {1} x {2} Sq.mm = {3:f3} Sq.mm", (p / 100.0), D, b, Asc));
            list.Add(string.Format(""));
            list.Add(string.Format("From equation:"));
            list.Add(string.Format(""));

            double Puz = 0.45 * fck * Ac + 0.75 * fy * Asc;
            list.Add(string.Format("Puz = 0.45 x fck x Ac + 0.75 x fy x Asc"));
            list.Add(string.Format("    = 0.45 x {0} x {1:f3} + 0.75 x {2} x {3:f3}", fck, Ac, fy, Asc));
            list.Add(string.Format("    = {0:f3} N", Puz));
            Puz = Puz / 1000.0;
            list.Add(string.Format("    = {0:f3} kN", Puz));
            list.Add(string.Format(""));

            double req_area = (Pu * 1000) / ((0.23 * fck) + (0.1 * p * fy / 100));
            list.Add(string.Format("Required Cross Section Area of Column"));
            list.Add(string.Format(""));
            list.Add(string.Format("      = Pu x 1000 / [(0.23 x fck) + (0.1 x p x fy / 100)]"));
            list.Add(string.Format("      = {0:f3} x 1000 / [(0.23 x {1}) + (0.1 x {2} x {3} / 100)]", Pu, fck, p, fy));
            list.Add(string.Format("      = {0:f3} Sq.mm.", req_area));
            list.Add(string.Format(""));

            double alpha_n = 1 + ((Pu / Puz) - 0.2) * (5.0 / 3.0);
            list.Add(string.Format("   αn = 1 + [(Pu / Puz) - 0.2] x (5/3)"));
            list.Add(string.Format("      = 1 + [({0:f3} / {1:f3}) - 0.2] x (5 x 3)", Pu, Puz));
            list.Add(string.Format("      = {0:f3}", alpha_n));
            list.Add(string.Format(""));



            double Mu = Math.Pow((Math.Pow(Mux, alpha_n) + Math.Pow(Muy, alpha_n)), (1 / alpha_n));
            list.Add(string.Format("Mu (Y' - effective) = [(Mux)^αn + (Muy)^αn]^(1/ αn)"));
            list.Add(string.Format("                   = [{0:f3}^{1:f3} + {2:f3}^{1:f3}]^(1/{1:f3})", Mux, alpha_n, Muy));
            list.Add(string.Format("                   = {0:f3} KN-m", Mu));
            list.Add(string.Format(""));

            list.Add(string.Format("From section = D x b = {0} x {1}", D, b));

            Ac = D * b;
            list.Add(string.Format("Area provided = Ac = {0:f3} Sq.mm.", Ac));
            list.Add(string.Format(""));


            double val1 = Pu * 1000 / (fck * b * D);
            list.Add(string.Format("(i)   Pu / (fck x b x D) = ({0:f3} x 1000) / ({1} x {2} x {3}) = {4:f3}", Pu, fck, b, D, val1));
            double val2 = Mu * 1000 * 1000 / (fck * b * D * D);
            list.Add(string.Format("(ii)  Mu / (fck x b x D^2) = ({0:f3} x 1000 x 1000) / ({1} x {2} x {3}^2) = {4:f3}", Mu, fck, b, D, val2));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Steel Bar diameter = bar_dia= {0} mm", bar_dia));

            double d_dash = Cover + (bar_dia / 2.0);
            list.Add(string.Format("  d' = Cover + (bar_dia/ 2.0)"));
            list.Add(string.Format("     = {0} + ({1} / 2.0)", Cover, bar_dia));
            list.Add(string.Format("     = {0:f3} mm", d_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("D = {0} mm", D));
            list.Add(string.Format(""));

            double val3 = d_dash / D;

            if (val3 < 0.2)
            {
                val3 = 0.2;
                list.Add(string.Format("d' / D = {0:f3} / {1} = {2:f3} ≈ 0.2", d_dash, D, (d_dash / D)));
            }
            else
            {
                list.Add(string.Format("d' / D = {0:f3} / {1} = {2:f3}", d_dash, D, (d_dash / D)));
            }


            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram for:"));
            //list.Add(string.Format("Reinforcement Equally Distributed in two opposite side, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));
            //Chiranjit [2015 04 09]
            //list.Add(string.Format("Reinforcement Equally Distributed in four opposite sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));


            //list.Add(string.Format("(Open Interaction Diagram)"));
            frm_InteractionDiagram fid = new frm_InteractionDiagram();

            fid.SetText1_Tab1 = "Pu / (fck x b x D) = " + val1.ToString("f3");
            fid.SetText2_Tab1 = "Mu / (fck x b x D^2) = " + val2.ToString("f3");
            fid.Rebar_Nos = bar_nos;
            fid.Tab_Heading = "Mux1/fck x b x D x D  (X-X axis)";

            //fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get, p / fck = ";
            //fid.Value_1 = "0.22";
            //fid.Value_1 = "0.18";
            fid.Value_1 = "0.02";


            fid.fy1 = fy;
            fid.da = val3;
            //fid.D = D;

            int side = 2;

            //if (bar_nos % 4 == 0)
            //{

            HEADSNeed.ASTRA.ASTRAForms.frm_Intact_Diag1 ffm = new HEADSNeed.ASTRA.ASTRAForms.frm_Intact_Diag1();

            ffm.Rebar_Nos = (int)bar_nos;
            ffm.Fy = fy;
            ffm.d_dash_by_D = val3.ToString();

            //side = 2;
            if (ffm.ShowDialog() == DialogResult.Cancel)
            {
                //this.Close();
                return null;
            }
            side = ffm.Side;
            //}
            fid.side = side;


            fid.ShowDialog();





            //if (side == 2)
            //{
            //    list.Add(string.Format("Reinforcement Equally Distributed in Two sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));
            //}
            //else
            //    list.Add(string.Format("Reinforcement Equally Distributed in Four sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));
            //list.Add(string.Format("Reinforcement Equally Distributed in Four opposite sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));

            double p_by_fck = MyList.StringToDouble(fid.Value_1, 0.22);
            list.Add(string.Format(""));

            #region Chiranjit [2015 06 09]

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("From Interaction Diagram (1) for:"));
            list.Add(string.Format(""));

            if (side == 2)
            {
                list.Add(string.Format("Reinforcement Equally Distributed in Two sides, "));
            }
            else
                list.Add(string.Format("Reinforcement Equally Distributed in Four sides, "));



            list.Add(string.Format("Steel Grade = fy = {0}", fy));
            list.Add(string.Format("d’ / D = {0}", val3));
            list.Add(string.Format("Pu / (fck x b x D) = {0:f3}", val1));
            list.Add(string.Format("Mu / (fck x b x D^2) = {0:f3}", val2));
            list.Add(string.Format(""));


            #endregion Chiranjit [2015 06 09]



            list.Add(string.Format("We get, p / fck = {0}", p_by_fck));
            list.Add(string.Format(""));
            p = p_by_fck * fck;
            if (p > 4.0)
            {
                list.Add(string.Format("Percentage of Steel = p = {0:f3} x fck = {0:f3} x {1} = {2:f3}% > 4%", p_by_fck, fck, p));
                list.Add(string.Format("So the Section is Inadequate"));
            }
            else
            {
                list.Add(string.Format("Percentage of Steel = p = {0:f3} x fck = {0:f3} x {1} = {2:f3}% < 4%", p_by_fck, fck, p));
                list.Add(string.Format("So the Section is Adequate"));
            }
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion STEP 1 : Design Calculation



            #region  STEP 2:
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------"));
            //list.Add(string.Format("STEP {0}.2 : Area of Steel ", step));
            list.Add(string.Format("STEP 2 : Area of Steel ", step));
            list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));

            double Ast = p * Ac / 100.0;
            list.Add(string.Format("Area of Steel required = Ast = p x Ac / 100 = {0:f3} x {1:f3} / 100 = {2:f3} Sq.mm.", p, Ac, Ast));
            list.Add(string.Format(""));

            double CAst = (Math.PI * bar_dia * bar_dia / 4.0);


            //double bar_nos = 14;

            //bar_nos = (int)(Ast / CAst);
            //bar_nos += 1.0;




            Steel_Reinforcement ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[1]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = BOQ.Length;
            BOQ.Steel_Reinforcement.Add(ssr);


            //bar_dia = 25;
            list.Add(string.Format("Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Diameter = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("Let us provide {0} Y' {1} Rebars", bar_nos, bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("({0} nos. of {1} mm diameter steel reinforcement bars)", bar_nos, bar_dia));
            list.Add(string.Format(""));

            list.Add(string.Format("CAst = {0} x {1:f3} = {2:f3} Sq.mm.", bar_nos, CAst = (Math.PI * bar_dia * bar_dia / 4.0), CAst = CAst * bar_nos));
            list.Add(string.Format(""));

            p = CAst * 100 / Ac;
            if (p < 4.0)
            {
                list.Add(string.Format("Percentage of Steel provided = p = CAst x 100 / Ac"));
                list.Add(string.Format("                                 = {0:f3} x 100 / {1:f3}", CAst, Ac));
                list.Add(string.Format("                                 = {0:f3}%  <  4%, So OK", p));
            }
            else
            {
                list.Add(string.Format("Percentage of Steel provided = p = CAst x 100 / Ac"));
                list.Add(string.Format("                                 = {0:f3} x 100 / {1:f3}", CAst, Ac));
                list.Add(string.Format("                                 = {0:f3}%  >  4%, So NOT OK", p));
                IS_DESIGN_OK = false;

            }
            list.Add(string.Format(""));

            p_by_fck = p / fck;
            list.Add(string.Format("p / fck = {0:f3} / {1} = {2:f6}", p, fck, p_by_fck));

            val3 = d_dash / D;
            if (val3 < 0.2)
            {
                list.Add(string.Format("d’ / D = {0:f3} / {1} = {2:f3} ≈ 0.2", d_dash, D, val3));
                val3 = 0.2;
            }
            else
            {
                list.Add(string.Format("d’ / D = {0:f3} / {1} = {2:f3}", d_dash, D, val3));
            }
            list.Add(string.Format(""));
            list.Add(string.Format("With section orientation D={0} mm and b={1} mm", D, b));
            list.Add(string.Format("Dimension D is in the direction of Muy and dimension b is in the direction of Mux"));
            list.Add(string.Format("Steel Reinforcement Bar Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Steel Reinforcement Bar Diameter = bar_dia  = {0} mm", bar_dia));

            if (IS_DESIGN_OK)
                list.Add(string.Format("Design is  OK."));
            else
                list.Add(string.Format("Design is NOT OK."));
            list.Add(string.Format(""));
            #endregion  STEP 2:



            #region  STEP 3 :

            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------"));
            //list.Add(string.Format("STEP {0}.3 : Steel  Rebars", step));
            //list.Add(string.Format("STEP {0}.3 : CHECK DESIGN", step));
            list.Add(string.Format("STEP 3 : CHECK DESIGN", step));
            list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));

            //bar_nos = 8;
            //list.Add(string.Format("Next, Let us try with Steel  Rebars:"));
            list.Add(string.Format("Let us try with Steel  Rebars:"));
            list.Add(string.Format("Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Diameter = bar_dia = {0} mm", bar_dia));


            double bar_area = Math.PI * bar_dia * bar_dia / 4.0;
            list.Add(string.Format("bar_area = 3.1416 x {0} x {0} / 4 = {1:f3} Sq.mm", bar_dia, bar_area));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            p = bar_nos * bar_area * 100 / (D * b);

            list.Add(string.Format("Percentage of Steel = p = bar_nos  x bar_area x 100 / (D x b)"));
            list.Add(string.Format("                        = {0}  x {1} x 100 / ({2} x {3})", bar_nos, bar_area, D, b));
            list.Add(string.Format("                        = {0:f3}%", p));
            list.Add(string.Format(""));

            Puz = 0.45 * fck * Ac + 0.75 * fy * CAst;
            list.Add(string.Format("   Puz = 0.45 x fck x Ac + 0.75 x fy x CAst"));
            list.Add(string.Format("       = 0.45 x {0} x {1:f3} + 0.75 x {2} x {3:f3}", fck, Ac, fy, CAst));
            list.Add(string.Format("       = {0:f3} N", Puz));
            Puz = Puz / 1000.0;
            list.Add(string.Format("       = {0:f3} KN.", Puz));
            list.Add(string.Format(""));


            double val4 = Pu * 1000 / (fck * b * D);
            p_by_fck = p / fck;
            list.Add(string.Format("Pu / (fck x b x D) = {0:f3} x 1000 / ({1} x {2} x {3}) = {4:f3}", Pu, fck, b, D, val4));
            list.Add(string.Format(""));
            list.Add(string.Format("p / fck = {0:f3} / {1} = {2:f3}", p, fck, p_by_fck));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram for:"));
            ////list.Add(string.Format("Reinforcement equally distributed in two opposite side, "));
            //list.Add(string.Format("Reinforcement equally distributed in four opposite sides, "));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[2]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = BOQ.Length;
            BOQ.Steel_Reinforcement.Add(ssr);



            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("(Open Interaction Diagram)"));

            fid = new frm_InteractionDiagram();

            fid.Rebar_Nos = bar_nos;

            fid.SetText1_Tab1 = "Pu / (fck x b x D) = " + val4.ToString("f3");
            fid.SetText2_Tab1 = "p / fck =  " + p_by_fck.ToString("f3");
            fid.Tab_Heading = "Muy1/fck x D x b x b  (Y-Y axis)";
            //fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get, Muy1 / (fck x b x D x D) = ";
            fid.Value_1 = "0.23";

            fid.fy1 = fy;
            fid.da = val3;
            fid.ShowDialog();

            //side = fid.side;

            list.Add(string.Format("Taking   b = {0} mm and D = {1} mm,", b, D));

            if (side == 2)
                list.Add(string.Format("Reinforcement equally distributed in two opposite sides, "));
            else
                list.Add(string.Format("Reinforcement equally distributed in four opposite sides, "));

            //list.Add(string.Format("Steel grade = fy = {0}, d’ / D = {1:f3} and Pu / (fck x b x D) = {2:f3}", fy, val3, val4));

            list.Add(string.Format("For values of Steel grade = fy = {0}, d’ / D = {1:f3}/{2} = {3:f3} ", fy, d_dash, D, d_dash / D));
            list.Add(string.Format("Pu / (fck x b x D) = {0:f3}", val4));
            list.Add(string.Format("p / fck = {0:f3} / {1} = {2:f3}", p, fck, p_by_fck));


            double val5 = MyList.StringToDouble(fid.Value_1, 0.23);
            list.Add(string.Format("From Interaction Diagram (2), We get, Muy1 / (fck x b x D x D) = {0:f3}", val5));
            list.Add(string.Format(""));

            double Muy1 = val5 * (fck * b * D * D);
            list.Add(string.Format("Therefore, Muy1 = {0:f3} x {1} x {2} x {3} x {3}", val5, fck, b, D, Muy1));
            list.Add(string.Format("                = {0:f3} N-m", Muy1));
            Muy1 = Muy1 / 1000000.0;
            list.Add(string.Format("                = {0:f3} KN-m", Muy1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion  STEP 3 :


            #region STEP 4 :
            //list.Add(string.Format(""));
            //list.Add(string.Format("---------------------------"));
            //list.Add(string.Format("STEP {0}.4 : CHECK DESIGN", step));
            //list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));
            //list.Add(string.Format("Now, Let us try by changing the orientation of the"));
            list.Add(string.Format("Next, Let us try by changing the orientation of the"));
            list.Add(string.Format("Column Section with reduced steel reinforcements,"));
            list.Add(string.Format(""));

            //double D_dash = Math.Min(D, b);
            double D_dash = b;

            double _b = b;
            //b = Math.Max(D, b);

            double b_dash = D;

            //double D_dash = b;

            //b = D;


            list.Add(string.Format("Taking D’ = b = {0} mm and b' = D = {1} mm, d'/D’ = {2:f3}/{0} = {3:f3} ", D_dash, b_dash, d_dash, d_dash / D_dash));
            //list.Add(string.Format("Taking D’ = b = {0} mm and b' = D = {1} mm, d'/D’ = 52.500/400 = 0.131 ", D_dash, b_dash));
            //list.Add(string.Format("Taking D’ = {0} mm and b = {1} mm,", D, b));


            list.Add(string.Format(""));

            double val6 = d_dash / D_dash;
            if (val6 < 0.1)
            {
                list.Add(string.Format(""));
                list.Add(string.Format("d' / D’ = {0:f3} / {1} = {2:f3} = 0.10", d_dash, D_dash, val6));
                val6 = 0.1;
            }
            else
            {
                //list.Add(string.Format("d' / D’ = {0:f3} / {1} = {2:f3}", d_dash, D_dash, val6));
            }



            list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram for:"));
            list.Add(string.Format(""));


            fid = new frm_InteractionDiagram();

            fid.Rebar_Nos = bar_nos;

            //fid.SetText1_Tab1 = "Pu / (fck x b x D) = " + val1.ToString("f3");
            //fid.SetText2_Tab1 = "Mu / (fck x b x D^2) = " + val2.ToString("f3");
            fid.SetText1_Tab1 = "Pu / (fck x b x D) = " + val4.ToString("f3");
            fid.SetText2_Tab1 = "p / fck =  " + p_by_fck.ToString("f3");
            fid.Tab_Heading = "Mux1 / (fck x b' x D’ x D’)";
            //fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get value of Mux1 / (fck x b' x D’ x D’) = ";
            fid.Value_1 = "0.155";


            fid.fy1 = fy;
            fid.da = val3;

            fid.ShowDialog();

            //side = fid.side;
            if (side == 2)
                list.Add(string.Format("Reinforcement equally distributed on Two sides,"));
            else
                list.Add(string.Format("Reinforcement equally distributed on Four sides,"));


            //list.Add(string.Format("For values of Steel Grade = fy = {0}, d’/D’ = {1:f3} and p / fck = {2:f3}", fy, val6, p_by_fck));
            list.Add(string.Format("For values of Steel Grade = fy = {0}, d’/D’ = {1:f3} / {2} = {3:f3}", fy, d_dash, D_dash, d_dash / D_dash));



            double val7 = MyList.StringToDouble(fid.Value_1, 0.155);


            list.Add(string.Format(""));
            list.Add(string.Format("For value of Pu / (fck x b' x D’) = {0:f3}", val4));
            list.Add(string.Format("p / fck = {0:f3}/{1} = {2:f3}", p, fck, p_by_fck));
            list.Add(string.Format(""));
            //list.Add(string.Format("(Open Interaction Diagram)"));
            //double val7 = 0.155;


            list.Add(string.Format("From Interaction Diagram (3), We get, Mux1 / (fck x b' x D’ x D’) = {0:f3}", val7));


            #region Chiranjit [2015 06 09]

            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Pu / (fck x b x D) = 46.690 x 1000 / (20 x 400 x 600) = 0.010"));
            //list.Add(string.Format("p / fck = 1.227 / 20 = 0.061"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Taking b = 400 mm and D = 600 mm,"));
            //list.Add(string.Format("Reinforcement equally distributed in two opposite sides, "));
            //list.Add(string.Format("For values of Steel grade = fy = 415, d’ / D = 52.5/600 = 0.0.0875 "));
            //list.Add(string.Format("Pu / (fck x b x D) = 0.010"));
            //list.Add(string.Format("p / fck = 1.227 / 20 = 0.061"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram (2), we get, Muy1 / (fck x b x D x D) = 0.230"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Therefore, Muy1 = 0.230 x 20 x 400 x 600 x 600 / 10^6 "));
            //list.Add(string.Format("    = 662400000.000 N-mm"));
            //list.Add(string.Format("    = 662.400 KN-m"));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Next, Let us try by changing the orientation of the"));
            //list.Add(string.Format("Column Section with reduced steel reinforcements,"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Taking D’ = b = 400 mm and b' = D = 600 mm, d'/D’ = 52.500/400 = 0.131"));
            //list.Add(string.Format("Reinforcement equally distributed in two opposite sides, "));
            //list.Add(string.Format("For values of Steel Grade = fy = 415, d’/D’ = 52.500/400 = 0.131 "));
            //list.Add(string.Format("Pu / (fck x b' x D’) = 0.010"));
            //list.Add(string.Format("p / fck = 1.227 / 20 = 0.061"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram (3), we get, Mux1 / (fck x b' x D’ x D’) = 0.155"));
            //list.Add(string.Format(""));



            #endregion Chiranjit [2015 06 09]

            double Mux1 = val7 * fck * b_dash * D_dash * D_dash;
            list.Add(string.Format("Therefore, Mux1 = {0:f3} x {1} x {2} x {3} x {3}", val7, fck, b_dash, D_dash));
            list.Add(string.Format("                = {0:f3} N-mm", Mux1));
            Mux1 = Mux1 / 1000000;
            list.Add(string.Format("                = {0:f3} KN-m.", Mux1));
            list.Add(string.Format(""));



            alpha_n = 1 + ((Pu / Puz) - 0.2) * (5 / 3);
            list.Add(string.Format("αn = 1 + [(Pu / Puz) - 0.2] x (5/3)"));
            list.Add(string.Format("   = 1 + [({0:f3} / {1:f3}) - 0.2] x (5/3)", Pu, Puz));
            list.Add(string.Format("   = {0:f3}", alpha_n));
            list.Add(string.Format(""));

            double val8 = (Mux / Mux1) * alpha_n + (Muy / Muy1) * alpha_n;
            list.Add(string.Format("(Mux / Mux1) αn + (Muy / Muy1) αn"));
            list.Add(string.Format("= ({0:f3} / {1:f3}) x {2:f3} + ({3:f3} / {4:f3}) x {5:f3}", Mux, Mux1, alpha_n, Muy, Muy1, alpha_n));
            list.Add(string.Format("= {0:f3} + {1:f3}", ((Mux / Mux1) * alpha_n), ((Muy / Muy1) * alpha_n)));
            list.Add(string.Format(""));

            if (val8 < 1)
            {
                list.Add(string.Format("= {0:f3} < 1         So, OK", val8));
            }
            else
            {
                list.Add(string.Format("= {0:f3} > 1         So, NOT OK", val8));
                IS_DESIGN_OK = false;
            }
            list.Add(string.Format(""));
            list.Add(string.Format("So the Section  = b' x D’ = {0} x {1}", b_dash, D_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("With section orientation D' = {0} mm and b' = {1} mm ", D_dash, b_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("Dimension D’ is in the direction of Muy and dimension b is in the direction of Mux"));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel Reinforcement Bar Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel Reinforcement Bar Diameter = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format(""));

            if (IS_DESIGN_OK)
                list.Add(string.Format("Design is  OK."));
            else
                list.Add(string.Format("Design is  NOT OK."));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //b

            list.Add(string.Format(""));


            CAst = Math.PI * bar_dia * bar_dia / 4;
            list.Add(string.Format("CAst = Steel Reinforcement Bars  {0} Nos. {1} mm diameter = {0} x {2:f3} = {3:f3} Sq.mm.", bar_nos, bar_dia, CAst, (bar_nos * CAst)));

            #endregion STEP 4 :


            #region STEP 5 :

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------------"));
            //list.Add(string.Format("STEP {0}.5 : LATERAL TIE OF COLUMN", step));
            //list.Add(string.Format("STEP {0}.4 : LATERAL TIE OF COLUMN", step));
            list.Add(string.Format("STEP 4 : LATERAL TIE OF COLUMN", step));
            list.Add(string.Format("-----------------------------------------"));
            list.Add(string.Format(""));

            double len = 2 * (D + b) - 4 * Cover;
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Length of The Tie =  2 x (D + b) - 4 * Cover", len));
            list.Add(string.Format("                  =  2 x ({0} + {1}) - 4 x {2}", D, b, Cover));
            list.Add(string.Format("                  =  {0} mm", len));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Refer to IS-456 Clause No-25.2-32"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("   i)  Dia of Lateral Ties <= (1/4)th of the Dia of the longest longitudinal bar"));
            list.Add(string.Format("                    <= (1/4) x {0} = {1} mm", bar_dia, bar_dia / 4.0));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("  ii)  Dia of Lateral Ties <= 5 mm"));
            list.Add(string.Format(""));
            list.Add(string.Format("Let us provide Y{0} lateral tie bars", tie_dia));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Spacing of lateral ties"));
            list.Add(string.Format("-----------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double tie_space1 = Math.Min(D, b);

            list.Add(string.Format("i) Spacing >= The least lateral dimension of the compression member."));
            list.Add(string.Format("           >= {0} mm ", tie_space1));
            list.Add(string.Format(""));
            double tie_space2 = bar_dia * 16;


            list.Add(string.Format("ii) Spacing >= 16 times of the smalest dia logitudinal bar."));
            list.Add(string.Format("            >= 16 X {0}", bar_dia));
            list.Add(string.Format("            >= {0}", tie_space2));
            list.Add(string.Format(""));
            double tie_space3 = tie_dia * 48;

            list.Add(string.Format("iii) Spacing >= 48 times the dia of the lateral tie."));

            list.Add(string.Format("             >= 48 X {0}", tie_dia));
            list.Add(string.Format("             >= {0}", tie_space3));

            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double tie_sp = Math.Min(Math.Min(tie_space1, tie_space2), tie_space3);

            tie_sp = (int)tie_sp / 10;
            tie_sp = (int)tie_sp * 10;



            list.Add(string.Format("So here we provide Y{0} lateral tie @{1} mm c/c.", tie_dia, tie_sp));
            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[3]";
            ssr.Bar_Dia = tie_dia;
            ssr.Length = 2 * (BOQ.Section_B + BOQ.Section_D) - 4 * Cover / 1000.0;

            bar_nos = ((int)(BOQ.Length * 1000 / tie_sp)) + 1;
            ssr.Number_Of_Bars = (int)bar_nos;

            BOQ.Steel_Reinforcement.Add(ssr);




            #region step 5
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format("STEP 5 DESIGN SUMMARY"));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format(""));

            Design_Summary = new List<string>();


            Design_Summary.Add(string.Format("------------------------------------------------"));
            Design_Summary.Add(string.Format("COLUMN = C1"));
            Design_Summary.Add(string.Format("CONTINUOUS MEMBERS = C1"));

            Design_Summary.Add(string.Format("Column Section = {0} mm. x {1} mm.", BOQ.Section_B * 1000, BOQ.Section_D * 1000));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide Main Steel Reinforcement Bars {0} Nos. {1} mm diameter",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars,
                BOQ.Steel_Reinforcement[0].Bar_Dia));


            Design_Summary.Add(string.Format("(Total Steel = Ast = {0:f3} Sq.mm.)", BOQ.Steel_Reinforcement[0].Area));
            Design_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[1]"));
            Design_Summary.Add(string.Format(""));

            CAst = (Math.PI * tie_dia * tie_dia / 4.0) * (1000.0 / tie_sp);
            Design_Summary.Add(string.Format("Provide Y{0} lateral tie @ {1} mm c/c.  (Steel per metre = C_Ast[2] = {2:f3} Sq.mm. / metre)", tie_dia, tie_sp, CAst));
            Design_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[2]"));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));

            list.AddRange(Design_Summary.ToArray());
            #endregion step 5





            #region STEP 6 : BOQ SUMMARY
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format("STEP 6 : BOQ SUMMARY"));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format(""));

            BOQ_Summary = new List<string>();

            double conc_weight = BOQ.Section_B * BOQ.Section_D * BOQ.Length;
            BOQ_Summary.Add(string.Format("Concrete Quantity = {0:f3} x {1:f3} x {2:f3} = {3:f3} Cu.m",
                BOQ.Section_B, BOQ.Section_D, BOQ.Length, conc_weight));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("---------------------"));
            BOQ_Summary.Add(string.Format("REBAR QUANTITY"));
            BOQ_Summary.Add(string.Format("---------------------"));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide Main Steel Reinforcement Bars {0} Nos. {1} mm diameter",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars,
                BOQ.Steel_Reinforcement[0].Bar_Dia));


            BOQ_Summary.Add(string.Format("(Total Steel = Cast1 = {0:f3} Sq.mm.)", BOQ.Steel_Reinforcement[0].Area));
            //BOQ_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[1]"));



            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "C_AST[1]";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = bar_dia;
            //ssr.Length = BOQ.Length;
            //BOQ.Steel_Reinforcement.Add(ssr);


            double tot_wgt = BOQ.Steel_Reinforcement[0].Number_Of_Bars * len * Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[0].Bar_Dia);




            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars,
                BOQ.Length,
                Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[0].Bar_Dia),
                tot_wgt));


            BOQ_Summary.Add(string.Format(""));

            CAst = (Math.PI * tie_dia * tie_dia / 4.0) * (1000.0 / tie_sp);
            BOQ_Summary.Add(string.Format("Provide Y{0} lateral tie @ {1} mm c/c.  (Steel per metre = C_Ast[2] = {2:f3} Sq.mm. / metre)", tie_dia, tie_sp, CAst));
            //BOQ_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[2]"));
            tot_wgt = BOQ.Steel_Reinforcement[2].Number_Of_Bars *
                BOQ.Steel_Reinforcement[2].Length *
                Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[2].Bar_Dia);



            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
                BOQ.Steel_Reinforcement[2].Number_Of_Bars,
                BOQ.Steel_Reinforcement[2].Length,
                Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[2].Bar_Dia),
                tot_wgt));

            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[3]";
            ssr.Bar_Dia = tie_dia;
            ssr.Length = 2 * (BOQ.Section_B + BOQ.Section_D) - 4 * Cover / 1000.0;

            bar_nos = ((int)(BOQ.Length * 1000 / tie_sp)) + 1;
            ssr.Number_Of_Bars = (int)bar_nos;





            list.AddRange(BOQ_Summary.ToArray());

            BOQ_Summary.Add(string.Format("----------------------------------------------------------------------------"));

            #endregion STEP 6 : BOQ SUMMARY



            list.Add(string.Format(""));
            if (Report_File != "")
            {
                string tmp_file = Get_Report_File(step);
                File.WriteAllLines(tmp_file, list.ToArray());

                tmp_file = Get_BOQ_File(step);
                File.WriteAllLines(tmp_file, BOQ_Summary.ToArray());

                tmp_file = Get_Design_Summary_File(step);
                File.WriteAllLines(tmp_file, Design_Summary.ToArray());
            }

            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("----------------------------------"));
            ////list.Add(string.Format("STEP {0}.6 : BILL OF QUANTITY", step));
            //list.Add(string.Format("STEP 6 : BILL OF QUANTITY", step));
            //list.Add(string.Format("----------------------------------"));
            //list.AddRange(BOQ.Get_Text());


            //list.Add(string.Format(""));
            //if (Report_File != "")
            //{
            //    string tmp_file = Get_Report_File(step);
            //    File.WriteAllLines(tmp_file, list.ToArray());
            //}

            //list.Add(string.Format(""));

            #endregion STEP 5 :


            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF DESIGN        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion End of Report



            list.Add(string.Format(""));
            list.Add(string.Format(""));

            if (Report_File != "")
            {
                File.WriteAllLines(Report_File, list.ToArray());
                File.WriteAllLines(File_Design_Summary, Design_Summary.ToArray());
            }

            return list;

            //bar_nos
        }

        public List<string> Design_Program_Individual2(int step)
        {

            IS_DESIGN_OK = true;
            BOQ = new Column_BOQ();

            List<string> list = new List<string>();


            list.AddRange(Get_Banner());


            //List<int> beam_nos = MyList.Get_Array_Intiger(Beam_Nos);


            BOQ.ColumnNos = Beam_Nos;
            IS_DESIGN_OK = true;


            //List<int> all_beams = Get_Continuous_Members(mm, ref cont_jcc, ref mbr_coll);

            list.Add(string.Format(""));

            string kStr = "";
            int c = 1;

            double Ly = 0.0;
            double Lx = 0.0;

            MovingLoadAnalysis.Member mbr = null;
            list.Add(string.Format(""));



            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("EACH MEMBER AND ITS JOINTS :"));
            list.Add(string.Format("----------------------------"));
            list.Add(string.Format(""));

            List<int> lst_jnts = new List<int>();

            double _l1, _l2;

            //BOQ.Floor_ELevation_From = mbr_coll[0].StartNode.Y;
            //BOQ.Floor_ELevation_To = mbr_coll[mbr_coll.Count - 1].EndNode.Y;
            BOQ.Section_B = b / 1000;
            BOQ.Section_D = D / 1000;

            BOQ.Length = 0;

            list.Add(string.Format(""));





            #region User Input Data


            //Pu = 978.18;
            //Mux = 40.092;
            //Muy = 206.55;
            //fck = 20;
            //fy = 415;
            //D = 300;
            //b = 500;
            //bar_dia = 25;
            //tie_dia = 8;
            //Cover = 40;


            list.Add(string.Format("Maximum Forces in Vertical Members Obtained from Analysis Results:"));
            list.Add(string.Format("Pu = {0:f3} KN (Compressive Force along the axis of Column in Vertical Direction)", Pu));
            list.Add(string.Format(""));
            list.Add(string.Format("Mux = {0:f3} KN-m", Mux));
            list.Add(string.Format("Muy = {0:f3} KN-m", Muy));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Reinforcement Steel Grade = fy = Fe{0}", fy));
            list.Add(string.Format(""));
            list.Add(string.Format("Try Size of Column D = {0} mm", D));
            list.Add(string.Format("                   b = {0} mm", b));
            list.Add(string.Format(""));
            list.Add(string.Format("Diameter of Reinforcement Steel Bars = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format("Number of Main Steel Reinforcement Bars = bar_nos = {0} nos", bar_nos));

            list.Add(string.Format(""));
            list.Add(string.Format("Diameter of Lateral Binder Tie Bars = tie_dia = {0} mm", tie_dia));
            list.Add(string.Format("Reinforcement Side Cover = Cover = {0} mm", Cover));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion User Input Data




            #region STEP 1 : Design Calculation

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------"));
            //list.Add(string.Format("STEP {0}.1 : DESIGN CALCULATION", step));
            list.Add(string.Format("STEP 1 : DESIGN CALCULATION", step));
            list.Add(string.Format("-----------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double ex = Muy / Pu;
            list.Add(string.Format("Eccentricity with respect to Muy = ex = Muy / Pu = {0:f3} / {1:f3} = {2:f3}", Muy, Pu, ex));
            list.Add(string.Format("D = {0} mm = {1:f3} m", D, D / 1000));

            //D = D;
            double ex_by_D = ex / (D / 1000);

            list.Add(string.Format(""));
            list.Add(string.Format("ex / D = {0:f3} / {1:f3} = {2:f3}", ex, (D / 1000), ex_by_D));

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double p = 2.0;
            list.Add(string.Format("Considering 2% Steel Reinforcement, p = {0}", p));

            double Ac = ((100 - p) / 100.0) * D * b;
            list.Add(string.Format(""));
            list.Add(string.Format("Ac = Effective Area of Concrete = (100-p)/100 x D x b"));
            list.Add(string.Format("                                = {0:f3} x {1} x {2}", ((100 - p) / 100.0), D, b));
            list.Add(string.Format("                                = {0:f3} Sq.mm", Ac));
            list.Add(string.Format(""));

            double Asc = (p / 100.0) * D * b;
            list.Add(string.Format("Required Area of Steel = Asc = Area of Steel = p x D x b = {0:f3} x {1} x {2} Sq.mm = {3:f3} Sq.mm", (p / 100.0), D, b, Asc));
            list.Add(string.Format(""));
            list.Add(string.Format("From equation:"));
            list.Add(string.Format(""));

            double Puz = 0.45 * fck * Ac + 0.75 * fy * Asc;
            list.Add(string.Format("Puz = 0.45 x fck x Ac + 0.75 x fy x Asc"));
            list.Add(string.Format("    = 0.45 x {0} x {1:f3} + 0.75 x {2} x {3:f3}", fck, Ac, fy, Asc));
            list.Add(string.Format("    = {0:f3} N", Puz));
            Puz = Puz / 1000.0;
            list.Add(string.Format("    = {0:f3} kN", Puz));
            list.Add(string.Format(""));

            double req_area = (Pu * 1000) / ((0.23 * fck) + (0.1 * p * fy / 100));
            list.Add(string.Format("Required Cross Section Area of Column"));
            list.Add(string.Format(""));
            list.Add(string.Format("      = Pu x 1000 / [(0.23 x fck) + (0.1 x p x fy / 100)]"));
            list.Add(string.Format("      = {0:f3} x 1000 / [(0.23 x {1}) + (0.1 x {2} x {3} / 100)]", Pu, fck, p, fy));
            list.Add(string.Format("      = {0:f3} Sq.mm.", req_area));
            list.Add(string.Format(""));

            double alpha_n = 1 + ((Pu / Puz) - 0.2) * (5.0 / 3.0);
            list.Add(string.Format("   αn = 1 + [(Pu / Puz) - 0.2] x (5/3)"));
            list.Add(string.Format("      = 1 + [({0:f3} / {1:f3}) - 0.2] x (5 x 3)", Pu, Puz));
            list.Add(string.Format("      = {0:f3}", alpha_n));
            list.Add(string.Format(""));



            double Mu = Math.Pow((Math.Pow(Mux, alpha_n) + Math.Pow(Muy, alpha_n)), (1 / alpha_n));
            list.Add(string.Format("Mu (Y' - effective) = [(Mux)^αn + (Muy)^αn]^(1/ αn)"));
            list.Add(string.Format("                   = [{0:f3}^{1:f3} + {2:f3}^{1:f3}]^(1/{1:f3})", Mux, alpha_n, Muy));
            list.Add(string.Format("                   = {0:f3} KN-m", Mu));
            list.Add(string.Format(""));

            list.Add(string.Format("From section = D x b = {0} x {1}", D, b));

            Ac = D * b;
            list.Add(string.Format("Area provided = Ac = {0:f3} Sq.mm.", Ac));
            list.Add(string.Format(""));


            double val1 = Pu * 1000 / (fck * b * D);
            list.Add(string.Format("(i)   Pu / (fck x b x D) = ({0:f3} x 1000) / ({1} x {2} x {3}) = {4:f3}", Pu, fck, b, D, val1));
            double val2 = Mu * 1000 * 1000 / (fck * b * D * D);
            list.Add(string.Format("(ii)  Mu / (fck x b x D^2) = ({0:f3} x 1000 x 1000) / ({1} x {2} x {3}^2) = {4:f3}", Mu, fck, b, D, val2));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Steel Bar diameter = bar_dia= {0} mm", bar_dia));

            double d_dash = Cover + (bar_dia / 2.0);
            list.Add(string.Format("  d' = Cover + (bar_dia/ 2.0)"));
            list.Add(string.Format("     = {0} + ({1} / 2.0)", Cover, bar_dia));
            list.Add(string.Format("     = {0:f3} mm", d_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("D = {0} mm", D));
            list.Add(string.Format(""));

            double val3 = d_dash / D;

            if (val3 < 0.2)
            {
                val3 = 0.2;
                list.Add(string.Format("d' / D = {0:f3} / {1} = {2:f3} ≈ 0.2", d_dash, D, (d_dash / D)));
            }
            else
            {
                list.Add(string.Format("d' / D = {0:f3} / {1} = {2:f3}", d_dash, D, (d_dash / D)));
            }


            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("From Interaction Diagram for:"));
            //list.Add(string.Format("Reinforcement Equally Distributed in two opposite side, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));
            //Chiranjit [2015 04 09]
            //list.Add(string.Format("Reinforcement Equally Distributed in four opposite sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));


            //list.Add(string.Format("(Open Interaction Diagram)"));
            frm_InteractionDiagram fid = new frm_InteractionDiagram();

            fid.Rebar_Nos = bar_nos;
            fid.Tab_Heading = "Mux1/fck x b x D x D  (X-X axis)";

            fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get, p / fck = ";
            //fid.Value_1 = "0.22";
            //fid.Value_1 = "0.18";
            fid.Value_1 = "0.02";


            fid.fy1 = fy;
            fid.da = val3;
            //fid.D = D;

            int side = 2;

            if (bar_nos % 4 == 0)
            {

                HEADSNeed.ASTRA.ASTRAForms.frm_Intact_Diag1 ffm = new HEADSNeed.ASTRA.ASTRAForms.frm_Intact_Diag1();

                ffm.Rebar_Nos = (int)bar_nos;
                ffm.Fy = fy;

                //side = 2;
                if (ffm.ShowDialog() == DialogResult.Cancel)
                {
                    //this.Close();
                    //return;
                }
                side = ffm.Side;
            }
            fid.side = side;


            fid.ShowDialog();





            if (side == 2)
            {
                list.Add(string.Format("Reinforcement Equally Distributed in Two sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));
            }
            else
                list.Add(string.Format("Reinforcement Equally Distributed in Four sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));
            //list.Add(string.Format("Reinforcement Equally Distributed in Four opposite sides, Steel Grade = fy = {0} and d’ / D = {1:f3}", fy, val3));

            double p_by_fck = MyList.StringToDouble(fid.Value_1, 0.22);
            list.Add(string.Format(""));
            list.Add(string.Format("We get, p / fck = {0}", p_by_fck));
            list.Add(string.Format(""));
            p = p_by_fck * fck;
            if (p > 4.0)
            {
                list.Add(string.Format("Percentage of Steel = p = {0:f3} x fck = {0:f3} x {1} = {2:f3}% > 4%", p_by_fck, fck, p));
                list.Add(string.Format("So the Section is Inadequate"));
            }
            else
            {
                list.Add(string.Format("Percentage of Steel = p = {0:f3} x fck = {0:f3} x {1} = {2:f3}% < 4%", p_by_fck, fck, p));
                list.Add(string.Format("So the Section is Adequate"));
            }
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion STEP 1 : Design Calculation


            #region  STEP 2:
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------"));
            //list.Add(string.Format("STEP {0}.2 : Area of Steel ", step));
            list.Add(string.Format("STEP 2 : Area of Steel ", step));
            list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));

            double Ast = p * Ac / 100.0;
            list.Add(string.Format("Area of Steel required = Ast = p x Ac / 100 = {0:f3} x {1:f3} / 100 = {2:f3} Sq.mm.", p, Ac, Ast));
            list.Add(string.Format(""));

            double CAst = (Math.PI * bar_dia * bar_dia / 4.0);


            //double bar_nos = 14;

            //bar_nos = (int)(Ast / CAst);
            //bar_nos += 1.0;




            Steel_Reinforcement ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[1]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = BOQ.Length;
            BOQ.Steel_Reinforcement.Add(ssr);


            //bar_dia = 25;
            list.Add(string.Format("Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Diameter = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("Let us provide {0} Y' {1} Rebars", bar_nos, bar_dia));
            list.Add(string.Format(""));
            list.Add(string.Format("({0} nos. of {1} mm diameter steel reinforcement bars)", bar_nos, bar_dia));
            list.Add(string.Format(""));

            list.Add(string.Format("CAst = {0} x {1:f3} = {2:f3} Sq.mm.", bar_nos, CAst = (Math.PI * bar_dia * bar_dia / 4.0), CAst = CAst * bar_nos));
            list.Add(string.Format(""));

            p = CAst * 100 / Ac;
            if (p < 4.0)
            {
                list.Add(string.Format("Percentage of Steel provided = p = CAst x 100 / Ac"));
                list.Add(string.Format("                                 = {0:f3} x 100 / {1:f3}", CAst, Ac));
                list.Add(string.Format("                                 = {0:f3}%  <  4%, So OK", p));
            }
            else
            {
                list.Add(string.Format("Percentage of Steel provided = p = CAst x 100 / Ac"));
                list.Add(string.Format("                                 = {0:f3} x 100 / {1:f3}", CAst, Ac));
                list.Add(string.Format("                                 = {0:f3}%  >  4%, So NOT OK", p));
                IS_DESIGN_OK = false;

            }
            list.Add(string.Format(""));

            p_by_fck = p / fck;
            list.Add(string.Format("p / fck = {0:f3} / {1} = {2:f6}", p, fck, p_by_fck));

            val3 = d_dash / D;
            if (val3 < 0.2)
            {
                list.Add(string.Format("d’ / D = {0:f3} / {1} = {2:f3} ≈ 0.2", d_dash, D, val3));
                val3 = 0.2;
            }
            else
            {
                list.Add(string.Format("d’ / D = {0:f3} / {1} = {2:f3}", d_dash, D, val3));
            }
            list.Add(string.Format(""));
            list.Add(string.Format("With section orientation D={0} mm and b={1} mm", D, b));
            list.Add(string.Format("Dimension D is in the direction of Muy and dimension b is in the direction of Mux"));
            list.Add(string.Format("Steel Reinforcement Bar Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Steel Reinforcement Bar Diameter = bar_dia  = {0} mm", bar_dia));

            if (IS_DESIGN_OK)
                list.Add(string.Format("Design is  OK."));
            else
                list.Add(string.Format("Design is NOT OK."));
            list.Add(string.Format(""));
            #endregion  STEP 2:


            #region  STEP 3 :

            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------"));
            //list.Add(string.Format("STEP {0}.3 : Steel  Rebars", step));
            //list.Add(string.Format("STEP {0}.3 : CHECK DESIGN", step));
            list.Add(string.Format("STEP 3 : CHECK DESIGN", step));
            list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));

            //bar_nos = 8;
            //list.Add(string.Format("Next, Let us try with Steel  Rebars:"));
            list.Add(string.Format("Let us try with Steel  Rebars:"));
            list.Add(string.Format("Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format("Diameter = bar_dia = {0} mm", bar_dia));


            double bar_area = Math.PI * bar_dia * bar_dia / 4.0;
            list.Add(string.Format("bar_area = 3.1416 x {0} x {0} / 4 = {1:f3} Sq.mm", bar_dia, bar_area));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            p = bar_nos * bar_area * 100 / (D * b);

            list.Add(string.Format("Percentage of Steel = p = bar_nos  x bar_area x 100 / (D x b)"));
            list.Add(string.Format("                        = {0}  x {1} x 100 / ({2} x {3})", bar_nos, bar_area, D, b));
            list.Add(string.Format("                        = {0:f3}%", p));
            list.Add(string.Format(""));

            Puz = 0.45 * fck * Ac + 0.75 * fy * CAst;
            list.Add(string.Format("   Puz = 0.45 x fck x Ac + 0.75 x fy x CAst"));
            list.Add(string.Format("       = 0.45 x {0} x {1:f3} + 0.75 x {2} x {3:f3}", fck, Ac, fy, CAst));
            list.Add(string.Format("       = {0:f3} N", Puz));
            Puz = Puz / 1000.0;
            list.Add(string.Format("       = {0:f3} KN.", Puz));
            list.Add(string.Format(""));

            double val4 = Pu * 1000 / (fck * b * D);
            p_by_fck = p / fck;
            list.Add(string.Format("p / fck = {0:f3} / {1} = {2:f3}", p, fck, p_by_fck));
            list.Add(string.Format(""));
            list.Add(string.Format("Pu / (fck x b x D) = {0:f3} x 1000 / ({1} x {2} x {3}) = {4:f3}", Pu, fck, b, D, val4));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //list.Add(string.Format("From Interaction Diagram for:"));
            ////list.Add(string.Format("Reinforcement equally distributed in two opposite side, "));
            //list.Add(string.Format("Reinforcement equally distributed in four opposite sides, "));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[2]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = BOQ.Length;
            BOQ.Steel_Reinforcement.Add(ssr);



            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("(Open Interaction Diagram)"));

            fid = new frm_InteractionDiagram();

            fid.Rebar_Nos = bar_nos;
            fid.Tab_Heading = "Muy1/fck x D x b x b  (Y-Y axis)";
            fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get, Muy1 / (fck x b x D x D) = ";
            fid.Value_1 = "0.23";

            fid.fy1 = fy;
            fid.da = val3;
            fid.ShowDialog();

            //side = fid.side;
            if (side == 2)
                list.Add(string.Format("Reinforcement equally distributed in two opposite sides, "));
            else
                list.Add(string.Format("Reinforcement equally distributed in four opposite sides, "));

            list.Add(string.Format("Steel grade = fy = {0}, d’ / D = {1:f3} and Pu / (fck x b x D) = {2:f3}", fy, val3, val4));



            double val5 = MyList.StringToDouble(fid.Value_1, 0.23);
            list.Add(string.Format("We get, Muy1 / (fck x b x D x D) = {0:f3}", val5));
            list.Add(string.Format(""));

            double Muy1 = val5 * (fck * b * D * D) / 1000000;
            list.Add(string.Format("Muy1 = {0:f3} x {1} x {2} x {3} x {3} / 10^6 = {4:f3} KN-m", val5, fck, b, D, Muy1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion  STEP 3 :


            #region STEP 4 :
            //list.Add(string.Format(""));
            //list.Add(string.Format("---------------------------"));
            //list.Add(string.Format("STEP {0}.4 : CHECK DESIGN", step));
            //list.Add(string.Format("---------------------------"));
            list.Add(string.Format(""));
            //list.Add(string.Format("Now, Let us try by changing the orientation of the"));
            list.Add(string.Format("Next, Let us try by changing the orientation of the"));
            list.Add(string.Format("Column Section with reduced steel reinforcements,"));
            list.Add(string.Format(""));

            double D_dash = Math.Min(D, b);

            double _b = b;
            //b = Math.Max(D, b);

            double b_dash = D;

            //double D_dash = b;

            //b = D;


            list.Add(string.Format("Taking D’ = b = {0} mm and b' = D = {1} mm,", D_dash, b_dash));
            //list.Add(string.Format("Taking D’ = {0} mm and b = {1} mm,", D, b));


            list.Add(string.Format(""));

            double val6 = d_dash / D_dash;
            if (val6 < 0.1)
            {
                list.Add(string.Format("d' / D’ = {0:f3} / {1} = {2:f3} = 0.10", d_dash, D_dash, val6));
                val6 = 0.1;
            }
            else
            {
                list.Add(string.Format("d' / D’ = {0:f3} / {1} = {2:f3}", d_dash, D_dash, val6));
            }
            list.Add(string.Format(""));
            list.Add(string.Format("From Interaction Diagram for:"));
            list.Add(string.Format(""));


            fid = new frm_InteractionDiagram();

            fid.Rebar_Nos = bar_nos;
            fid.Tab_Heading = "Mux1 / (fck x b' x D’ x D’)";
            fid.Title_1 = list[list.Count - 1];
            fid.Value_TEXT = "We get value of Mux1 / (fck x b' x D’ x D’) = ";
            fid.Value_1 = "0.155";


            fid.fy1 = fy;
            fid.da = val3;

            fid.ShowDialog();

            //side = fid.side;
            if (side == 2)
                list.Add(string.Format("Reinforcement equally distributed on Two sides,"));
            else
                list.Add(string.Format("Reinforcement equally distributed on Four sides,"));


            list.Add(string.Format("Steel Grade = fy = {0}, d’/D’ = {1:f3} and p / fck = {2:f3}", fy, val6, p_by_fck));



            double val7 = MyList.StringToDouble(fid.Value_1, 0.155);


            list.Add(string.Format(""));
            list.Add(string.Format("For value of Pu / (fck x b' x D’) = {0:f3}", val4));
            list.Add(string.Format(""));
            //list.Add(string.Format("(Open Interaction Diagram)"));
            //double val7 = 0.155;



            list.Add(string.Format("We get value of Mux1 / (fck x b' x D’ x D’) = {0:f3}", val7));

            double Mux1 = val7 * fck * b_dash * D_dash * D_dash;
            list.Add(string.Format("Therefore, Mux1 = {0:f3} x {1} x {2} x {3} x {3}", val7, fck, b_dash, D_dash));
            list.Add(string.Format("                = {0:f3} N-mm", Mux1));
            Mux1 = Mux1 / 1000000;
            list.Add(string.Format("                = {0:f3} KN-m.", Mux1));
            list.Add(string.Format(""));



            alpha_n = 1 + ((Pu / Puz) - 0.2) * (5 / 3);
            list.Add(string.Format("αn = 1 + [(Pu / Puz) - 0.2] x (5/3)"));
            list.Add(string.Format("   = 1 + [({0:f3} / {1:f3}) - 0.2] x (5/3)", Pu, Puz));
            list.Add(string.Format("   = {0:f3}", alpha_n));
            list.Add(string.Format(""));

            double val8 = (Mux / Mux1) * alpha_n + (Muy / Muy1) * alpha_n;
            list.Add(string.Format("(Mux / Mux1) αn + (Muy / Muy1) αn"));
            list.Add(string.Format("= ({0:f3} / {1:f3}) x {2:f3} + ({3:f3} / {4:f3}) x {5:f3}", Mux, Mux1, alpha_n, Muy, Muy1, alpha_n));
            list.Add(string.Format("= {0:f3} + {1:f3}", ((Mux / Mux1) * alpha_n), ((Muy / Muy1) * alpha_n)));
            list.Add(string.Format(""));

            if (val8 < 1)
            {
                list.Add(string.Format("= {0:f3} < 1         So, OK", val8));
            }
            else
            {
                list.Add(string.Format("= {0:f3} > 1         So, NOT OK", val8));
                IS_DESIGN_OK = false;
            }
            list.Add(string.Format(""));
            list.Add(string.Format("So the Section  = b' x D’ = {0} x {1}", b_dash, D_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("With section orientation D' = {0} mm and b' = {1} mm ", D_dash, b_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("Dimension D’ is in the direction of Muy and dimension b is in the direction of Mux"));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel Reinforcement Bar Numbers = bar_nos = {0} Numbers", bar_nos));
            list.Add(string.Format(""));
            list.Add(string.Format("Steel Reinforcement Bar Diameter = bar_dia = {0} mm", bar_dia));
            list.Add(string.Format(""));

            if (IS_DESIGN_OK)
                list.Add(string.Format("Design is  OK."));
            else
                list.Add(string.Format("Design is  NOT OK."));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            //b

            list.Add(string.Format(""));


            CAst = Math.PI * bar_dia * bar_dia / 4;
            list.Add(string.Format("CAst = Steel Reinforcement Bars  {0} Nos. {1} mm diameter = {0} x {2:f3} = {3:f3} Sq.mm.", bar_nos, bar_dia, CAst, (bar_nos * CAst)));

            #endregion STEP 4 :


            #region STEP 5 :

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------------"));
            //list.Add(string.Format("STEP {0}.5 : LATERAL TIE OF COLUMN", step));
            //list.Add(string.Format("STEP {0}.4 : LATERAL TIE OF COLUMN", step));
            list.Add(string.Format("STEP 4 : LATERAL TIE OF COLUMN", step));
            list.Add(string.Format("-----------------------------------------"));
            list.Add(string.Format(""));

            double len = 2 * (D + b) - 4 * Cover;
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Length of The Tie =  2 x (D + b) - 4 * Cover", len));
            list.Add(string.Format("                  =  2 x ({0} + {1}) - 4 x {2}", D, b, Cover));
            list.Add(string.Format("                  =  {0} mm", len));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Refer to IS-456 Clause No-25.2-32"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("   i)  Dia of Lateral Ties <= (1/4)th of the Dia of the longest longitudinal bar"));
            list.Add(string.Format("                    <= (1/4) x {0} = {1} mm", bar_dia, bar_dia / 4.0));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("  ii)  Dia of Lateral Ties <= 5 mm"));
            list.Add(string.Format(""));
            list.Add(string.Format("Let us provide Y{0} lateral tie bars", tie_dia));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Spacing of lateral ties"));
            list.Add(string.Format("-----------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double tie_space1 = Math.Min(D, b);

            list.Add(string.Format("i) Spacing >= The least lateral dimension of the compression member."));
            list.Add(string.Format("           >= {0} mm ", tie_space1));
            list.Add(string.Format(""));
            double tie_space2 = bar_dia * 16;


            list.Add(string.Format("ii) Spacing >= 16 times of the smalest dia logitudinal bar."));
            list.Add(string.Format("            >= 16 X {0}", bar_dia));
            list.Add(string.Format("            >= {0}", tie_space2));
            list.Add(string.Format(""));
            double tie_space3 = tie_dia * 48;

            list.Add(string.Format("iii) Spacing >= 48 times the dia of the lateral tie."));

            list.Add(string.Format("             >= 48 X {0}", tie_dia));
            list.Add(string.Format("             >= {0}", tie_space3));

            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double tie_sp = Math.Min(Math.Min(tie_space1, tie_space2), tie_space3);

            tie_sp = (int)tie_sp / 10;
            tie_sp = (int)tie_sp * 10;



            list.Add(string.Format("So here we provide Y{0} lateral tie @{1} mm c/c.", tie_dia, tie_sp));
            list.Add(string.Format(""));


            ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[3]";
            ssr.Bar_Dia = tie_dia;
            ssr.Length = 2 * (BOQ.Section_B + BOQ.Section_D) - 4 * Cover / 1000.0;

            bar_nos = ((int)(BOQ.Length * 1000 / tie_sp)) + 1;
            ssr.Number_Of_Bars = (int)bar_nos;

            BOQ.Steel_Reinforcement.Add(ssr);




            #region step 5
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format("STEP 5 DESIGN SUMMARY"));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format(""));

            Design_Summary = new List<string>();


            Design_Summary.Add(string.Format("------------------------------------------------"));
            Design_Summary.Add(string.Format("COLUMN = C1"));
            Design_Summary.Add(string.Format("CONTINUOUS MEMBERS = C1"));

            Design_Summary.Add(string.Format("Column Section = {0} mm. x {1} mm.", BOQ.Section_B * 1000, BOQ.Section_D * 1000));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide Main Steel Reinforcement Bars {0} Nos. {1} mm diameter",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars,
                BOQ.Steel_Reinforcement[0].Bar_Dia));


            Design_Summary.Add(string.Format("(Total Steel = Ast = {0:f3} Sq.mm.)", BOQ.Steel_Reinforcement[0].Area));
            Design_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[1]"));
            Design_Summary.Add(string.Format(""));

            CAst = (Math.PI * tie_dia * tie_dia / 4.0) * (1000.0 / tie_sp);
            Design_Summary.Add(string.Format("Provide Y{0} lateral tie @ {1} mm c/c.  (Steel per metre = C_Ast[2] = {2:f3} Sq.mm. / metre)", tie_dia, tie_sp, CAst));
            Design_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[2]"));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));

            list.AddRange(Design_Summary.ToArray());
            #endregion step 5





            #region STEP 6 : BOQ SUMMARY
            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format("STEP 6 : BOQ SUMMARY"));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format(""));

            BOQ_Summary = new List<string>();

            double conc_weight = BOQ.Section_B * BOQ.Section_D * BOQ.Length;
            BOQ_Summary.Add(string.Format("Concrete Quantity = {0:f3} x {1:f3} x {2:f3} = {3:f3} Cu.m",
                BOQ.Section_B, BOQ.Section_D, BOQ.Length, conc_weight));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("---------------------"));
            BOQ_Summary.Add(string.Format("REBAR QUANTITY"));
            BOQ_Summary.Add(string.Format("---------------------"));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide Main Steel Reinforcement Bars {0} Nos. {1} mm diameter",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars,
                BOQ.Steel_Reinforcement[0].Bar_Dia));


            BOQ_Summary.Add(string.Format("(Total Steel = Cast1 = {0:f3} Sq.mm.)", BOQ.Steel_Reinforcement[0].Area));
            //BOQ_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[1]"));



            //ssr = new Steel_Reinforcement();
            //ssr.BarMark = "C_AST[1]";
            //ssr.Number_Of_Bars = (int)bar_nos;
            //ssr.Bar_Dia = bar_dia;
            //ssr.Length = BOQ.Length;
            //BOQ.Steel_Reinforcement.Add(ssr);


            double tot_wgt = BOQ.Steel_Reinforcement[0].Number_Of_Bars * len * Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[0].Bar_Dia);




            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars,
                BOQ.Length,
                Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[0].Bar_Dia),
                tot_wgt));


            BOQ_Summary.Add(string.Format(""));

            CAst = (Math.PI * tie_dia * tie_dia / 4.0) * (1000.0 / tie_sp);
            BOQ_Summary.Add(string.Format("Provide Y{0} lateral tie @ {1} mm c/c.  (Steel per metre = C_Ast[2] = {2:f3} Sq.mm. / metre)", tie_dia, tie_sp, CAst));
            //BOQ_Summary.Add(string.Format("Bar Mark in Drawing = C_Ast[2]"));
            tot_wgt = BOQ.Steel_Reinforcement[2].Number_Of_Bars *
                BOQ.Steel_Reinforcement[2].Length *
                Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[2].Bar_Dia);



            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
                BOQ.Steel_Reinforcement[2].Number_Of_Bars,
                BOQ.Steel_Reinforcement[2].Length,
                Tables.Rebars.Get_Rebar_Weight(BOQ.Steel_Reinforcement[2].Bar_Dia),
                tot_wgt));

            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "C_AST[3]";
            ssr.Bar_Dia = tie_dia;
            ssr.Length = 2 * (BOQ.Section_B + BOQ.Section_D) - 4 * Cover / 1000.0;

            bar_nos = ((int)(BOQ.Length * 1000 / tie_sp)) + 1;
            ssr.Number_Of_Bars = (int)bar_nos;





            list.AddRange(BOQ_Summary.ToArray());

            BOQ_Summary.Add(string.Format("----------------------------------------------------------------------------"));

            #endregion STEP 6 : BOQ SUMMARY



            list.Add(string.Format(""));
            if (Report_File != "")
            {
                string tmp_file = Get_Report_File(step);
                File.WriteAllLines(tmp_file, list.ToArray());

                tmp_file = Get_BOQ_File(step);
                File.WriteAllLines(tmp_file, BOQ_Summary.ToArray());

                tmp_file = Get_Design_Summary_File(step);
                File.WriteAllLines(tmp_file, Design_Summary.ToArray());
            }

            //list.Add(string.Format(""));
            //list.Add(string.Format(""));
            //list.Add(string.Format("----------------------------------"));
            ////list.Add(string.Format("STEP {0}.6 : BILL OF QUANTITY", step));
            //list.Add(string.Format("STEP 6 : BILL OF QUANTITY", step));
            //list.Add(string.Format("----------------------------------"));
            //list.AddRange(BOQ.Get_Text());


            //list.Add(string.Format(""));
            //if (Report_File != "")
            //{
            //    string tmp_file = Get_Report_File(step);
            //    File.WriteAllLines(tmp_file, list.ToArray());
            //}

            //list.Add(string.Format(""));

            #endregion STEP 5 :


            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF DESIGN        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion End of Report



            list.Add(string.Format(""));
            list.Add(string.Format(""));

            if (Report_File != "")
            {
                File.WriteAllLines(Report_File, list.ToArray());
                File.WriteAllLines(File_Design_Summary, Design_Summary.ToArray());
            }

            return list;

            //bar_nos
        }

        public string Get_Report_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "DESIGN_C" + step.ToString("000") + ".TXT");
            return tmp_file;
        }
        public string Get_BOQ_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "BOQ");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "BOQ_C" + step.ToString("000") + ".TXT");

            return tmp_file;
        }

        public string Get_Design_Summary_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "DESIGN SUMMARY");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "DESIGN_SUMMARY_C" + step.ToString("000") + ".TXT");

            return tmp_file;
        }

        public string File_Design_Summary
        {
            get
            {
                string des_sum = Path.Combine(Path.GetDirectoryName(Get_Report_File(1)), "COLUMN_DESIGN_SUMMARY.TXT");
                return des_sum;
            }
        }



        public void Write_All_Data()
        {
            List<string> list = new List<string>();

            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*           DESIGN OF RCC COLUMN             *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");
            list.Add("");
            #endregion

            foreach (var item in Directory.GetFiles(Path.GetDirectoryName(Get_Report_File(1))))
            {
                if (Path.GetExtension(item).ToLower() == ".tmp")
                {
                    //if (!Path.GetFileNameWithoutExtension(item).ToLower().Contains("DATA"))
                    list.AddRange(File.ReadAllLines(item));
                }
            }

            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF REPORT        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion End of Report

            File.WriteAllLines(Report_File, list.ToArray());

        }

        public void Calculate_Program_Loop()
        {
            List<string> list = new List<string>();


            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*           DESIGN OF RCC COLUMN             *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");
            list.Add("");

            #endregion




            string ColumnNos = "";

            for (int i = 0; i < All_Column_Data.Count; i++)
            {
                ColumnNos = All_Column_Data[i].Continuous_ColumnMembers;

                D = All_Column_Data[i].Depth;
                b = All_Column_Data[i].Breadth;
                bar_dia = All_Column_Data[i].Main_Bar_dia;
                tie_dia = All_Column_Data[i].Tie_Bar_Dia;
                Pu = All_Column_Data[i].Pu;
                Mux = All_Column_Data[i].Mux;
                Muy = All_Column_Data[i].Muy;


                list.AddRange(Design_Program_Loop(i + 1).ToArray());
            }
            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF REPORT        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion End of Report


            if (Report_File != "")
                File.WriteAllLines(Report_File, list.ToArray());


        }

        public List<int> Get_Continuous_Members(MemberIncidence b1, ref  JointCoordinateCollection cont_jcc
            , ref  MemberIncidenceCollection mbr_coll)
        {

            //JointCoordinateCollection cont_jcc = new JointCoordinateCollection();
            //MemberIncidenceCollection mbr_coll = new MemberIncidenceCollection();

            if (b1 == null) return new List<int>();

            List<MemberIncidence> list = new List<MemberIncidence>();


            JointCoordinateCollection jcc = new JointCoordinateCollection();


            jcc.Add(b1.StartNode);
            jcc.Add(b1.EndNode);


            MemberIncidenceCollection mic1 = new MemberIncidenceCollection();
            MemberIncidenceCollection mic2 = new MemberIncidenceCollection();
            //MemberIncidenceCollection mic3 = new MemberIncidenceCollection();
            MemberIncidenceCollection mic4 = new MemberIncidenceCollection();


            foreach (var item in AST_DOC.Members)
            {
                if (item.EndNode.NodeNo == jcc[0].NodeNo || item.StartNode.NodeNo == jcc[0].NodeNo)
                    mic1.Add(item);
                if (item.EndNode.NodeNo == jcc[1].NodeNo || item.StartNode.NodeNo == jcc[1].NodeNo)
                    mic2.Add(item);
            }

            cont_jcc.Add(jcc[0]);
            cont_jcc.Add(jcc[1]);

            int flag = 0;

            mbr_coll.Add(b1);
            while (flag <= 1)
            {
                for (int i = 0; i < AST_DOC.Members.Count; i++)
                {
                    foreach (var item in AST_DOC.Members)
                    {
                        if (b1.Direction == item.Direction)
                        {
                            if (item.StartNode.NodeNo == cont_jcc[cont_jcc.Count - 1].NodeNo)
                            {
                                if (!cont_jcc.Contains(item.EndNode))
                                {
                                    mbr_coll.Add(item);
                                    cont_jcc.Add(item.EndNode);
                                    i = 0; break;
                                }
                            }
                            if (item.EndNode.NodeNo == cont_jcc[cont_jcc.Count - 1].NodeNo)
                            {
                                if (!cont_jcc.Contains(item.StartNode))
                                {
                                    mbr_coll.Add(item);
                                    cont_jcc.Add(item.StartNode);
                                    i = 0; break;
                                }
                            }
                        }
                    }
                }

                if (mbr_coll.Count == 1)
                {
                    cont_jcc.Clear();
                    cont_jcc.Add(jcc[1]);
                    cont_jcc.Add(jcc[0]);
                }
                else
                    break;
                flag++;
            }



            List<int> mls = new List<int>();

            foreach (var item in mbr_coll)
            {
                mls.Add(item.MemberNo);
            }

            return mls;
        }

    }


    public class ColumnData
    {
        public bool IsSelect { get; set; }
        public string ColumnNos { get; set; }
        public string Continuous_ColumnMembers { get; set; }
        public double Breadth { get; set; }
        public double Depth { get; set; }
        public double Main_Bar_dia { get; set; }
        public double Bar_Nos { get; set; }
        public double Tie_Bar_Dia { get; set; }
        public double Pu { get; set; }
        public double Mux { get; set; }
        public double Muy { get; set; }



        public ColumnData()
        {
            IsSelect = false;
            ColumnNos = "";
            Continuous_ColumnMembers = "";
            Breadth = 0.0;
            Depth = 0.0;
            Main_Bar_dia = 0.0;
            Bar_Nos = 0.0;
            Tie_Bar_Dia = 0.0;
            Pu = 0.0;
            Mux = 0.0;
            Muy = 0.0;
        }

    }

    public class StaircaseDesign
    {
        public StaircaseDesign()
        {
            Report_File = "";
        }
        public string Report_File { get; set; }

        public Staircase_BOQ BOQ { get; set; }

        public double floor_level;
        public int FlightNos { get; set; }


        public double hr1, wr1, lf, wf, wl, D, hf, gamma_f, gamma_c, tfs, tw, tfw;

        public double a, LLs, LLc, LLr, wtw, fck, fy, bar_dia1, bar_dia2, c;

        public static List<string> Get_Banner()
        {

            List<string> list = new List<string>();

            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*           DESIGN OF STAIR CASE            *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");
            #endregion TechSOFT Banner

            return list;
        }

        public void Calculate_Program()
        {
            List<string> list = new List<string>();

            //hr1 = 150;
            //wr1 = 270;
            //lf = 3240;
            //wl = 1250;
            //D = 200;
            //hf = 3800;
            //gamma_f = 24;
            //gamma_c = 25;
            //tfs = 25;
            //tw = 160;
            //tfw = 6;
            //a = 150;
            //LLs = 5;
            //LLc = 5;
            //LLr = 1.5;
            //wtw = 0.10;
            //fck = 20;
            //fy = 415;

            //bar_dia1 = 12;
            //bar_dia2 = 8;
            //c = 15;


            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*           DESIGN OF STAIR CASE             *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");

            #endregion

            #region  User's Data
            list.Add(string.Format(""));
            list.Add(string.Format("--------------"));
            list.Add(string.Format("User's Data :"));
            list.Add(string.Format("--------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Height of each step Rise = hr1 = {0} mm", hr1));
            list.Add(string.Format("Width of each Step Tread = wr1 = {0} mm", wr1));
            list.Add(string.Format("Span of Stair Flight = lf = {0} mm", lf));
            list.Add(string.Format("Width of Landing Slab = wl = {0} mm", wl));
            list.Add(string.Format("Overall thickness of stair waist slab = D = {0} mm", D));
            list.Add(string.Format("Height from Floor to Floor = hf = {0} mm", hf));
            list.Add(string.Format("Unit weight of finish = γf = {0} KN/Cu.m", gamma_f));
            list.Add(string.Format("Unit weight of Cement = γc = {0} KN/Cu.m", gamma_c));
            list.Add(string.Format("Thickness of floor finish = tfs = {0} mm", tfs));
            list.Add(string.Format("Thickness of Waist Slab = tw = {0} mm", tw));
            list.Add(string.Format("Thickness of finish on Concrete = tfw = {0} mm", tfw));
            list.Add(string.Format("Width of Railing = a = {0} mm", a));
            list.Add(string.Format("Live Load on Stairs = LLs = {0} kN/Sq.m.", LLs));
            list.Add(string.Format("Live Load on Canopy Slab = LLc = {0} kN/Sq.m.", LLc));
            list.Add(string.Format("Live Load on Landing Slab, Railing = LLr = {0} kN/Sq.m.", LLr));
            list.Add(string.Format("Weight of Tarfelt waterproof = wtw = {0} kN/Sq.m.", wtw));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = {0} N/Sq.mm", fck));
            list.Add(string.Format("Steel Grade = fy = {0} N/Sq.mm", fy));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bar Diiameter = Bar_dia1 = {0} mm", bar_dia1));
            list.Add(string.Format("Diameter of bars for transverse distribution Steel = Bar_dia2 = {0} mm", bar_dia2));
            list.Add(string.Format("Cover = c = {0} mm", c));
            list.Add(string.Format(""));
            //list.Add(string.Format("[ ] Concrete Railing Load"));
            //list.Add(string.Format("[ ] Canopy Slab Load"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion  User's Data


            #region  CALCULATIONS

            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------"));
            list.Add(string.Format("STEP 1 : CALCULATIONS "));
            list.Add(string.Format("-----------------------"));

            double tot_rise = ((int)(hf / hr1)) + 1;
            list.Add(string.Format("Total number of Rise from Floor to Floor = {0} / {1} = {2:f3} = {3} nos.", hf, hr1, (hf / hr1), tot_rise));

            double hr2 = hf / tot_rise;
            list.Add(string.Format("Actual height of each Rise = hr2 = {0} / {1} = {2:f3} mm", hf, tot_rise, hr2));


            double wr2 = wr1 + tfs;
            list.Add(string.Format("Actual width of each Tread = wr2 = wr1 + tfs = {0} + {1} = {2} mm", wr1, tfs, wr2));


            double rise_nos = tot_rise / 2;
            list.Add(string.Format("Number of Rise per Flight = {0} / 2 = {1}", tot_rise, rise_nos));
            double thrd_nos = rise_nos - 1;
            list.Add(string.Format("Number of Tread per Flight = {0} - 1 = {1}", rise_nos, thrd_nos));
            list.Add(string.Format(""));


            double length = thrd_nos * wr1;
            //list.Add(string.Format("Length / Span of Flight = 12 x 27 = 8240 mm"));
            list.Add(string.Format("Length / Span of Flight = {0} x {1} = {2} mm", thrd_nos, wr1, length));
            list.Add(string.Format(""));

            double lc = lf + wl / 2;
            list.Add(string.Format("Effective Span = lc = lf + wl / 2 "));
            list.Add(string.Format("                    = {0} + ({1} / 2)", lf, wl));
            //list.Add(string.Format("                    = 3240 + 625"));
            list.Add(string.Format("                    = {0:f3} mm", lc));
            list.Add(string.Format(""));


            #endregion  CALCULATIONS


            #region LOAD CALCULATIONS



            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format("STEP 2 : LOAD CALCULATIONS :"));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double wst = (1.0 / 2.0) * wr2 / 1000 * hr1 / 1000 * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of Slab of triangular shap"));
            list.Add(string.Format("= (1 / 2) x wr2/1000 x hr1/1000 x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("= (1 / 2) x {0:f3} x {1:f3} x {2} x (1 / {3:f3})", wr2 / 1000, hr1 / 1000, gamma_f, (wr1 / 1000)));
            list.Add(string.Format("= {0:f3} KN/Sq.m.", wst));
            list.Add(string.Format(""));

            double wsf = ((hr1 / 1000) + (wr2 / 1000)) * tfs / 1000 * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of finish on step = [(hr1/1000) + (wr2/1000)] x tfs/1000 x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("                         = ({0:f3} x {1:f3}) + {2:f3} x {3} x (1 / {4:f3})", (hr1 / 1000), (wr2 / 1000), tfs / 1000, gamma_f, (wr1 / 1000)));
            list.Add(string.Format("                         = {0:f3} KN/Sq.m.", wsf));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double theta = Math.Atan((hf / 2) / lf);
            double theta_deg = (180.0 / Math.PI) * theta;



            list.Add(string.Format("Angle of Stair Slab θ = tan-1 [(hf/2)/lf] = tan-1 [({0:f3}/2)/{1:f3}] = {2:f3} Deg.", hf, lf, theta_deg));
            list.Add(string.Format(""));

            double wsw = (tw / 1000) * (wr1 / (1000 * Math.Cos(theta))) * gamma_c * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of Waist Slab = (tw /1000) x [wr1 / (1000 x Cos θ)] x γc x [1 / (wr1/1000)]"));
            list.Add(string.Format("                     = ({0} / 1000) x [{1} / (1000 x Cos({2:f3}))] x {3} x (1 / {4:f3})", tw, wr1, theta_deg, gamma_c, (wr1 / 1000)));
            list.Add(string.Format("                     = {0:f3} KN/Sq.m.", wsw));
            list.Add(string.Format(""));

            double wfws = (tfw / 1000) * (wr1 / (1000 * Math.Cos(theta))) * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of Finish on Waist Slab = (tfw /1000) x [wr1 / (1000 x Cos θ)] x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("                               = {0:f3} x ({1:f3} / Cos({2:f3})) x {3} x (1 / {1:f3})", (tfw / 1000), (wr1 / 1000), theta_deg, gamma_f));
            list.Add(string.Format("                               = {0:f3} KN/Sq.m.", wfws));
            list.Add(string.Format(""));

            double w1 = wst + wsf + wsw + wfws;
            list.Add(string.Format("Total Weight = w1 = {0:f3} + {1:f3} + {2:f3} + {3:f3} = {4:f3} KN/Sq.m.", wst, wsf, wsw, wfws, w1));
            list.Add(string.Format(""));

            #endregion LOAD CALCULATIONS


            #region STEP 3 : CONCRETE RAILING LOAD

            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------"));
            list.Add(string.Format("STEP 3 : CONCRETE RAILING LOAD :"));
            list.Add(string.Format("---------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            double X = lf / 2.0;
            list.Add(string.Format("X = lf / 2 = {0} / 2 = {1} mm", lf, X));

            double wl_lc = wl / lc;

            double k = 1.234;        // from Table Sp 456
            list.Add(string.Format("wl / lc = {0:f3} / {1:f3} = {2:f3},        k = {3:f3}", wl, lc, wl_lc, k));
            list.Add(string.Format(""));
            double be = a + k * X * (1 - (X / lc)) / 2.0;
            list.Add(string.Format("Effective width = be = a + k x X [1 - (X/le)] / 2"));
            list.Add(string.Format("                     = {0:f3} + [{1:f3} x {2:f3} x [1 - ({2:f3} / {3:f3})]] / 2", a, k, X, lc));
            //list.Add(string.Format("                     = 150 + [1.234 x 1620 x 0.581] / 2"));
            list.Add(string.Format("                     = {0:f3} mm", be));
            be = be / 1000;
            list.Add(string.Format("                     = {0:f3} m", be));
            list.Add(string.Format(""));

            double rlpm = (a / 1000) * wr1 / (1000 * Math.Cos(theta)) * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format(""));
            list.Add(string.Format("Railing Load per metre  = (a / 1000) x wr1 / (1000 x Cosθ) x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("                        = {0:f3} x {1:f3} / (1000 x Cos({2:f3})) x {3} / {4:f3}", (a / 1000), wr1, theta_deg, gamma_f, (wr1 / 1000)));
            list.Add(string.Format("                        = {0:f3} KN/m", rlpm));

            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double rlpsqm = rlpm / be;
            list.Add(string.Format("Railing Load per Sq.m = {0:f3} / be = {0:f3} / {1:f3} = {2:f3} KN/Sq.mm", rlpm, be, rlpsqm));
            list.Add(string.Format("Live Load = {0:f3} KN/Sq.m", LLr));

            double w2 = rlpsqm + LLr;
            list.Add(string.Format("Total Load = w2 = {0:f3} + {1:f3} = {2:f3} KN/Sq.m", rlpsqm, LLr, w2));

            list.Add(string.Format(""));

            double w = w1 + w2;
            list.Add(string.Format("w = w1 + w2 = {0:f3} + {1:f3} = {2:f3} KN/Sq.m", w1, w2, w));
            list.Add(string.Format(""));

            #endregion CONCRETE RAILING LOAD


            #region STEP 4 : LOAD ON CANOPY SLAB

            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------"));
            list.Add(string.Format("STEP 4 : LOAD ON CANOPY SLAB :"));
            list.Add(string.Format("-------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double sws = (tw / 1000) * gamma_c;
            list.Add(string.Format("Self weight of Slab = (tw/1000) x γc"));
            list.Add(string.Format("                     = {0:f3} x {1}", (tw / 1000), gamma_c));
            list.Add(string.Format("                     = {0:f3} KN/Sq.m", sws));
            list.Add(string.Format(""));

            double wff = (tfw / 1000) * gamma_f;
            list.Add(string.Format("Weight of Floor Finish = tfw/1000 x γf = {0:f3}/1000 x {1} = {2:f3} KN/Sq.m", tfw, gamma_f, wff));
            list.Add(string.Format(""));
            list.Add(string.Format("Weight of Tarfelt water proof = {0:f3} KN/Sq.m", wtw));
            list.Add(string.Format("Live Load = {0:f3} KN/Sq.m", LLc));

            double w3 = sws + wff + wtw + LLc;
            list.Add(string.Format("Total Load = w3 = {0:f3} + {1:f3} + {2:f3} + {3:f3} = {4:f3} KN/Sq.m", sws, wff, wtw, LLc, w3));
            list.Add(string.Format(""));
            #endregion LOAD ON CANOPY SLAB


            #region STEP 5 : LOAD ON LANDING SLAB

            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------"));
            list.Add(string.Format("STEP 5 : LOAD ON LANDING SLAB :"));
            list.Add(string.Format("-------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            sws = (tw / 1000) * gamma_c;
            list.Add(string.Format("Self weight of Slab = (tw/1000) x γc = {0:f3} x {1} = {2:f3} KN/Sq.m", (tw / 1000), gamma_c, sws));




            wff = (tfs / 1000) * gamma_f;

            list.Add(string.Format("Weight of Floor Finish = (tfs / 1000) x γf = {0:f3} x {1} = {2:f3} KN/Sq.m", (tfs / 1000), gamma_f, wff));


            double wcf = (tfw / 1000) * gamma_c;
            list.Add(string.Format("Weight of Ceiling Finish = (tfw /1000) x γc = {0:f4} x {1} = {2:f3} KN/Sq.m", (tfw / 1000), gamma_c, wcf));
            list.Add(string.Format("Live Load = {0:f3} KN/Sq.m", LLr));

            double w4 = sws + wff + wcf + LLr;
            list.Add(string.Format("Total Load = w4 = {0:f3} + {1:f3} + {2:f3} + {3:f3} = {4:f3} KN/Sq.m", sws, wff, wcf, LLr, w4));
            list.Add(string.Format(""));

            #endregion LOAD ON LANDING SLAB


            #region STEP 6 : STRUCTURAL DESIGN

            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format("STEP 6 : STRUCTURAL DESIGN :"));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------"));
            list.Add(string.Format("FLIGHT : 1"));
            list.Add(string.Format("-------------"));
            list.Add(string.Format(""));

            double le1 = (lf + wl) / 1000;
            list.Add(string.Format("Effective Length = le1 = (lf + wl) / 1000"));
            list.Add(string.Format("                       = ({0} + {1}) / 1000", lf, wl));
            list.Add(string.Format("                       = {0:f3} m", le1));
            list.Add(string.Format(""));

            double Mu = (w * 1.5 * le1 * le1) / 8.0;
            list.Add(string.Format("Maximum Bending Moment in the Stair Slab = Mu = (w x 1.5) x le1^2 / 8.0"));
            list.Add(string.Format("                                              = ({0:f3} x 1.5) x {1:f3}^2 / 8.0", w, le1));
            list.Add(string.Format("                                              = {0:f3} KN-m", Mu));
            list.Add(string.Format(""));
            list.Add(string.Format("fck = {0} N/Sq.mm,        fy = {1} N/Sq.mm", fck, fy));
            list.Add(string.Format(""));
            double thk = Math.Sqrt((Mu / (0.138 * fck * 1000)));
            list.Add(string.Format("Required thickness of Stair Waist Slab = √[Mu / (0.138 x fck x 1000)]"));
            list.Add(string.Format("                                       = √[{0:f3} x 1000 x 1000 / (0.138 x {1} x 1000)]", Mu, fck));
            list.Add(string.Format("                                       = {0:f3} mm", thk));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Cover = {0} mm,   Main Reinforcement Bar Diameter = Bar_dia1 = {1} mm", c, bar_dia1));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall thickness of stair waist slab = D = {0} mm", D));
            list.Add(string.Format(""));

            double deff = D - c - (bar_dia1 / 2);
            list.Add(string.Format("Effective depth = deff = D - Cover - (Bar_dia1 / 2)"));
            list.Add(string.Format("                       = {0} - {1} - ({2}/2)", D, c, bar_dia1));
            list.Add(string.Format("                       = {0} mm", deff));
            list.Add(string.Format(""));


            double j = 0.5 + Math.Sqrt((0.25 - Mu * 1000 * 1000 / (0.87 * fck * deff * deff * 1000)));
            list.Add(string.Format("j = 0.5 + √[0.25 - Mu x 1000 x 1000 / (0.87 x fck x deff x deff x 1000)]"));
            list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 1000 x 1000 / (0.87 x {1} x {2:f3} x {2:f3} x 1000)]", Mu, fck, deff));
            //list.Add(string.Format("  = 0.5 + √[0.25 - 0.130]"));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));

            double Ast = (Mu * 1000 * 1000) / (0.87 * fy * j * deff);
            list.Add(string.Format("Required Area of Steel = Ast = Mu x 1000 x 1000 / (0.87 x fy x j x d)"));
            list.Add(string.Format("                             = {0:f3} x 1000 x 1000 / (0.87 x {1} x {2:f3} x {3:f3})", Mu, fy, j, deff));
            list.Add(string.Format("                             = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));

            double Abar = Math.PI * bar_dia1 * bar_dia1 / 4;
            list.Add(string.Format("Area of each bar = Abar = 3.1416 x {0} x {0}/4 = {1:f3} Sq.mm", bar_dia1, Abar));
            list.Add(string.Format(""));

            double spacing = 1000 * Abar / Ast;
            list.Add(string.Format("Require Sapcing of Bars = 1000 x Abar / Ast"));
            list.Add(string.Format("                        = 1000 x {0:f3} / {1:f3}", Abar, Ast));
            list.Add(string.Format("                        = {0:f3} mm", spacing));
            list.Add(string.Format(""));

            spacing = (int)(spacing / 10);
            spacing = spacing * 10;
            list.Add(string.Format("As1 = Provide Y'{0} main Rebars @ {1} c/c (Bottom). ", bar_dia1, spacing));
            list.Add(string.Format(""));

            double As1 = ((Math.PI * bar_dia1 * bar_dia1 / 4) * 1000) / spacing;
            list.Add(string.Format("As1 = [(3.1416 x {0} x {0}/4) x 1000] / {1} = {2:f3} Sq.mm", bar_dia1, spacing, As1));
            list.Add(string.Format(""));

            double p = As1 * spacing / (1000 * deff);
            list.Add(string.Format("Percentage of Steel = p = As x 100 / (1000 x deff)"));
            list.Add(string.Format("                        = {0:f3} x {1} / (1000x {2:f3})", As1, spacing, deff));
            list.Add(string.Format("                        = {0:f3}%", p));
            list.Add(string.Format(""));
            double As2 = 0.12 * D * 1000.0 / spacing;
            list.Add(string.Format("Required transverse distribution Steel = As2 = 0.12% of Gross Concrete Area"));
            list.Add(string.Format("                                             = 0.12 x D x 1000 / {0}", spacing));
            list.Add(string.Format("                                             = 0.12 x {0} x 1000 / {1}", D, spacing));
            list.Add(string.Format("                                             = {0:f3} Sq.mm", As2));
            list.Add(string.Format(""));
            list.Add(string.Format("Diameter of bars for transverse distribution Steel = Bar_dia2 = {0} mm", bar_dia2));

            double Abar2 = Math.PI * bar_dia2 * bar_dia2 / 4;
            list.Add(string.Format("Area of each bar = Abar2 = 3.1416 x {0} x {0} / 4 = {1:f3} Sq.mm", bar_dia2, Abar2));
            list.Add(string.Format(""));

            spacing = Abar2 * 1000 / As2;
            list.Add(string.Format("Required spacing of bars for transverse distribution Steel = Abar2 x 1000/As2"));
            list.Add(string.Format("                                                          = {0:f3} x 1000 / {1:f3}", Abar2, As2));
            list.Add(string.Format("                                                          = {0:f3} mm", spacing));
            list.Add(string.Format(""));

            spacing = (int)(spacing / 10);
            spacing = (int)(spacing * 10);
            list.Add(string.Format("AS2 = Provide Y'{0} @ transverse distribution bars @ {1} mm.  ", bar_dia2, spacing));



            #region End of Report
            list.Add("");
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF REPORT        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion



            File.WriteAllLines(Report_File, list.ToArray());
            list.Clear();

            #endregion STRUCTURAL DESIGN

        }

        public List<string> Design_Summary { get; set; }
        public List<string> BOQ_Summary { get; set; }

        public bool IS_DESIGN_OK { get; set; }
        public List<string> Design_Program_Loop(int step)
        {
            IS_DESIGN_OK = true;
            List<string> list = new List<string>();

            //hr1 = 150;
            //wr1 = 270;
            //lf = 3240;
            //wl = 1250;
            //D = 200;
            //hf = 3800;
            //gamma_f = 24;
            //gamma_c = 25;
            //tfs = 25;
            //tw = 160;
            //tfw = 6;
            //a = 150;
            //LLs = 5;
            //LLc = 5;
            //LLr = 1.5;
            //wtw = 0.10;
            //fck = 20;
            //fy = 415;

            //bar_dia1 = 12;
            //bar_dia2 = 8;
            //c = 15;


            #region TechSOFT Banner
            list.Add("");
            //list.Add("");
            //list.Add("\t\t**********************************************");
            //list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            //list.Add("\t\t*      TechSOFT Engineering Services         *");
            //list.Add("\t\t*                                            *");
            //list.Add("\t\t*           DESIGN OF STAIR CASE             *");
            //list.Add("\t\t*                                            *");
            //list.Add("\t\t**********************************************");
            //list.Add("\t\t----------------------------------------------");
            //list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            //list.Add("\t\t----------------------------------------------");

            #endregion

            #region  User's Data
            list.Add(string.Format(""));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format("STAIRCASE_DESIGN {0} : STAIRCASE FLOOR LEVEL {1}", step, floor_level));
            //list.Add(string.Format("STEP {0}.0 : USER'S DATA", step));
            list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Height of each step Rise = hr1 = {0} mm", hr1));
            list.Add(string.Format("Width of each Step Tread = wr1 = {0} mm", wr1));
            //list.Add(string.Format("Height of Stair Flight Slab = lf = {0} mm", lf));
            list.Add(string.Format("Width of Stair Flight Slab = wf = {0} mm", wf));
            list.Add(string.Format("Width of Landing Slab = wl = {0} mm", wl));
            list.Add(string.Format("Overall thickness of stair waist slab = D = {0} mm", D));
            list.Add(string.Format("Height from Floor to Floor = hf = {0} mm", hf));
            list.Add(string.Format("Unit weight of finish = γf = {0} KN/Cu.m", gamma_f));
            list.Add(string.Format("Unit weight of Cement = γc = {0} KN/Cu.m", gamma_c));
            list.Add(string.Format("Thickness of floor finish = tfs = {0} mm", tfs));
            list.Add(string.Format("Thickness of Waist Slab = tw = {0} mm", tw));
            list.Add(string.Format("Thickness of finish on Concrete = tfw = {0} mm", tfw));
            list.Add(string.Format("Width of Railing = a = {0} mm", a));
            list.Add(string.Format("Live Load on Stairs = LLs = {0} kN/Sq.m.", LLs));
            list.Add(string.Format("Live Load on Canopy Slab = LLc = {0} kN/Sq.m.", LLc));
            list.Add(string.Format("Live Load on Landing Slab, Railing = LLr = {0} kN/Sq.m.", LLr));
            list.Add(string.Format("Weight of Tarfelt waterproof = wtw = {0} kN/Sq.m.", wtw));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = {0} N/Sq.mm", fck));
            list.Add(string.Format("Steel Grade = fy = {0} N/Sq.mm", fy));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bar Diiameter = Bar_dia1 = {0} mm", bar_dia1));
            list.Add(string.Format("Diameter of bars for transverse distribution Steel = Bar_dia2 = {0} mm", bar_dia2));
            list.Add(string.Format("Cover = c = {0} mm", c));
            list.Add(string.Format(""));
            //list.Add(string.Format("[ ] Concrete Railing Load"));
            //list.Add(string.Format("[ ] Canopy Slab Load"));
            list.Add(string.Format(""));

            #endregion  User's Data


            #region  CALCULATIONS

            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format("STEP 1 : CALCULATIONS FOR DIMENSIONS", step));
            //list.Add(string.Format("STEP {0}.1 : CALCULATIONS FOR DIMENSIONS", step));
            list.Add(string.Format("--------------------------------------------"));

            double tot_rise = ((int)(hf / hr1));

            tot_rise = (tot_rise % 2 == 0) ? tot_rise : tot_rise + 1;


            list.Add(string.Format("Total number of Rise from Floor to Floor = {0} / {1} = {2:f3} = {3} nos.", hf, hr1, (hf / hr1), tot_rise));

            double hr2 = hf / tot_rise;
            list.Add(string.Format("Actual height of each Rise = hr2 = {0} / {1} = {2:f3} mm", hf, tot_rise, hr2));


            double wr2 = wr1 + tfs;
            list.Add(string.Format("Actual width of each Tread = wr2 = wr1 + tfs = {0} + {1} = {2} mm", wr1, tfs, wr2));


            double rise_nos = tot_rise / 2;
            list.Add(string.Format("Number of Rise per Flight = {0} / 2 = {1}", tot_rise, rise_nos));
            double thrd_nos = rise_nos - 1;
            list.Add(string.Format("Number of Tread per Flight = {0} - 1 = {1}", rise_nos, thrd_nos));
            list.Add(string.Format(""));


            double length = thrd_nos * wr2;
            //list.Add(string.Format("Length / Span of Flight = 12 x 27 = 8240 mm"));
            list.Add(string.Format("Length / Span of Flight = {0} x {1} = {2} mm", thrd_nos, wr2, length));
            list.Add(string.Format(""));

            lf = length;
            double lc = lf + wl / 2;
            list.Add(string.Format("Effective Span = lc = lf + wl / 2 "));
            list.Add(string.Format("                    = {0} + ({1} / 2)", lf, wl));
            //list.Add(string.Format("                    = 3240 + 625"));
            list.Add(string.Format("                    = {0:f3} mm", lc));
            list.Add(string.Format(""));


            #endregion  CALCULATIONS


            #region STEP 2 : LOAD CALCULATIONS



            list.Add(string.Format("---------------------------------------"));
            list.Add(string.Format("STEP 2 : LOAD CALCULATIONS ", step));
            list.Add(string.Format("---------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double wst = (1.0 / 2.0) * wr2 / 1000 * hr1 / 1000 * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of Step of triangular shape"));
            list.Add(string.Format("= (1 / 2) x wr2/1000 x hr1/1000 x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("= (1 / 2) x {0:f3} x {1:f3} x {2} x (1 / {3:f3})", wr2 / 1000, hr1 / 1000, gamma_f, (wr1 / 1000)));
            list.Add(string.Format("= {0:f3} KN/Sq.m.", wst));
            list.Add(string.Format(""));

            double wsf = ((hr1 / 1000) + (wr2 / 1000)) * tfs / 1000 * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of finish on step = [(hr1/1000) + (wr2/1000)] x tfs/1000 x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("                         = ({0:f3} x {1:f3}) + {2:f3} x {3} x (1 / {4:f3})", (hr1 / 1000), (wr2 / 1000), tfs / 1000, gamma_f, (wr1 / 1000)));
            list.Add(string.Format("                         = {0:f3} KN/Sq.m.", wsf));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double theta = Math.Atan((hf / 2) / lf);
            double theta_deg = (180.0 / Math.PI) * theta;



            list.Add(string.Format("Angle of Stair Slab θ = tan-1 [(hf/2)/lf] = tan-1 [({0:f3}/2)/{1:f3}] = {2:f3} Deg.", hf, lf, theta_deg));
            list.Add(string.Format(""));

            double wsw = (tw / 1000) * (wr1 / (1000 * Math.Cos(theta))) * gamma_c * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of Waist Slab = (tw /1000) x [wr1 / (1000 x Cos θ)] x γc x [1 / (wr1/1000)]"));
            list.Add(string.Format("                     = ({0} / 1000) x [{1} / (1000 x Cos({2:f3}))] x {3} x (1 / {4:f3})", tw, wr1, theta_deg, gamma_c, (wr1 / 1000)));
            list.Add(string.Format("                     = {0:f3} KN/Sq.m.", wsw));
            list.Add(string.Format(""));

            double wfws = (tfw / 1000) * (wr1 / (1000 * Math.Cos(theta))) * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of Finish on Waist Slab = (tfw /1000) x [wr1 / (1000 x Cos θ)] x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("                               = {0:f3} x ({1:f3} / Cos({2:f3})) x {3} x (1 / {1:f3})", (tfw / 1000), (wr1 / 1000), theta_deg, gamma_f));
            list.Add(string.Format("                               = {0:f3} KN/Sq.m.", wfws));
            list.Add(string.Format(""));

            double w1 = wst + wsf + wsw + wfws;
            list.Add(string.Format(""));
            list.Add(string.Format("Live Load on Stair Waist Slab  = {0} kN/Sq.m", LLs));
            list.Add(string.Format(""));
            //list.Add(string.Format("Total Weight = w1 = {0:f3} + {1:f3} + {2:f3} + {3:f3} = {4:f3} KN/Sq.m.", wst, wsf, wsw, wfws, w1));
            //list.Add(string.Format(""));

            //#endregion LOAD CALCULATIONS


            //#region STEP 3 : CONCRETE RAILING LOAD

            //list.Add(string.Format(""));
            //list.Add(string.Format("----------------------------------------"));
            //list.Add(string.Format("STEP {0}.3 : CONCRETE RAILING LOAD :", step));
            //list.Add(string.Format("----------------------------------------"));
            //list.Add(string.Format(""));
            list.Add(string.Format("Concrete Railing Load"));
            list.Add(string.Format(""));
            double X = lf / 2.0;
            list.Add(string.Format("X = lf / 2 = {0} / 2 = {1} mm", lf, X));

            double wl_lc = wl / lc;

            double k = 1.234;        // from Table Sp 456
            list.Add(string.Format("wl / lc = {0:f3} / {1:f3} = {2:f3},        k = {3:f3}", wl, lc, wl_lc, k));
            list.Add(string.Format(""));
            double be = a + k * X * (1 - (X / lc)) / 2.0;
            list.Add(string.Format("Effective width = be = a + k x X [1 - (X/le)] / 2"));
            list.Add(string.Format("                     = {0:f3} + [{1:f3} x {2:f3} x [1 - ({2:f3} / {3:f3})]] / 2", a, k, X, lc));
            //list.Add(string.Format("                     = 150 + [1.234 x 1620 x 0.581] / 2"));
            list.Add(string.Format("                     = {0:f3} mm", be));
            be = be / 1000;
            list.Add(string.Format("                     = {0:f3} m", be));
            list.Add(string.Format(""));

            double rlpm = (a / 1000) * wr1 / (1000 * Math.Cos(theta)) * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format(""));
            list.Add(string.Format("Railing Load per metre  = (a / 1000) x wr1 / (1000 x Cosθ) x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("                        = {0:f3} x {1:f3} / (1000 x Cos({2:f3})) x {3} / {4:f3}", (a / 1000), wr1, theta_deg, gamma_f, (wr1 / 1000)));
            list.Add(string.Format("                        = {0:f3} KN/m", rlpm));

            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double rlpsqm = rlpm / be;
            list.Add(string.Format("Railing Load per Sq.m = {0:f3} / be = {0:f3} / {1:f3} = {2:f3} KN/Sq.mm", rlpm, be, rlpsqm));
            list.Add(string.Format(""));
            list.Add(string.Format("Live Load on Railing = {0:f3} KN/Sq.m", LLr));

            double w2 = rlpsqm + LLr;
            //list.Add(string.Format("Total Load = w2 = {0:f3} + {1:f3} = {2:f3} KN/Sq.m", rlpsqm, LLr, w2));

            list.Add(string.Format(""));
            list.Add(string.Format("Total Load on Stair Waist Slab = w"));
            list.Add(string.Format(""));

            double w = w1 + w2;

            w = wst + wsf + wsw + wfws + rlpsqm + LLr + LLs;
            list.Add(string.Format("w1 = {0:f3} + {1:f3} + {2:f3} + {3:f3} + {4:f3} + {5:f3} + {6:f3}",
                wst, wsf, wsw, wfws, rlpsqm, LLr, LLs));
            list.Add(string.Format(""));
            list.Add(string.Format("  = {0:f3} KN/Sq.m", w));
            list.Add(string.Format(""));

            #endregion CONCRETE RAILING LOAD

            #region STEP 3 : STRUCTURAL DESIGN

            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------"));
            //list.Add(string.Format("STEP {0}.3 : STRUCTURAL DESIGN ", step));
            list.Add(string.Format("STEP 3 : STRUCTURAL DESIGN ", step));
            list.Add(string.Format("---------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------"));
            list.Add(string.Format("FLIGHT : 1"));
            list.Add(string.Format("-------------"));
            list.Add(string.Format(""));

            double le1 = (lf + wl) / 1000;
            list.Add(string.Format("Effective Length = le1 = (lf + wl) / 1000"));
            list.Add(string.Format("                       = ({0} + {1}) / 1000", lf, wl));
            list.Add(string.Format("                       = {0:f3} m", le1));
            list.Add(string.Format(""));

            double Mu = (w * 1.5 * le1 * le1) / 8.0;
            list.Add(string.Format("Maximum Bending Moment in the Stair Slab = Mu = (w1 x 1.5) x le1^2 / 8.0"));
            list.Add(string.Format("                                              = ({0:f3} x 1.5) x {1:f3}^2 / 8.0", w, le1));
            list.Add(string.Format("                                              = {0:f3} KN-m", Mu));
            list.Add(string.Format(""));
            list.Add(string.Format("fck = {0} N/Sq.mm,        fy = {1} N/Sq.mm", fck, fy));
            list.Add(string.Format(""));
            double thk = Math.Sqrt((Mu / (0.138 * fck * 1000)));
            list.Add(string.Format("Required thickness of Stair Waist Slab = √[Mu / (0.138 x fck x 1000)]"));
            list.Add(string.Format("                                       = √[{0:f3} x 1000 x 1000 / (0.138 x {1} x 1000)]", Mu, fck));
            list.Add(string.Format("                                       = {0:f3} mm", thk));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Cover = {0} mm,   Main Reinforcement Bar Diameter = Bar_dia1 = {1} mm", c, bar_dia1));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall thickness of stair waist slab = D = {0} mm", D));
            list.Add(string.Format(""));

            double deff = D - c - (bar_dia1 / 2);
            list.Add(string.Format("Effective depth = deff = D - Cover - (Bar_dia1 / 2)"));
            list.Add(string.Format("                       = {0} - {1} - ({2}/2)", D, c, bar_dia1));
            list.Add(string.Format("                       = {0} mm", deff));
            list.Add(string.Format(""));


            double j = 0.5 + Math.Sqrt((0.25 - Mu * 1000 * 1000 / (0.87 * fck * deff * deff * 1000)));
            list.Add(string.Format("j = 0.5 + √[0.25 - Mu x 1000 x 1000 / (0.87 x fck x deff x deff x 1000)]"));
            list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 1000 x 1000 / (0.87 x {1} x {2:f3} x {2:f3} x 1000)]", Mu, fck, deff));
            //list.Add(string.Format("  = 0.5 + √[0.25 - 0.130]"));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));

            double Ast = (Mu * 1000 * 1000) / (0.87 * fy * j * deff);
            list.Add(string.Format("Required Area of Steel = Ast = Mu x 1000 x 1000 / (0.87 x fy x j x d)"));
            list.Add(string.Format("                             = {0:f3} x 1000 x 1000 / (0.87 x {1} x {2:f3} x {3:f3})", Mu, fy, j, deff));
            list.Add(string.Format("                             = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));

            double Abar = Math.PI * bar_dia1 * bar_dia1 / 4;
            list.Add(string.Format("Area of each bar = Abar = 3.1416 x {0} x {0}/4 = {1:f3} Sq.mm", bar_dia1, Abar));
            list.Add(string.Format(""));

            double spacing = 1000 * Abar / Ast;
            list.Add(string.Format("Require Sapcing of Bars = 1000 x Abar / Ast"));
            list.Add(string.Format("                        = 1000 x {0:f3} / {1:f3}", Abar, Ast));
            list.Add(string.Format("                        = {0:f3} mm", spacing));
            list.Add(string.Format(""));

            spacing = (int)(spacing / 10);
            spacing = spacing * 10;

            double spacng_1 = spacing;
            double Ast1 = (Math.PI * bar_dia1 * bar_dia1 / 4) * (1000 / spacng_1);
            list.Add(string.Format("As1 = Provide Y'{0} main Rebars @ {1} c/c (Bottom). ", bar_dia1, spacing));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Mark in Drawing = T_Ast[1]"));
            list.Add(string.Format(""));

            double As1 = ((Math.PI * bar_dia1 * bar_dia1 / 4) * 1000) / spacing;
            list.Add(string.Format("As1 = [(3.1416 x {0} x {0}/4) x 1000] / {1} = {2:f3} Sq.mm", bar_dia1, spacing, As1));
            list.Add(string.Format(""));

            double p = As1 * spacing / (1000 * deff);
            list.Add(string.Format("Percentage of Steel = p = As x 100 / (1000 x deff)"));
            list.Add(string.Format("                        = {0:f3} x {1} / (1000x {2:f3})", As1, spacing, deff));
            list.Add(string.Format("                        = {0:f3}%", p));
            list.Add(string.Format(""));
            double As2 = 0.12 * D * 1000.0 / spacing;
            list.Add(string.Format("Required transverse distribution Steel = As2 = 0.12% of Gross Concrete Area"));
            list.Add(string.Format("                                             = 0.12 x D x 1000 / {0}", spacing));
            list.Add(string.Format("                                             = 0.12 x {0} x 1000 / {1}", D, spacing));
            list.Add(string.Format("                                             = {0:f3} Sq.mm", As2));
            list.Add(string.Format(""));
            list.Add(string.Format("Diameter of bars for transverse distribution Steel = Bar_dia2 = {0} mm", bar_dia2));

            double Abar2 = Math.PI * bar_dia2 * bar_dia2 / 4;
            list.Add(string.Format("Area of each bar = Abar2 = 3.1416 x {0} x {0} / 4 = {1:f3} Sq.mm", bar_dia2, Abar2));
            list.Add(string.Format(""));

            spacing = Abar2 * 1000 / As2;
            list.Add(string.Format("Required spacing of bars for transverse distribution Steel = Abar2 x 1000/As2"));
            list.Add(string.Format("                                                          = {0:f3} x 1000 / {1:f3}", Abar2, As2));
            list.Add(string.Format("                                                          = {0:f3} mm", spacing));
            list.Add(string.Format(""));

            spacing = (int)(spacing / 10);
            spacing = (int)(spacing * 10);
            double spacng_2 = spacing;

            double Ast2 = (Math.PI * bar_dia2 * bar_dia2 / 4) * (1000 / spacng_2);
            list.Add(string.Format("AS2 = Provide Y'{0} @ transverse distribution bars @ {1} mm.  ", bar_dia2, spacing));

            list.Add(string.Format(""));
            list.Add(string.Format("Bar Mark in Drawing = T_Ast[2]"));


            #endregion STRUCTURAL DESIGN



            #region STEP 4 : LOAD ON LANDING SLAB

            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------------"));
            list.Add(string.Format("STEP 4 : LOAD ON LANDING SLAB ", step));
            list.Add(string.Format("------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double sws = (tw / 1000) * gamma_c;
            list.Add(string.Format("Self weight of Slab = (tw/1000) x γc = {0:f3} x {1} = {2:f3} KN/Sq.m", (tw / 1000), gamma_c, sws));




            double wff = (tfs / 1000) * gamma_f;

            list.Add(string.Format("Weight of Floor Finish = (tfs / 1000) x γf = {0:f3} x {1} = {2:f3} KN/Sq.m", (tfs / 1000), gamma_f, wff));


            double wcf = (tfw / 1000) * gamma_c;
            list.Add(string.Format("Weight of Ceiling Finish = (tfw /1000) x γc = {0:f4} x {1} = {2:f3} KN/Sq.m", (tfw / 1000), gamma_c, wcf));
            list.Add(string.Format("Live Load = {0:f3} KN/Sq.m", LLr));

            double w4 = sws + wff + wcf + LLs;
            list.Add(string.Format("Total Load = w2 = {0:f3} + {1:f3} + {2:f3} + {3:f3}", sws, wff, wcf, LLs, w4));
            list.Add(string.Format(""));

            if (w4 < w)
            {
                list.Add(string.Format(""));
                list.Add(string.Format("                = {0:f3} KN/Sq.m < {1:f3}  KN/Sq.m ", w4, w));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Load on Stair Waist Slab, so provide same thickness and"));
                list.Add(string.Format("Reinforcement of stair Waist Slab."));

            }
            else
            {
                list.Add(string.Format(""));
                list.Add(string.Format("                = {0:f3} KN/Sq.m > {1:f3}  KN/Sq.m ", w4, w));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Load on Stair Waist Slab, so separate Design is Required."));

            }
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion LOAD ON LANDING SLAB

            #region STEP 5 : LOAD ON CANOPY SLAB

            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------------"));
            //list.Add(string.Format("STEP {0}.5 : LOAD ON CANOPY SLAB", step));
            list.Add(string.Format("STEP 5 : LOAD ON CANOPY SLAB", step));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            sws = (tw / 1000) * gamma_c;
            list.Add(string.Format("Self weight of Slab = (tw/1000) x γc"));
            list.Add(string.Format("                     = {0:f3} x {1}", (tw / 1000), gamma_c));
            list.Add(string.Format("                     = {0:f3} KN/Sq.m", sws));
            list.Add(string.Format(""));

            wff = (tfw / 1000) * gamma_f;
            list.Add(string.Format("Weight of Floor Finish = tfw/1000 x γf = {0:f3}/1000 x {1} = {2:f3} KN/Sq.m", tfw, gamma_f, wff));
            list.Add(string.Format(""));
            list.Add(string.Format("Weight of Tarfelt water proof = {0:f3} KN/Sq.m", wtw));
            list.Add(string.Format("Live Load = {0:f3} KN/Sq.m", LLc));

            double w3 = sws + wff + wtw + LLc;
            list.Add(string.Format("Total Load = w3 = {0:f3} + {1:f3} + {2:f3} + {3:f3} = {4:f3} KN/Sq.m", sws, wff, wtw, LLc, w3));
            list.Add(string.Format(""));
            #endregion LOAD ON CANOPY SLAB


            #region STEP 6 : DESIGN SUMMARY
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 6 : DESIGN SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));


            Design_Summary = new List<string>();

            Design_Summary.Add(string.Format("Height of each step Rise = hr1 = {0} mm", hr1));
            Design_Summary.Add(string.Format("Width of each Step Tread = wr1 = {0} mm", wr1));
            Design_Summary.Add(string.Format("Width of Stair Flight Slab = wf = {0} mm", wf));
            Design_Summary.Add(string.Format("Width of Landing Slab = wl = {0} mm", wl));
            Design_Summary.Add(string.Format("Overall thickness of stair waist slab = D = {0} mm", D));
            Design_Summary.Add(string.Format("Height from Floor to Floor = hf = {0} mm", hf));
            Design_Summary.Add(string.Format("Thickness of floor finish = tfs = {0} mm", tfs));
            Design_Summary.Add(string.Format("Thickness of Waist Slab = tw = {0} mm", tw));
            Design_Summary.Add(string.Format("Thickness of finish on Concrete = tfw = {0} mm", tfw));
            Design_Summary.Add(string.Format("Width of Railing = a = {0} mm", a));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Total number of Rise from Floor to Floor = {0} nos.", tot_rise));
            Design_Summary.Add(string.Format("Actual height of each Rise = hr2 = {0} mm", hr2));
            Design_Summary.Add(string.Format("Actual width of each Tread = wr2 = {0} mm", wr2));
            Design_Summary.Add(string.Format("Number of Rise per Flight = {0}", rise_nos));
            Design_Summary.Add(string.Format("Number of Tread per Flight = {0}", thrd_nos));
            Design_Summary.Add(string.Format("Length / Span of Flight = {0} mm", length));
            Design_Summary.Add(string.Format("Effective Span = lc = {0} mm", lc));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide T{0} @ {1} c/c as Main Rebars, Ast = {2:f3} Sq.mm.", bar_dia1, spacng_1, Ast1));
            Design_Summary.Add(string.Format("Bar Mark in Drawing = T_Ast[1] as Longer Direction Span Steel at Bottom."));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide T{0} @ {1} mm. c/c as Transverse Distribution bars (Ast = {2:f3} Sq.mm)", bar_dia2, spacng_2, Ast2));
            Design_Summary.Add(string.Format("Bar Mark in Drawing = T_Ast[2] as Transverse Span Steel at Bottom."));
            Design_Summary.Add(string.Format(""));



            list.AddRange(Design_Summary.ToArray());
            #endregion STEP 6 : DESIGN SUMMARY

            #region STEP 7 : BOQ SUMMARY
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 6 : BOQ SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));

            BOQ_Summary = new List<string>();
            //BOQ_Summary.Add(string.Format("Height of each step Rise = hr1 = {0} mm", hr1));
            //BOQ_Summary.Add(string.Format("Width of each Step Tread = wr1 = {0} mm", wr1));
            //BOQ_Summary.Add(string.Format("Width of Stair Flight Slab = wf = {0} mm", wf));
            //BOQ_Summary.Add(string.Format("Width of Landing Slab = wl = {0} mm", wl));
            //BOQ_Summary.Add(string.Format("Overall thickness of stair waist slab = D = {0} mm", D));
            //BOQ_Summary.Add(string.Format("Height from Floor to Floor = hf = {0} mm", hf));
            //BOQ_Summary.Add(string.Format("Thickness of floor finish = tfs = {0} mm", tfs));
            //BOQ_Summary.Add(string.Format("Thickness of Waist Slab = tw = {0} mm", tw));
            //BOQ_Summary.Add(string.Format("Thickness of finish on Concrete = tfw = {0} mm", tfw));
            //BOQ_Summary.Add(string.Format("Width of Railing = a = {0} mm", a));
            //BOQ_Summary.Add(string.Format(""));
            //BOQ_Summary.Add(string.Format(""));
            //BOQ_Summary.Add(string.Format("Total number of Rise from Floor to Floor = {0} nos.", tot_rise));
            //BOQ_Summary.Add(string.Format("Actual height of each Rise = hr2 = {0} mm", hr2));
            //BOQ_Summary.Add(string.Format("Actual width of each Tread = wr2 = {0} mm", wr2));
            //BOQ_Summary.Add(string.Format("Number of Rise per Flight = {0}", rise_nos));
            //BOQ_Summary.Add(string.Format("Number of Tread per Flight = {0}", thrd_nos));
            //BOQ_Summary.Add(string.Format("Length / Span of Flight = {0} mm", length));
            //BOQ_Summary.Add(string.Format("Effective Span = lc = {0} mm", lc));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            //BOQ_Summary.Add(string.Format("Concrete Quantity = [(Span x 2) + Landing Slab width] x Thickness x Nos. of Floors = Cu.m"));

            double con_qty = lc / 1000 * 2 * wl / 1000 * tw / 1000;
            BOQ_Summary.Add(string.Format("Concrete Quantity = [(Span x 2) + Landing Slab width] x Thickness"));
            BOQ_Summary.Add(string.Format("                  = [({0:f3} x 2) + {1:f3}] x {2:f3}", lc / 1000, wl / 1000, tw / 1000));
            BOQ_Summary.Add(string.Format("                  = {0:f3} Cu.m", con_qty));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("-------------------"));
            BOQ_Summary.Add(string.Format("REBAR QUANTITY"));
            BOQ_Summary.Add(string.Format("-------------------"));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide T{0} @ {1} c/c as Main Rebars, Ast = {2:f3} Sq.mm.", bar_dia1, spacng_1, Ast1));
            //BOQ_Summary.Add(string.Format("Total Weight =  Nos x (Width of Stair Slab/spacing) + 1 x [(Span x 2) + Landing Slab width] x Nos. of Floors x Weight/m for 16 mm dia = Ton."));
            BOQ_Summary.Add(string.Format("Total Weight =  Nos x (Width of Stair Slab/spacing) + 1 x [(Span x 2) + Landing Slab width] x Weight/m for {0} mm dia ", bar_dia1));
            BOQ_Summary.Add(string.Format("             =  {0} x ({1}/{2}) + 1 x [({3} x 2) + {4}] x {5} ",
                2, wf, spacng_1, length, wl, Tables.Rebars.Get_Rebar_Weight(bar_dia1)));


            double bnos = (int)(1000.0 / spacng_1);
            //double tot_weight = bnos * wf/1000 * Tables.Rebars.Get_Rebar_Weight(bar_dia1);
            double tot_weight = 2 * (wf / spacng_1) + 1 * ((length * 2 / 1000) + (wl / 1000)) * Tables.Rebars.Get_Rebar_Weight(bar_dia1);

            //BOQ_Summary.Add(string.Format("             =  {0} x ({1}/{2}) + 1 x [({3} x 2) + {4}] x {5} ",
            //    bnos, wf / 1000, length / 1000, (wl / 1000), (spacng_1 / 1000), Tables.Rebars.Get_Rebar_Weight(bar_dia1), bar_dia1));

            BOQ_Summary.Add(string.Format("             =  {0:f3} Ton", tot_weight));




            //BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos,
            //    wf, Tables.Rebars.Get_Rebar_Weight(bar_dia1), tot_weight));


            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide T{0} @ {1} mm. c/c as Transverse Distribution bars (Ast = {2:f3} Sq.mm)", bar_dia2, spacng_2, Ast2));
            BOQ_Summary.Add(string.Format("Total Weight =  2 x [((Span x 2) + Landing Slab width)/Spacing) + 1] x Nos. of Floors x Weight/m for {0} mm dia", bar_dia2));
            BOQ_Summary.Add(string.Format("             =  2 x [(({0} x 2) + {1})/{2}) + 1] x {3}",

                length, wl, spacng_2, Tables.Rebars.Get_Rebar_Weight(bar_dia2)));

            bnos = (int)(1000.0 / spacng_2);
            //tot_weight = bnos * wf / 1000 * Tables.Rebars.Get_Rebar_Weight(bar_dia2);
            tot_weight = 2 * ((((length * 2) + wl) / spacng_2) + 1) * Tables.Rebars.Get_Rebar_Weight(bar_dia2);
            //BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos,
            //   wf, Tables.Rebars.Get_Rebar_Weight(bar_dia1), tot_weight));

            BOQ_Summary.Add(string.Format("             = {0:f3} Ton", tot_weight));

            BOQ_Summary.Add(string.Format(""));

            list.AddRange(BOQ_Summary);

            #endregion STEP 6 : DESIGN SUMMARY


            #region End of Report
            list.Add("");
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF DESIGN        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion


            string fn = Get_Report_File(step);

            File.WriteAllLines(fn, list.ToArray());

            fn = Get_BOQ_File(step);

            File.WriteAllLines(fn, BOQ_Summary.ToArray());



            fn = Get_Design_Summary_File(step);

            File.WriteAllLines(fn, Design_Summary.ToArray());





            File.WriteAllLines(Report_File, list.ToArray());






            //list.Clear();

            return list;
        }

        public List<string> Design_Program_Individual(int step)
        {
            List<string> list = new List<string>();

            //hr1 = 150;
            //wr1 = 270;
            //lf = 3240;
            //wl = 1250;
            //D = 200;
            //hf = 3800;
            //gamma_f = 24;
            //gamma_c = 25;
            //tfs = 25;
            //tw = 160;
            //tfw = 6;
            //a = 150;
            //LLs = 5;
            //LLc = 5;
            //LLr = 1.5;
            //wtw = 0.10;
            //fck = 20;
            //fy = 415;

            //bar_dia1 = 12;
            //bar_dia2 = 8;
            //c = 15;


            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*           DESIGN OF STAIR CASE             *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");

            #endregion

            #region  User's Data
            list.Add(string.Format(""));
            //list.Add(string.Format("-------------------------------------------------------"));
            ////list.Add(string.Format("STEP {0}.0 : STAIRCASE FLOOR LEVEL {1}", step, floor_level));
            ////list.Add(string.Format("STEP {0}.0 : USER'S DATA", step));
            //list.Add(string.Format("-------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("USER'S DATA"));
            list.Add(string.Format("--------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Height of each step Rise = hr1 = {0} mm", hr1));
            list.Add(string.Format("Width of each Step Tread = wr1 = {0} mm", wr1));
            //list.Add(string.Format("Height of Stair Flight Slab = lf = {0} mm", lf));
            list.Add(string.Format("Width of Stair Flight Slab = wf = {0} mm", wf));
            list.Add(string.Format("Width of Landing Slab = wl = {0} mm", wl));
            list.Add(string.Format("Overall thickness of stair waist slab = D = {0} mm", D));
            list.Add(string.Format("Height from Floor to Floor = hf = {0} mm", hf));
            list.Add(string.Format("Unit weight of finish = γf = {0} KN/Cu.m", gamma_f));
            list.Add(string.Format("Unit weight of Cement = γc = {0} KN/Cu.m", gamma_c));
            list.Add(string.Format("Thickness of floor finish = tfs = {0} mm", tfs));
            list.Add(string.Format("Thickness of Waist Slab = tw = {0} mm", tw));
            list.Add(string.Format("Thickness of finish on Concrete = tfw = {0} mm", tfw));
            list.Add(string.Format("Width of Railing = a = {0} mm", a));
            list.Add(string.Format("Live Load on Stairs = LLs = {0} kN/Sq.m.", LLs));
            list.Add(string.Format("Live Load on Canopy Slab = LLc = {0} kN/Sq.m.", LLc));
            list.Add(string.Format("Live Load on Landing Slab, Railing = LLr = {0} kN/Sq.m.", LLr));
            list.Add(string.Format("Weight of Tarfelt waterproof = wtw = {0} kN/Sq.m.", wtw));
            list.Add(string.Format(""));
            list.Add(string.Format("Concrete Grade = fck = {0} N/Sq.mm", fck));
            list.Add(string.Format("Steel Grade = fy = {0} N/Sq.mm", fy));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bar Diiameter = Bar_dia1 = {0} mm", bar_dia1));
            list.Add(string.Format("Diameter of bars for transverse distribution Steel = Bar_dia2 = {0} mm", bar_dia2));
            list.Add(string.Format("Cover = c = {0} mm", c));
            list.Add(string.Format(""));
            //list.Add(string.Format("[ ] Concrete Railing Load"));
            //list.Add(string.Format("[ ] Canopy Slab Load"));
            list.Add(string.Format(""));

            #endregion  User's Data


            #region  CALCULATIONS

            list.Add(string.Format(""));
            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format("STEP 1 : CALCULATIONS FOR DIMENSIONS"));
            list.Add(string.Format("--------------------------------------------"));

            double tot_rise = ((int)(hf / hr1));

            tot_rise = (tot_rise % 2 == 0) ? tot_rise : tot_rise + 1;


            list.Add(string.Format("Total number of Rise from Floor to Floor = {0} / {1} = {2:f3} = {3} nos.", hf, hr1, (hf / hr1), tot_rise));

            double hr2 = hf / tot_rise;
            list.Add(string.Format("Actual height of each Rise = hr2 = {0} / {1} = {2:f3} mm", hf, tot_rise, hr2));


            double wr2 = wr1 + tfs;
            list.Add(string.Format("Actual width of each Tread = wr2 = wr1 + tfs = {0} + {1} = {2} mm", wr1, tfs, wr2));


            double rise_nos = tot_rise / 2;
            list.Add(string.Format("Number of Rise per Flight = {0} / 2 = {1}", tot_rise, rise_nos));
            double thrd_nos = rise_nos - 1;
            list.Add(string.Format("Number of Tread per Flight = {0} - 1 = {1}", rise_nos, thrd_nos));
            list.Add(string.Format(""));


            double length = thrd_nos * wr2;
            //list.Add(string.Format("Length / Span of Flight = 12 x 27 = 8240 mm"));
            list.Add(string.Format("Length / Span of Flight = {0} x {1} = {2} mm", thrd_nos, wr2, length));
            list.Add(string.Format(""));

            lf = length;
            double lc = lf + wl / 2;
            list.Add(string.Format("Effective Span = lc = lf + wl / 2 "));
            list.Add(string.Format("                    = {0} + ({1} / 2)", lf, wl));
            //list.Add(string.Format("                    = 3240 + 625"));
            list.Add(string.Format("                    = {0:f3} mm", lc));
            list.Add(string.Format(""));


            #endregion  CALCULATIONS


            #region LOAD CALCULATIONS



            list.Add(string.Format("---------------------------------------"));
            list.Add(string.Format("STEP 2 : LOAD CALCULATIONS "));
            list.Add(string.Format("---------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double wst = (1.0 / 2.0) * wr2 / 1000 * hr1 / 1000 * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of Step of triangular shape"));
            list.Add(string.Format("      = (1 / 2) x wr2/1000 x hr1/1000 x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("      = (1 / 2) x {0:f3} x {1:f3} x {2} x (1 / {3:f3})", wr2 / 1000, hr1 / 1000, gamma_f, (wr1 / 1000)));
            list.Add(string.Format("      = {0:f3} KN/Sq.m.", wst));
            list.Add(string.Format(""));

            double wsf = ((hr1 / 1000) + (wr2 / 1000)) * tfs / 1000 * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of finish on step = [(hr1/1000) + (wr2/1000)] x tfs/1000 x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("                         = ({0:f3} x {1:f3}) + {2:f3} x {3} x (1 / {4:f3})", (hr1 / 1000), (wr2 / 1000), tfs / 1000, gamma_f, (wr1 / 1000)));
            list.Add(string.Format("                         = {0:f3} KN/Sq.m.", wsf));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double theta = Math.Atan((hf / 2) / lf);
            double theta_deg = (180.0 / Math.PI) * theta;



            list.Add(string.Format("Angle of Stair Slab θ = tan-1 [(hf/2)/lf] = tan-1 [({0:f3}/2)/{1:f3}] = {2:f3} Deg.", hf, lf, theta_deg));
            list.Add(string.Format(""));

            double wsw = (tw / 1000) * (wr1 / (1000 * Math.Cos(theta))) * gamma_c * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of Waist Slab = (tw /1000) x [wr1 / (1000 x Cos θ)] x γc x [1 / (wr1/1000)]"));
            list.Add(string.Format("                     = ({0} / 1000) x [{1} / (1000 x Cos({2:f3}))] x {3} x (1 / {4:f3})", tw, wr1, theta_deg, gamma_c, (wr1 / 1000)));
            list.Add(string.Format("                     = {0:f3} KN/Sq.m.", wsw));
            list.Add(string.Format(""));

            double wfws = (tfw / 1000) * (wr1 / (1000 * Math.Cos(theta))) * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format("Weight of Finish on Waist Slab = (tfw /1000) x [wr1 / (1000 x Cos θ)] x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("                               = {0:f3} x ({1:f3} / Cos({2:f3})) x {3} x (1 / {1:f3})", (tfw / 1000), (wr1 / 1000), theta_deg, gamma_f));
            list.Add(string.Format("                               = {0:f3} KN/Sq.m.", wfws));
            list.Add(string.Format(""));

            double w1 = wst + wsf + wsw + wfws;
            list.Add(string.Format(""));
            list.Add(string.Format("Live Load on Stair Waist Slab  = {0} kN/Sq.m", LLs));
            list.Add(string.Format(""));
            //list.Add(string.Format("Total Weight = w1 = {0:f3} + {1:f3} + {2:f3} + {3:f3} = {4:f3} KN/Sq.m.", wst, wsf, wsw, wfws, w1));
            //list.Add(string.Format(""));

            //#endregion LOAD CALCULATIONS


            //#region STEP 3 : CONCRETE RAILING LOAD

            //list.Add(string.Format(""));
            //list.Add(string.Format("----------------------------------------"));
            //list.Add(string.Format("STEP {0}.3 : CONCRETE RAILING LOAD :", step));
            //list.Add(string.Format("----------------------------------------"));
            //list.Add(string.Format(""));
            list.Add(string.Format("Concrete Railing Load"));
            list.Add(string.Format(""));
            double X = lf / 2.0;
            list.Add(string.Format("X = lf / 2 = {0} / 2 = {1} mm", lf, X));

            double wl_lc = wl / lc;

            double k = 1.234;        // from Table Sp 456
            list.Add(string.Format("wl / lc = {0:f3} / {1:f3} = {2:f3},        k = {3:f3}", wl, lc, wl_lc, k));
            list.Add(string.Format(""));
            double be = a + k * X * (1 - (X / lc)) / 2.0;
            list.Add(string.Format("Effective width = be = a + k x X [1 - (X/le)] / 2"));
            list.Add(string.Format("                     = {0:f3} + [{1:f3} x {2:f3} x [1 - ({2:f3} / {3:f3})]] / 2", a, k, X, lc));
            //list.Add(string.Format("                     = 150 + [1.234 x 1620 x 0.581] / 2"));
            list.Add(string.Format("                     = {0:f3} mm", be));
            be = be / 1000;
            list.Add(string.Format("                     = {0:f3} m", be));
            list.Add(string.Format(""));

            double rlpm = (a / 1000) * wr1 / (1000 * Math.Cos(theta)) * gamma_f * (1 / (wr1 / 1000));
            list.Add(string.Format(""));
            list.Add(string.Format("Railing Load per metre  = (a / 1000) x wr1 / (1000 x Cosθ) x γf x [1 / (wr1/1000)]"));
            list.Add(string.Format("                        = {0:f3} x {1:f3} / (1000 x Cos({2:f3})) x {3} / {4:f3}", (a / 1000), wr1, theta_deg, gamma_f, (wr1 / 1000)));
            list.Add(string.Format("                        = {0:f3} KN/m", rlpm));

            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double rlpsqm = rlpm / be;
            list.Add(string.Format("Railing Load per Sq.m = {0:f3} / be = {0:f3} / {1:f3} = {2:f3} KN/Sq.mm", rlpm, be, rlpsqm));
            list.Add(string.Format(""));
            list.Add(string.Format("Live Load on Railing = {0:f3} KN/Sq.m", LLr));

            double w2 = rlpsqm + LLr;
            //list.Add(string.Format("Total Load = w2 = {0:f3} + {1:f3} = {2:f3} KN/Sq.m", rlpsqm, LLr, w2));

            list.Add(string.Format(""));
            list.Add(string.Format("Total Load on Stair Waist Slab = w"));
            list.Add(string.Format(""));

            double w = w1 + w2;

            w = wst + wsf + wsw + wfws + rlpsqm + LLr + LLs;
            list.Add(string.Format("w1 = {0:f3} + {1:f3} + {2:f3} + {3:f3} + {4:f3} + {5:f3} + {6:f3}",
                wst, wsf, wsw, wfws, rlpsqm, LLr, LLs));
            list.Add(string.Format(""));
            list.Add(string.Format("  = {0:f3} KN/Sq.m", w));
            list.Add(string.Format(""));

            #endregion CONCRETE RAILING LOAD

            #region STEP 6 : STRUCTURAL DESIGN

            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------"));
            //list.Add(string.Format("STEP {0}.3 : STRUCTURAL DESIGN ", step));
            list.Add(string.Format("STEP 3 : STRUCTURAL DESIGN ", step));
            list.Add(string.Format("---------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-------------"));
            list.Add(string.Format("FLIGHT : 1"));
            list.Add(string.Format("-------------"));
            list.Add(string.Format(""));

            double le1 = (lf + wl) / 1000;
            list.Add(string.Format("Effective Length = le1 = (lf + wl) / 1000"));
            list.Add(string.Format("                       = ({0} + {1}) / 1000", lf, wl));
            list.Add(string.Format("                       = {0:f3} m", le1));
            list.Add(string.Format(""));

            double Mu = (w * 1.5 * le1 * le1) / 8.0;
            list.Add(string.Format("Maximum Bending Moment in the Stair Slab = Mu = (w1 x 1.5) x le1^2 / 8.0"));
            list.Add(string.Format("                                              = ({0:f3} x 1.5) x {1:f3}^2 / 8.0", w, le1));
            list.Add(string.Format("                                              = {0:f3} KN-m", Mu));
            list.Add(string.Format(""));
            list.Add(string.Format("fck = {0} N/Sq.mm,        fy = {1} N/Sq.mm", fck, fy));
            list.Add(string.Format(""));
            double thk = Math.Sqrt((Mu / (0.138 * fck * 1000)));
            list.Add(string.Format("Required thickness of Stair Waist Slab = √[Mu / (0.138 x fck x 1000)]"));
            list.Add(string.Format("                                       = √[{0:f3} x 1000 x 1000 / (0.138 x {1} x 1000)]", Mu, fck));
            list.Add(string.Format("                                       = {0:f3} mm", thk));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement Cover = {0} mm,   Main Reinforcement Bar Diameter = Bar_dia1 = {1} mm", c, bar_dia1));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall thickness of stair waist slab = D = {0} mm", D));
            list.Add(string.Format(""));

            double deff = D - c - (bar_dia1 / 2);
            list.Add(string.Format("Effective depth = deff = D - Cover - (Bar_dia1 / 2)"));
            list.Add(string.Format("                       = {0} - {1} - ({2}/2)", D, c, bar_dia1));
            list.Add(string.Format("                       = {0} mm", deff));
            list.Add(string.Format(""));


            double j = 0.5 + Math.Sqrt((0.25 - Mu * 1000 * 1000 / (0.87 * fck * deff * deff * 1000)));
            list.Add(string.Format("j = 0.5 + √[0.25 - Mu x 1000 x 1000 / (0.87 x fck x deff x deff x 1000)]"));
            list.Add(string.Format("  = 0.5 + √[0.25 - {0:f3} x 1000 x 1000 / (0.87 x {1} x {2:f3} x {2:f3} x 1000)]", Mu, fck, deff));
            //list.Add(string.Format("  = 0.5 + √[0.25 - 0.130]"));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));

            double Ast = (Mu * 1000 * 1000) / (0.87 * fy * j * deff);
            list.Add(string.Format("Required Area of Steel = Ast = Mu x 1000 x 1000 / (0.87 x fy x j x d)"));
            list.Add(string.Format("                             = {0:f3} x 1000 x 1000 / (0.87 x {1} x {2:f3} x {3:f3})", Mu, fy, j, deff));
            list.Add(string.Format("                             = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));

            double Abar = Math.PI * bar_dia1 * bar_dia1 / 4;
            list.Add(string.Format("Area of each bar = Abar = 3.1416 x {0} x {0}/4 = {1:f3} Sq.mm", bar_dia1, Abar));
            list.Add(string.Format(""));

            double spacing = 1000 * Abar / Ast;
            list.Add(string.Format("Require Sapcing of Bars = 1000 x Abar / Ast"));
            list.Add(string.Format("                        = 1000 x {0:f3} / {1:f3}", Abar, Ast));
            list.Add(string.Format("                        = {0:f3} mm", spacing));
            list.Add(string.Format(""));

            spacing = (int)(spacing / 10);
            spacing = spacing * 10;

            double spacng_1 = spacing;
            double Ast1 = (Math.PI * bar_dia1 * bar_dia1 / 4) * (1000 / spacng_1);
            list.Add(string.Format("As1 = Provide Y'{0} main Rebars @ {1} c/c (Bottom). ", bar_dia1, spacing));
            list.Add(string.Format(""));
            list.Add(string.Format("Bar Mark in Drawing = T_Ast[1]"));
            list.Add(string.Format(""));

            double As1 = ((Math.PI * bar_dia1 * bar_dia1 / 4) * 1000) / spacing;
            list.Add(string.Format("As1 = [(3.1416 x {0} x {0}/4) x 1000] / {1} = {2:f3} Sq.mm", bar_dia1, spacing, As1));
            list.Add(string.Format(""));

            double p = As1 * spacing / (1000 * deff);
            list.Add(string.Format("Percentage of Steel = p = As x 100 / (1000 x deff)"));
            list.Add(string.Format("                        = {0:f3} x {1} / (1000x {2:f3})", As1, spacing, deff));
            list.Add(string.Format("                        = {0:f3}%", p));
            list.Add(string.Format(""));
            double As2 = 0.12 * D * 1000.0 / spacing;
            list.Add(string.Format("Required transverse distribution Steel = As2 = 0.12% of Gross Concrete Area"));
            list.Add(string.Format("                                             = 0.12 x D x 1000 / {0}", spacing));
            list.Add(string.Format("                                             = 0.12 x {0} x 1000 / {1}", D, spacing));
            list.Add(string.Format("                                             = {0:f3} Sq.mm", As2));
            list.Add(string.Format(""));
            list.Add(string.Format("Diameter of bars for transverse distribution Steel = Bar_dia2 = {0} mm", bar_dia2));

            double Abar2 = Math.PI * bar_dia2 * bar_dia2 / 4;
            list.Add(string.Format("Area of each bar = Abar2 = 3.1416 x {0} x {0} / 4 = {1:f3} Sq.mm", bar_dia2, Abar2));
            list.Add(string.Format(""));

            spacing = Abar2 * 1000 / As2;
            list.Add(string.Format("Required spacing of bars for transverse distribution Steel = Abar2 x 1000/As2"));
            list.Add(string.Format("                                                          = {0:f3} x 1000 / {1:f3}", Abar2, As2));
            list.Add(string.Format("                                                          = {0:f3} mm", spacing));
            list.Add(string.Format(""));

            spacing = (int)(spacing / 10);
            spacing = (int)(spacing * 10);
            double spacng_2 = spacing;

            double Ast2 = (Math.PI * bar_dia2 * bar_dia2 / 4) * (1000 / spacng_2);
            list.Add(string.Format("AS2 = Provide Y'{0} @ transverse distribution bars @ {1} mm.  ", bar_dia2, spacing));

            list.Add(string.Format(""));
            list.Add(string.Format("Bar Mark in Drawing = T_Ast[2]"));


            #endregion STRUCTURAL DESIGN



            #region STEP 5 : LOAD ON LANDING SLAB

            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------------"));
            list.Add(string.Format("STEP 5 : LOAD ON LANDING SLAB ", step));
            list.Add(string.Format("------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double sws = (tw / 1000) * gamma_c;
            list.Add(string.Format("Self weight of Slab = (tw/1000) x γc = {0:f3} x {1} = {2:f3} KN/Sq.m", (tw / 1000), gamma_c, sws));




            double wff = (tfs / 1000) * gamma_f;

            list.Add(string.Format("Weight of Floor Finish = (tfs / 1000) x γf = {0:f3} x {1} = {2:f3} KN/Sq.m", (tfs / 1000), gamma_f, wff));


            double wcf = (tfw / 1000) * gamma_c;
            list.Add(string.Format("Weight of Ceiling Finish = (tfw /1000) x γc = {0:f4} x {1} = {2:f3} KN/Sq.m", (tfw / 1000), gamma_c, wcf));
            list.Add(string.Format("Live Load = {0:f3} KN/Sq.m", LLr));

            double w4 = sws + wff + wcf + LLs;
            list.Add(string.Format("Total Load = w2 = {0:f3} + {1:f3} + {2:f3} + {3:f3}", sws, wff, wcf, LLs, w4));
            list.Add(string.Format(""));

            if (w4 < w)
            {
                list.Add(string.Format(""));
                list.Add(string.Format("                = {0:f3} KN/Sq.m < {1:f3}  KN/Sq.m ", w4, w));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Load on Stair Waist Slab, so provide same thickness and"));
                list.Add(string.Format("Reinforcement of stair Waist Slab."));

            }
            else
            {
                list.Add(string.Format(""));
                list.Add(string.Format("                = {0:f3} KN/Sq.m > {1:f3}  KN/Sq.m ", w4, w));
                list.Add(string.Format(""));
                list.Add(string.Format("Total Load on Stair Waist Slab, so separate Design is Required."));

            }
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion LOAD ON LANDING SLAB

            #region STEP 5 : LOAD ON CANOPY SLAB

            list.Add(string.Format(""));
            list.Add(string.Format("----------------------------------"));
            //list.Add(string.Format("STEP {0}.5 : LOAD ON CANOPY SLAB", step));
            list.Add(string.Format("STEP 5 : LOAD ON CANOPY SLAB", step));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            sws = (tw / 1000) * gamma_c;
            list.Add(string.Format("Self weight of Slab = (tw/1000) x γc"));
            list.Add(string.Format("                     = {0:f3} x {1}", (tw / 1000), gamma_c));
            list.Add(string.Format("                     = {0:f3} KN/Sq.m", sws));
            list.Add(string.Format(""));

            wff = (tfw / 1000) * gamma_f;
            list.Add(string.Format("Weight of Floor Finish = tfw/1000 x γf = {0:f3}/1000 x {1} = {2:f3} KN/Sq.m", tfw, gamma_f, wff));
            list.Add(string.Format(""));
            list.Add(string.Format("Weight of Tarfelt water proof = {0:f3} KN/Sq.m", wtw));
            list.Add(string.Format("Live Load = {0:f3} KN/Sq.m", LLc));

            double w3 = sws + wff + wtw + LLc;
            list.Add(string.Format("Total Load = w3 = {0:f3} + {1:f3} + {2:f3} + {3:f3} = {4:f3} KN/Sq.m", sws, wff, wtw, LLc, w3));
            list.Add(string.Format(""));
            #endregion LOAD ON CANOPY SLAB

            if (false)
            {
                #region STEP 6 : DESIGN SUMMARY
                list.Add(string.Format("------------------------------------"));
                list.Add(string.Format("STEP 6 : DESIGN SUMMARY"));
                list.Add(string.Format("------------------------------------"));
                list.Add(string.Format(""));
                list.Add(string.Format("Height of each step Rise = hr1 = {0} mm", hr1));
                list.Add(string.Format("Width of each Step Tread = wr1 = {0} mm", wr1));
                list.Add(string.Format("Width of Stair Flight Slab = wf = {0} mm", wf));
                list.Add(string.Format("Width of Landing Slab = wl = {0} mm", wl));
                list.Add(string.Format("Overall thickness of stair waist slab = D = {0} mm", D));
                list.Add(string.Format("Height from Floor to Floor = hf = {0} mm", hf));
                list.Add(string.Format("Thickness of floor finish = tfs = {0} mm", tfs));
                list.Add(string.Format("Thickness of Waist Slab = tw = {0} mm", tw));
                list.Add(string.Format("Thickness of finish on Concrete = tfw = {0} mm", tfw));
                list.Add(string.Format("Width of Railing = a = {0} mm", a));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Total number of Rise from Floor to Floor = {0} nos.", tot_rise));
                list.Add(string.Format("Actual height of each Rise = hr2 = {0} mm", hr2));
                list.Add(string.Format("Actual width of each Tread = wr2 = {0} mm", wr2));
                list.Add(string.Format("Number of Rise per Flight = {0}", rise_nos));
                list.Add(string.Format("Number of Tread per Flight = {0}", thrd_nos));
                list.Add(string.Format("Length / Span of Flight = {0} mm", length));
                list.Add(string.Format("Effective Span = lc = {0} mm", lc));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Provide T{0} @ {1} c/c as Main Rebars, Ast = {2:f3} Sq.mm.", bar_dia1, spacng_1, Ast1));
                list.Add(string.Format("Bar Mark in Drawing = T_Ast[1] as Longer Direction Span Steel at Bottom."));
                list.Add(string.Format(""));
                list.Add(string.Format(""));
                list.Add(string.Format("Provide T{0} @ {1} mm. c/c as Transverse Distribution bars (Ast = {2:f3} Sq.mm)", bar_dia2, spacng_2, Ast2));
                list.Add(string.Format("Bar Mark in Drawing = T_Ast[2] as Transverse Span Steel at Bottom."));
                list.Add(string.Format(""));
                #endregion STEP 6 : DESIGN SUMMARY
            }


            #region STEP 6 : DESIGN SUMMARY
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 6 : DESIGN SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));


            Design_Summary = new List<string>();

            Design_Summary.Add(string.Format("Height of each step Rise = hr1 = {0} mm", hr1));
            Design_Summary.Add(string.Format("Width of each Step Tread = wr1 = {0} mm", wr1));
            Design_Summary.Add(string.Format("Width of Stair Flight Slab = wf = {0} mm", wf));
            Design_Summary.Add(string.Format("Width of Landing Slab = wl = {0} mm", wl));
            Design_Summary.Add(string.Format("Overall thickness of stair waist slab = D = {0} mm", D));
            Design_Summary.Add(string.Format("Height from Floor to Floor = hf = {0} mm", hf));
            Design_Summary.Add(string.Format("Thickness of floor finish = tfs = {0} mm", tfs));
            Design_Summary.Add(string.Format("Thickness of Waist Slab = tw = {0} mm", tw));
            Design_Summary.Add(string.Format("Thickness of finish on Concrete = tfw = {0} mm", tfw));
            Design_Summary.Add(string.Format("Width of Railing = a = {0} mm", a));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Total number of Rise from Floor to Floor = {0} nos.", tot_rise));
            Design_Summary.Add(string.Format("Actual height of each Rise = hr2 = {0} mm", hr2));
            Design_Summary.Add(string.Format("Actual width of each Tread = wr2 = {0} mm", wr2));
            Design_Summary.Add(string.Format("Number of Rise per Flight = {0}", rise_nos));
            Design_Summary.Add(string.Format("Number of Tread per Flight = {0}", thrd_nos));
            Design_Summary.Add(string.Format("Length / Span of Flight = {0} mm", length));
            Design_Summary.Add(string.Format("Effective Span = lc = {0} mm", lc));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide T{0} @ {1} c/c as Main Rebars, Ast = {2:f3} Sq.mm.", bar_dia1, spacng_1, Ast1));
            Design_Summary.Add(string.Format("Bar Mark in Drawing = T_Ast[1] as Longer Direction Span Steel at Bottom."));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide T{0} @ {1} mm. c/c as Transverse Distribution bars (Ast = {2:f3} Sq.mm)", bar_dia2, spacng_2, Ast2));
            Design_Summary.Add(string.Format("Bar Mark in Drawing = T_Ast[2] as Transverse Span Steel at Bottom."));
            Design_Summary.Add(string.Format(""));



            list.AddRange(Design_Summary.ToArray());
            #endregion STEP 6 : DESIGN SUMMARY
            #region End of Report
            list.Add("");


            #region STEP 7 : BOQ SUMMARY
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 6 : BOQ SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));

            BOQ_Summary = new List<string>();
            BOQ_Summary.Add(string.Format(""));
            //BOQ_Summary.Add(string.Format("Concrete Quantity = [(Span x 2) + Landing Slab width] x Thickness x Nos. of Floors = Cu.m"));

            double con_qty = lc / 1000 * 2 * wl / 1000 * tw / 1000;
            BOQ_Summary.Add(string.Format("Concrete Quantity = [(Span x 2) + Landing Slab width] x Thickness"));
            BOQ_Summary.Add(string.Format("                  = [({0:f3} x 2) + {1:f3}] x {2:f3}", lc / 1000, wl / 1000, tw / 1000));
            BOQ_Summary.Add(string.Format("                  = {0:f3} Cu.m", con_qty));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("-------------------"));
            BOQ_Summary.Add(string.Format("REBAR QUANTITY"));
            BOQ_Summary.Add(string.Format("-------------------"));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide T{0} @ {1} c/c as Main Rebars, Ast = {2:f3} Sq.mm.", bar_dia1, spacng_1, Ast1));
            //BOQ_Summary.Add(string.Format("Total Weight =  Nos x (Width of Stair Slab/spacing) + 1 x [(Span x 2) + Landing Slab width] x Nos. of Floors x Weight/m for 16 mm dia = Ton."));
            BOQ_Summary.Add(string.Format("Total Weight =  Nos x (Width of Stair Slab/spacing) + 1 x [(Span x 2) + Landing Slab width] x Weight/m for {0} mm dia ", bar_dia1));
            BOQ_Summary.Add(string.Format("             =  {0} x ({1}/{2}) + 1 x [({3} x 2) + {4}] x {5} ",
                2, wf, spacng_1, length, wl, Tables.Rebars.Get_Rebar_Weight(bar_dia1)));


            double bnos = (int)(1000.0 / spacng_1);
            //double tot_weight = bnos * wf/1000 * Tables.Rebars.Get_Rebar_Weight(bar_dia1);
            double tot_weight = 2 * (wf / spacng_1) + 1 * ((length * 2 / 1000) + (wl / 1000)) * Tables.Rebars.Get_Rebar_Weight(bar_dia1);

            //BOQ_Summary.Add(string.Format("             =  {0} x ({1}/{2}) + 1 x [({3} x 2) + {4}] x {5} ",
            //    bnos, wf / 1000, length / 1000, (wl / 1000), (spacng_1 / 1000), Tables.Rebars.Get_Rebar_Weight(bar_dia1), bar_dia1));

            BOQ_Summary.Add(string.Format("             =  {0:f3} Ton", tot_weight));




            //BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos,
            //    wf, Tables.Rebars.Get_Rebar_Weight(bar_dia1), tot_weight));


            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide T{0} @ {1} mm. c/c as Transverse Distribution bars (Ast = {2:f3} Sq.mm)", bar_dia2, spacng_2, Ast2));
            BOQ_Summary.Add(string.Format("Total Weight =  2 x [((Span x 2) + Landing Slab width)/Spacing) + 1] x Nos. of Floors x Weight/m for {0} mm dia", bar_dia2));
            BOQ_Summary.Add(string.Format("             =  2 x [(({0} x 2) + {1})/{2}) + 1] x {3}",

                length, wl, spacng_2, Tables.Rebars.Get_Rebar_Weight(bar_dia2)));

            bnos = (int)(1000.0 / spacng_2);
            //tot_weight = bnos * wf / 1000 * Tables.Rebars.Get_Rebar_Weight(bar_dia2);
            tot_weight = 2 * ((((length * 2) + wl) / spacng_2) + 1) * Tables.Rebars.Get_Rebar_Weight(bar_dia2);
            //BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton", bnos,
            //   wf, Tables.Rebars.Get_Rebar_Weight(bar_dia1), tot_weight));

            BOQ_Summary.Add(string.Format("             = {0:f3} Ton", tot_weight));

            BOQ_Summary.Add(string.Format(""));

            list.AddRange(BOQ_Summary);

            #endregion STEP 6 : BOQ SUMMARY

            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF DESIGN        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion


            if (Report_File != "")
            {
                //File.WriteAllLines(Report_File, list.ToArray());
                string fn = Get_Report_File(step);
                File.WriteAllLines(fn, list.ToArray());
                fn = Get_BOQ_File(step);
                File.WriteAllLines(fn, BOQ_Summary.ToArray());
                fn = Get_Design_Summary_File(step);
                File.WriteAllLines(fn, Design_Summary.ToArray());
                File.WriteAllLines(Report_File, list.ToArray());
            }
            //list.Clear();

            return list;
        }

        public string Get_Report_File(int step)
        {

            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "DESIGN_SC" + step.ToString("000") + ".TXT");
            return tmp_file;
        }

        public string Get_BOQ_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            tmp_file = Path.Combine(tmp_file, "BOQ");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            tmp_file = Path.Combine(tmp_file, "BOQ_SC" + step.ToString("000") + ".TXT");
            return tmp_file;
        }


        public string Get_Design_Summary_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            tmp_file = Path.Combine(tmp_file, "DESIGN SUMMARY");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            tmp_file = Path.Combine(tmp_file, "DESIGN_SUMMARY_SC" + step.ToString("000") + ".TXT");
            return tmp_file;
        }

    }

    public class IsolatedFoundationDesign
    {
        public IsolatedFoundationDesign()
        {
            Report_File = "";
        }
        public string Report_File { get; set; }

        public string ColumnNo { get; set; }


        public ISO_Foundation_BOQ BOQ { get; set; }

        public double P, Mx, C1, C2, l, b, h, alpha_br, P1, P2, gamma_c, gamma_s;
        public double D, D2, c, bar_dia, fck, fy, ph;

        public void Calculate_Program()
        {
            List<string> list = new List<string>();

            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*      DESIGN OF ISOLATED RCC FOOTING        *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");

            #endregion

            //list.Add(string.Format("Design of Isolated RCC Footing"));



            //P = 853.031;
            //Mx = 29.978;
            //C1 = 0.3;
            //C2 = 0.6;
            //l = 2.8;
            //b = 2.8;
            //h = 1.2;
            //alpha_br = 150;
            //P1 = 0.900;
            //P2 = 0.60;
            //gamma_c = 24;
            //gamma_s = 16;
            //fck = 20;
            //fy = 415;
            //bar_dia = 12;



            list.Add(string.Format("Design Data from Analysis:"));
            list.Add(string.Format(""));
            list.Add(string.Format("Vertical Load at the base = P = {0:f3} KN", P));
            list.Add(string.Format("Bending Moment at the base = Mx = {0:f3} KN-m", Mx));
            list.Add(string.Format(""));
            list.Add(string.Format("User’s Data:"));
            list.Add(string.Format("-------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Size of Column      C1 = {0:f3} m.    and  C2 = {1:f3} m.", C1, C2));
            list.Add(string.Format("Size of Foundation/Footing        l = {0:f3} m.        b = {1:f3} m.", l, b));
            list.Add(string.Format(""));
            list.Add(string.Format("Depth of Overburden Soil         h = {0:f3}m", h));
            list.Add(string.Format("Bearing Capacity of Soil                 αbr = {0:f3} KN/Sq.m.", alpha_br));
            list.Add(string.Format("Size of Pedestal       P1 = {0:f3} m.      P2 = {1:f3} m.", P1, P2));
            list.Add(string.Format("Unit wet of Cement = γc = {0} KN/Cu.m ", gamma_c));
            list.Add(string.Format("Unit wet of Soil  = γs = {0} KN/Cu.m ", gamma_s));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Design Calculations :"));
            list.Add(string.Format("---------------------"));
            list.Add(string.Format(""));

            double A = l * b;
            list.Add(string.Format("Area of Footing = A = l x b = {0} x {1} = {2:f3} Sq.m.", l, b, A));
            list.Add(string.Format(""));

            double p1 = P / A;
            list.Add(string.Format("Pressure on Soil for Axial Vertical Load = p1 = P/A "));
            list.Add(string.Format("                                              = {0:f3} / {1:f3}", P, A));
            list.Add(string.Format("                                              = {0:f3} KN/Sq.m.", p1));
            list.Add(string.Format(""));

            double alpha_sbr = alpha_br - (gamma_c - gamma_s) * h;
            list.Add(string.Format("Safe Bending Capacity = αsbr = αbr - (γc - γs) x h"));
            list.Add(string.Format("                             = {0} - ({1} - {2}) x {3}", alpha_br, gamma_c, gamma_s, h));
            list.Add(string.Format("                             = {0:f3} KN/Sq.m.", alpha_sbr));
            list.Add(string.Format(""));

            double W = 40 * P * h / alpha_sbr;
            list.Add(string.Format("Wt. of Soil Overburden = W = 40 x P x h / αsbr"));
            list.Add(string.Format("                           = 40 x {0:f3} x {1:f3} / {2:f3}", P, h, alpha_sbr));
            list.Add(string.Format("                           = {0:f3} KN", W));
            list.Add(string.Format(""));

            double e = Mx / (P + W);
            list.Add(string.Format("Eccentricity = e = Mx / (P + W)"));
            list.Add(string.Format("                 = {0:f3} / ({1:f3} + {2:f3})", Mx, P, W));
            list.Add(string.Format("                 = {0:f3} m.", e));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Pressure on Soil at depth   h = {0:f3}m", h));
            double p2 = (P + W) * (1 + 6 * e / l) / (b * l);
            list.Add(string.Format(""));
            list.Add(string.Format("  p2 = (P + W) x (1 + 6 x e / l) / (b x l)"));
            list.Add(string.Format("     = ({0:f3} + {1:f3}) x (1 + 6 x {2:f3} / {3:f3}) / ({4:f3} x {3:f3})", P, W, e, l, b));
            //list.Add(string.Format("     = (1173.991 x 1.0557 / (2.8 x 2.8)"));
            list.Add(string.Format("     = {0:f3} KN/Sq.m.", p2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            list.Add(string.Format("Pressure due to overburden Soil"));

            double p3 = W / (b * l);
            list.Add(string.Format("p3 = W / (b x l) = {0:f3} / ({1:f3} x {2:f3}) = {3:f3} KN/Sq.m.", W, b, l, p3));
            list.Add(string.Format(""));

            double p4 = p2 - p3;
            list.Add(string.Format("Therefore additional imposed pressure  = p4 = p2 - p3"));
            list.Add(string.Format("                                            = {0:f3} - {1:f3}", p2, p3));
            list.Add(string.Format("                                            = {0:f3} KN/Sq.m.", p4));
            list.Add(string.Format(""));

            double val1 = 1.25 * p1;
            if (val1 > p4)
            {
                list.Add(string.Format("1.25 x p1 = 1.25 x {0:f3} = {1:f3} KN/Sq.m. > p4 = {2:f3} KN/Sq.m.", p1, val1, p4));
                list.Add(string.Format(""));
                list.Add(string.Format("Here, 1.25 x p1 > (p2 - p3) the size of Footing is OK, and"));
                list.Add(string.Format("The design will be done by neglecting the effect of Bending Moment and as axially loaded only."));

            }
            else
            {
                list.Add(string.Format("1.25 x p1 = 1.25 x {0:f3} = {1:f3} KN/Sq.m. < p4 = {2:f3} KN/Sq.m.", p1, val1, p4));
                list.Add(string.Format(""));
                list.Add(string.Format("Here, 1.25 x p1 < (p2 - p3) the size of Footing was to be increased,"));
            }
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            list.Add(string.Format("Axial Load = P = {0:f3} KN", P));

            val1 = P * 0.1;
            list.Add(string.Format("Additional 10% of P = {0:f3} KN", val1));

            double P_total = P + val1;
            list.Add(string.Format("Total Design Load = {0:f3} + {1:f3} = {2:f3} KN.", P, val1, P_total));
            list.Add(string.Format(""));


            double req_area = P_total / alpha_sbr;
            list.Add(string.Format("Required Area for Footing = {0:f3} / αsbr", P_total));
            list.Add(string.Format("                          = {0:f3} / {1:f3}", P_total, alpha_sbr));
            list.Add(string.Format("                          = {0:f3} Sq.m.", req_area));
            list.Add(string.Format(""));

            double Pu = P * 1.5;
            list.Add(string.Format("Ultimate Load = Pu = {0:f3} x 1.5 = {1:f3} KN", P, Pu));
            list.Add(string.Format(""));

            double pu = Pu / A;
            list.Add(string.Format("Ultimate Pressure = pu = Pu / A"));
            list.Add(string.Format("                       = {0:f3} / {1:f3}", Pu, A));
            list.Add(string.Format("                       = {0:f3} KN/Sq.m.", pu));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            list.Add(string.Format(""));
            list.Add(string.Format("         Section at distance ‘d’ from pedestal [1-1]"));
            list.Add(string.Format("           Section at face of pedestal [3-3]     |     "));
            list.Add(string.Format("          |---------|--------------------|-------|----|"));
            list.Add(string.Format("          |         |                    |       |    |"));
            list.Add(string.Format("          |         |                    |       |    |"));
            list.Add(string.Format("          |         |                    |       |    |"));
            list.Add(string.Format("          |         |         p2         |       |    |"));
            list.Add(string.Format("          |         |--------------------|       |    |"));
            list.Add(string.Format("          |         |         c2         |       |    |"));
            list.Add(string.Format("          |         |     |--------|     |       |    |"));
            list.Add(string.Format("       b  |       p1|  c1 |        |     |       |    |"));
            list.Add(string.Format("          |         |     | Column |     |       |    |"));
            list.Add(string.Format("          |         |     |        |     |       |    |"));
            list.Add(string.Format("          |         |     |--------|     |       |    |"));
            list.Add(string.Format("          |         |      Pedestal      |       |    |"));
            list.Add(string.Format("          |         |--------------------|       |    |"));
            list.Add(string.Format("          |               Footing        |       |    | Section [2-2] at distance ‘d’ from pedestal "));
            list.Add(string.Format("   [2]----|------------------------------|-------|----|--------[2]"));
            list.Add(string.Format("          |                              |       |    |"));
            list.Add(string.Format("          |______________________________|_______|____|"));
            list.Add(string.Format("                 <--- l --->             |       |"));
            list.Add(string.Format("                                        [3]     [1]"));
            list.Add(string.Format("                                           "));
            list.Add(string.Format("                   Fig. 1"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment at the face of pedestal Section [3 - 3]"));
            list.Add(string.Format(""));

            double Mx1 = pu * (l - P2) / 2 * b * (l - P2) / (2 * 2);
            list.Add(string.Format("    Mx = pu x (l - P2) / 2 x b x (l - P2) / (2 x 2)"));
            list.Add(string.Format("       = {0:f3} x ({1:f3} - {2:f3}) / 2 x {3:f3} x ({1:f3} - {2:f3}) / 4", pu, l, P2, b));
            list.Add(string.Format("       = {0:f3} KN.m", Mx1));
            list.Add(string.Format(""));

            double bm1 = Mx1 / P1;
            list.Add(string.Format("Bending Moment per metre Length at the face of pedestal"));
            list.Add(string.Format(" = Mx / P1 = {0:f3} / {1:f3} = {2:f3} KN.m/m", Mx1, P1, bm1));
            list.Add(string.Format(""));

            double Vx = pu * ((l - P2) / 2) * (l / l);
            list.Add(string.Format("Shear Force at the face of pedestal = Vx (Bond) / metre "));
            list.Add(string.Format("                                    = pu x [(l - P2) / 2] x (l / l)"));
            list.Add(string.Format("                                    = {0:f3} x [({1:f3} - {2:f3}) / 2] x ({1:f3} / {1:f3})", pu, l, P2));
            list.Add(string.Format("                                    = {0:f3} KN/m", Vx));
            list.Add(string.Format(""));

            double My = (pu / (2 * P2)) * (b - P1) * l * (b - P1) / (2 * 2);
            list.Add(string.Format("Bending Moment per metre Length at the face of pedestal"));
            list.Add(string.Format(""));
            list.Add(string.Format("    My = [pu / (2 x P2)] x (b - P1) x l x (b - P1) / (2 x 2)"));
            list.Add(string.Format("       = [{0:f3} / (2 x {1:f3})] x ({2:f3} - {3:f3}) x {4:f3} x ({2:f3} - {3:f3}) / 4", pu, P2, b, P1, l));
            list.Add(string.Format("       = {0:f3} KN.m/m", My));
            list.Add(string.Format(""));

            double Vy = pu * ((b - P1) / 2) * (l / l);
            list.Add(string.Format("Shear Force at the face of pedestal = Vy (Bond) / metre"));
            list.Add(string.Format("                                    = pu x [(b - P1) / 2] x (l / l)"));
            list.Add(string.Format("                                    = {0:f3} x [({1:f3} - {2:f3}) /2] x ({3:f3} / {3:f3})", pu, b, P1, l));
            list.Add(string.Format("                                    = {0:f3} KN/m", Vy));
            list.Add(string.Format(""));



            bool flag = false;
            //double D = 560.0;
            double d_dash = c + bar_dia / 2;
            double d = D - d_dash;
            double _a, _b, _Vx_1_1, _Vx_1_1_a, _Vy_2_2, _Vy_2_2_b, Mmax;

            double d1, Vmax, tau_c, d2, _d;
            string kStr = "";


            double D1 = D;
            //D2 = 300.0;

            double D_dash, D3, eff_d;


            List<string> trial_text = new List<string>();


            int cn = 0;
            do
            {
                #region Trial

                //D1 = D;
                d_dash = c + bar_dia / 2;
                d = D1 - d_dash;

                trial_text.Clear();


                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Let us assume an overall depth = D = {0} mm", D1));
                trial_text.Add(string.Format("Considering, Cover + Half of Bar Dia = d’ = {0} mm", d_dash));


                trial_text.Add(string.Format("Effective depth = D-d’ = d = {0} mm", d));
                trial_text.Add(string.Format(""));
                d = d / 1000;
                _a = P1 + ((b - P1) / 2) * (d) * 2 / ((l - P2) / 2);
                trial_text.Add(string.Format(" a = P1 + [(b - P1) / 2] x d  x 2/ [(l - P2) / 2]"));
                trial_text.Add(string.Format("   = {0:f3} + [({1:f3} - {2:f3}) /2] x {3:f3} x 2 / [({4:f3} - {5:f3}) / 2]", P1, b, P1, d, l, P2));
                trial_text.Add(string.Format("   = {0:f3} m", _a));
                trial_text.Add(string.Format(""));

                _b = P2 + ((l - P2) / 2) * d * 2.0 / ((b - P1) / 2.0);
                trial_text.Add(string.Format(" b = P2 + [(l - P2) / 2] x d x 2 / [(b - P1) / 2]"));
                trial_text.Add(string.Format("   = {0:f3} + [({1:f3} - {2:f3}) /2] x {3:f3} x 2 / [({4:f3} - {5:f3}) / 2]", P2, l, P2, d, b, P1));
                trial_text.Add(string.Format("   = {0:f3} m", _b));
                trial_text.Add(string.Format(""));

                _Vx_1_1 = pu * (((l - P2) / 2) - d) * b;
                trial_text.Add(string.Format("Vx (1 - 1) = pu x [[(l - P2) / 2] - d] x b"));
                trial_text.Add(string.Format("           = {0:f3} x [[({1:f3} - {2:f3}) / 2] - {3:f3}] x {4:f3}", pu, l, P2, d, b));
                trial_text.Add(string.Format("           = {0:f3} KN", _Vx_1_1));
                trial_text.Add(string.Format(""));
                _Vx_1_1_a = _Vx_1_1 / _a;
                trial_text.Add(string.Format("Vx (1 -1) / metre = Vx (1 - 1) / a = {0:f3} / {1:f3} = {2:f3} KN/m", _Vx_1_1, _a, _Vx_1_1_a));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Similarly,"));

                _Vy_2_2 = pu * (((b - P1) / 2) - d) * l;
                trial_text.Add(string.Format("Vy (2 - 2) = pu x [[(b - P1) / 2] - d] x l"));
                trial_text.Add(string.Format("           = {0:f3} x [[({1:f3} - {2:f3}) / 2] - {3:f3}] x {4:f3}", pu, b, P1, d, l));
                trial_text.Add(string.Format("           = {0:f3} KN", _Vy_2_2));
                trial_text.Add(string.Format(""));

                _Vy_2_2_b = _Vy_2_2 / _b;
                trial_text.Add(string.Format("Vy (2 -2) / metre = Vy (2 - 2) / b = {0:f3} / {1:f3} = {2:f3} KN/m", _Vy_2_2, _b, _Vy_2_2_b));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Required depth of footing considering maximum Bending Moments,"));
                trial_text.Add(string.Format(""));


                trial_text.Add(string.Format("Mx = {0:f3} KNm and My = {1:f3} KNm", Mx1, My));
                trial_text.Add(string.Format(""));

                Mmax = Math.Max(Mx1, My);
                trial_text.Add(string.Format("Therefore Mmax = {0:f3} KNm", Mmax));
                trial_text.Add(string.Format(""));


                d1 = Math.Sqrt((Mmax * 1000000 / (0.138 * fck * 1000)));
                trial_text.Add(string.Format("   d1 >= √[Mmax x 10^6 / (0.138 x fck x b)]"));
                trial_text.Add(string.Format("       = √[{0:f3} x 10^6 / (0.138 x {1} x 1000)]", Mmax, fck));
                trial_text.Add(string.Format("       = {0:f3} mm", d1));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Required depth of footing Considering maximum Shear Force,"));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Vx (1 - 1) / metre = {0:f3} KN/m", _Vx_1_1_a));
                trial_text.Add(string.Format("Vy (2 - 2) / metre = {0:f3} KN/m", _Vy_2_2_b));
                trial_text.Add(string.Format(""));

                Vmax = Math.Max(_Vx_1_1_a, _Vy_2_2_b);
                trial_text.Add(string.Format("Therefore, Vmax = {0:f3} KN/m", Vmax));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("d2 >= Vmax x 10^3 / (Ƭc x 1000)"));
                trial_text.Add(string.Format(""));


                //tau_c = Tables.Permissible_Shear_Stress(0.25, (int)fck, ref kStr);
                tau_c = 0.36;
                trial_text.Add(string.Format("For minimum required Steel reinforcement of 0.25%, Corresponding Ƭc = {0:f3} N/Sq.mm.", tau_c));
                //trial_text.Add(string.Format("d2 >= 155.44 x 1000 / (0.36 x 1000) = 431.78 mm"));
                d2 = Vmax * 1000 / (tau_c * 1000);
                trial_text.Add(string.Format("d2 >= {0:f3} x 1000 / ({1:f3} x 1000) = {2:f3} mm", Vmax, tau_c, d2));
                trial_text.Add(string.Format(""));


                _d = Math.Max(d1, d2);
                trial_text.Add(string.Format("Required effective depth is maximum of d1 & d2 = d = {0:f3} mm", _d));

                //_d = (int)(_d / 100.0);

                //_d = _d + 1;

                //_d = _d * 100;
                trial_text.Add(string.Format("Let us provide overall depth of footing at the face of Pedestal = D = {0} mm", d * 1000));
                trial_text.Add(string.Format(""));


                trial_text.Add(string.Format("Overall depth at the face of pedestal = D1 = {0} mm", D1));
                trial_text.Add(string.Format("Overall depth at the edge of footing = D2 = {0} mm", D2));


                //D_dash = (2.8 - 0.6);

                //decimal wd = ((2.80 - 0.60) / 2.0);
                //float f1 = 2.8f;
                //float f2 = 0.6f;

                //float f3 = f1 - f2;

                D_dash = (l - P2) / 2.0;
                trial_text.Add(string.Format("Distance from face of pedestal to edge of footing = D’"));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format(" D’ = (l - P2) / 2"));
                trial_text.Add(string.Format("    = ({0:f3} - {1:f3}) / 2", l, P2));
                trial_text.Add(string.Format("    = {0:f3} m", D_dash));
                D_dash = D_dash * 1000.0;
                trial_text.Add(string.Format("    = {0:f3} mm", D_dash));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Required Overall depth at a distance = D = {0}mm for face of Pedestal = D3", D));
                //trial_text.Add(string.Format("=D3"));
                trial_text.Add(string.Format(""));


                //D3 = D2 + ((D1 - D2) * (((l - P2) * 1000 / 2) - D_dash) / ((l - P2) * 1000 / 2));
                D3 = D2 + ((D1 - D2) * (P2 * 1000) / D_dash);
                trial_text.Add(string.Format("D3 = D2 + ((D1 - D2) * (P2 * 1000) / D'"));
                trial_text.Add(string.Format("   = {0:f3} + ({1:f3} - {0:f3}) x {2:f3}  / {3:f3}", D2, D1, p2 * 1000, D_dash));
                trial_text.Add(string.Format("   = {0:f3} mm", D3));

                //trial_text.Add(string.Format("D3 = D2 + [(D1- D2) x [p2 x 1000] / [(l - p2) x 1000 / 2]]"));
                //trial_text.Add(string.Format("   = {0:f3} + ({1:f3} - {0:f3}) x {2:f3}  / {3:f3}", D2, D1, (((l - p2) * 1000 / 2) - D_dash), ((l - p2) * 1000 / 2)));
                //trial_text.Add(string.Format("   = {0:f3} mm", D3));

                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Considering Cover + Half of Bar Dia = d’ = {0} mm", d_dash));
                trial_text.Add(string.Format(""));

                eff_d = D3 - d_dash;
                trial_text.Add(string.Format("Effective depth = D3 - d’"));
                trial_text.Add(string.Format("                = {0:f3} - {1}", D3, d_dash));
                if (eff_d <= _d)
                {
                    trial_text.Add(string.Format("                = {0:f3} mm <= d = {1:f3} mm,   NOT OK.", eff_d, _d));
                    D1 += 20;
                    if (cn == 0)
                        list.AddRange(trial_text);

                    if (D1 > 1000)
                    {
                        list.Add(string.Format("Tried foundation thickness upto 1000mm, with a Trial increment of 20 mm"));
                        list.Add(string.Format("but found 'NOT OK' terminating the Design user has to modify the input data.."));
                        list.Add(string.Format(""));


                        if (Report_File != "")
                            File.WriteAllLines(Report_File, list.ToArray());



                        return;
                    }
                    flag = true;
                }
                else
                {
                    flag = false;
                    trial_text.Add(string.Format("                = {0:f3} mm > d = {1:f3} mm,   OK.", eff_d, _d));
                }
                trial_text.Add(string.Format(""));

                cn++;
                #endregion Trial
            }
            while (flag);
            list.AddRange(trial_text);

            list.Add(string.Format("So, provide footing of size = l x b = {0:f3}m x {1:f3}m ", l, b));
            list.Add(string.Format(""));
            list.Add(string.Format("and Overall depth at the face of Pedestal = D’ = {0:f3} mm", D_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("and at the edge = D2 = {0:f3} mm.", D2));


            //double P1 = 0.9;
            //double P2 = 0.6;
            //ph = 0.25;
            list.Add(string.Format("Also, the Pedestal of size = p1 x p2 = {0} mm x {1} mm", P1 * 1000, P2 * 1000));
            list.Add(string.Format("and height of Pedestal as {0}mm.", ph));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Cross Sectional Area of Pedestal"));
            list.Add(string.Format(""));

            double A2 = 4 * C1 * C2;
            list.Add(string.Format("   A1 <= 4 x (Cross Sectional Area of Column = A2)"));
            list.Add(string.Format("      <= 4 x {0:f3} x {1:f3}", C1, C2));
            list.Add(string.Format("      <= {0:f3} Sq.m.", A2));
            list.Add(string.Format(""));


            double A1 = P1 * P2;
            if (A1 < A2)
                list.Add(string.Format("Therefore, A1 = p1 x p2 = {0:f3} x {1:f3} = {2:f3} < {3:f3} Sq.m., OK", P1, P2, A1, A2));
            else
                list.Add(string.Format("Therefore, A1 = p1 x p2 = {0:f3} x {1:f3} = {2:f3} > {3:f3} Sq.m., NOT OK", P1, P2, A1, A2));
            list.Add(string.Format(""));




            list.Add(string.Format(""));

            double alpha_cbr = 0.45 * fck * Math.Sqrt(A1 / A2);
            list.Add(string.Format("Now, αcbr = 0.45 x fck x √(A1 / A2)"));
            list.Add(string.Format("          = 0.45 x {0} x √({1:f3} / {2:f3})", fck, A1, A2));
            list.Add(string.Format("          = {0:f3} N/Sq.mm.", alpha_cbr));
            list.Add(string.Format(""));

            double abrs = (P * 1000 * 1.5) / (C1 * 1000 * C2 * 1000);
            list.Add(string.Format("Actual Bearing Stress = (P x 1000 x 1.5) / (C1 x 1000 x C2 x 1000)"));
            list.Add(string.Format("                      = ({0:f3} x 1000 x 1.5) / ({1:f3} x 1000 x {2:f3} x 1000)", P, C1, C2));
            list.Add(string.Format(""));
            if (abrs < alpha_cbr)
                list.Add(string.Format("                      = {0:f3} N/Sq.mm. < αcbr = {1:f3} N/Sq.mm., OK.", abrs, alpha_cbr));
            else
                list.Add(string.Format("                      = {0:f3} N/Sq.mm. > αcbr = {1:f3} N/Sq.mm., NOT OK.", abrs, alpha_cbr));


            list.Add(string.Format(""));
            list.Add(string.Format(""));




            list.Add(string.Format("PUNCHING SHEAR FORCE:"));
            list.Add(string.Format("---------------------"));
            list.Add(string.Format(""));

            double Vp = P * 1.5 - (P1 + D_dash / 1000) * (P2 + D_dash / 1000) * pu;
            list.Add(string.Format("  Vp = P x 1.5 - (p1 + d) x (p2 + d) x pu"));
            //list.Add(string.Format("     = 853.051 x 1.5 - (0.9 + 0.56) x (0.6 + 0.56) x 163.21"));
            list.Add(string.Format("     = {0:f3} x 1.5 - ({1:f3} + {2:f3}) x ({3:f3} + {2:f3}) x {4:f3}", P, P1, D_dash / 1000, P2, pu));
            //list.Add(string.Format("     = 1279.577 - 276.412"));
            list.Add(string.Format("     = {0:f3} KN", Vp));
            list.Add(string.Format(""));
            list.Add(string.Format("   D1 = Overall depth at the face of Pedestal = {0} mm", D1));
            list.Add(string.Format("   D2 = Overall depth at the edge of Footing = {0} mm,", D2));
            list.Add(string.Format(""));

            double s = D_dash;
            list.Add(string.Format("Distance = s = {0} m = {0} mm", s / 1000, s));
            list.Add(string.Format(""));



            double ovr_d = D / 2;
            list.Add(string.Format("Overall depth of a distance = d / 2 = {0} / 2 = {1} mm from the face of Pedestal = Dp", D, ovr_d));
            list.Add(string.Format(""));
            double Dp = D2 + ((D1 - D2) * (s - ovr_d) / s);
            list.Add(string.Format("   Dp = D2 + [(D1 - D2) x (s -280) / s]"));
            list.Add(string.Format("      = {0} + [({1} - {0}) x ({2} - {3}) / {0}]", D2, D1, s, ovr_d));
            list.Add(string.Format("      = {0:f3} mm", Dp));
            list.Add(string.Format(""));
            list.Add(string.Format("Considering Cover + Half of Bar Dia = d’ = {0} mm", d_dash));

            eff_d = Dp - d_dash;
            list.Add(string.Format("Effective Depth = Dp - d’"));
            list.Add(string.Format("                = {0:f3} - {1}", Dp, d_dash));
            list.Add(string.Format("                = {0:f3} mm", eff_d));
            list.Add(string.Format(""));


            list.Add(string.Format("Permissible Shear Stress, Ƭc = Ks x 0.45 x √fck"));
            list.Add(string.Format(""));

            double Ks = 0.5 + (P2 / P1);
            if (Ks > 1.0)
            {
                list.Add(string.Format("Ks = 0.5 + (p2 / p1) = 0.5 + ({0:f3} / {1:f3}) = {2:f3} > 1", P2, P1, Ks));
                //list.Add(string.Format("Condition, Ks <= 1, So, take Ks = 1"));
                //list.Add(string.Format("Condition, Ks >= 1, So, take Ks = 1"));
                Ks = 1.0;
            }
            else
                list.Add(string.Format("Ks = 0.5 + (p2 / p1) = 0.5 + ({0:f3} / {1:f3}) = {2:f3} < 1", P2, P1, Ks));

            list.Add(string.Format("Condition, Ks <= 1"));
            list.Add(string.Format(""));

            double tau_c1 = Ks * 0.45 * Math.Sqrt(fck);
            if (tau_c1 > tau_c)
            {
                list.Add(string.Format("Ƭc = Ks x 0.45 x √fck = {0:f3} x 0.45 x √{1} = {2:f3} N/Sq.mm. > {3:f3}", Ks, fck, tau_c1, tau_c));
            }
            else
            {
                list.Add(string.Format("Ƭc = Ks x 0.45 x √fck = {0:f3} x 0.45 x √{1} = {2:f3} N/Sq.mm. < {3:f3}", Ks, fck, tau_c1, tau_c));
            }
            list.Add(string.Format(""));

            //s = 397.09;

            double sd = ((D1 - D2) * Dp / s) + (D2 - d_dash);
            //list.Add(string.Format("s = {0:f3} = Effective Depth at a distance ‘d’ from face of Pedestal,", s));
            list.Add(string.Format("Effective Depth at a distance ‘d’ from face of Pedestal, = sd", s));
            list.Add(string.Format(""));
            list.Add(string.Format("sd = ((D1 - D2) * Dp / s) + (D2 - d')"));
            list.Add(string.Format("   = (({0:f3} - {1:f3}) * {2:f3} / {3:f3}) + ({1:f3} - {4:f3})", D1, D2, Dp, s, d_dash));

            double min_sr = (0.25 / 100) * s * 1000;
            list.Add(string.Format("Minimum Steel reinforcement >= (0.25 / 100) x s x 1000"));
            list.Add(string.Format("                             = 0.0025 x {0:f3} x 1000", s));
            list.Add(string.Format("                             = {0:f3} Sq.mm.", min_sr));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double da = ((D1 - d_dash) + (D2 - d_dash)) / 2;
            list.Add(string.Format("Average Effective Depth = da = [(D1 - d’) + (D2 - d’)] / 2"));
            list.Add(string.Format("                             = [({0} - {1}) + ({2} - {1})] / 2", D1, d_dash, D2));
            list.Add(string.Format("                             = {0:f3} mm", da));
            list.Add(string.Format(""));
            double con_min_st = (0.12 / 100) * da * 1000;
            list.Add(string.Format("Condition for minimum Steel    >= (0.12 / 100) x da x 1000"));
            list.Add(string.Format("                               >= (0.12 / 100) x {0} x 1000", da));
            list.Add(string.Format("                               >= {0:f3} Sq.mm.", con_min_st));
            list.Add(string.Format(""));
            list.Add(string.Format("Let us provide Reinforcement Y'12 @ 110mm c/c"));
            list.Add(string.Format(""));

            double spcng = 110.0;
            double Ast_prov = (Math.PI * bar_dia * bar_dia / 4) * (1000.0 / spcng); ;
            list.Add(string.Format("Ast Provided = (3.1416 x {0} x {0} / 4) x (1000 / {1}) = {2:f3} Sq.mm.", bar_dia, bar_dia, spcng));
            list.Add(string.Format(""));
            list.Add(string.Format("Mx = {0:f3} KNm", Mx1));

            list.Add(string.Format("Mx / m = {0:f3} KN.m/m", bm1));
            list.Add(string.Format("Vx (Bond) / m = {0:f3} KN/m", Vx));
            list.Add(string.Format("Vx (1 -1) / m = {0:f3} KN/m", _Vx_1_1_a));
            list.Add(string.Format(""));


            double _My_m = My;

            My = _My_m * P2;
            list.Add(string.Format("My = {0:f3} KNm", My));
            list.Add(string.Format("My / m = {0:f3} KNm / m", _My_m));
            list.Add(string.Format("Vy (Bond) / m = {0:f3} KN / m", Vy));
            list.Add(string.Format("Vy (2 - 2) / m = {0:f3} KN/m", _Vy_2_2_b));
            list.Add(string.Format(""));


            double Mtotal = Math.Max(Mx1, My);
            if (Mx1 > My)
            {
                list.Add(string.Format("Mx > My"));
                list.Add(string.Format(""));
                list.Add(string.Format("Therefore, Mtotal = Mx = {0:f3} KNm", Mtotal));
            }
            else
            {
                list.Add(string.Format("My > Mx"));
                list.Add(string.Format(""));
                list.Add(string.Format("Therefore, Mtotal = My = {0:f3} KNm", Mtotal));
            }


            d = D;
            b = P1 * 1000;
            double j = 0.94;



            list.Add(string.Format("d = {0} mm", d));
            list.Add(string.Format("b = p1 = {0} mm", b));
            list.Add(string.Format("j = {0:f3}", j));
            list.Add(string.Format(""));

            double Vtot = Math.Max(Vx, Vy);
            list.Add(string.Format("Vtot = Max of Vx/m & Vy/m = {0:f3} KN/m", Vtot));
            list.Add(string.Format(""));

            double Ast_req = (Mtotal * 1000 * 1000) / (0.87 * j * d * fy);
            list.Add(string.Format("Required Ast = (Mtotal x 1000 x 1000) / (0.87 x j x d x fy)"));
            list.Add(string.Format("             = ({0:f3} x 1000 x 1000) / (0.87 x {1:f3} x {2} x {3})", Mtotal, j, d, fy));
            list.Add(string.Format("             = {0:f3} Sq.mm.", Ast_req));
            list.Add(string.Format(""));

            double bar_dia2 = 16;
            double spcng2 = 130;

            Ast_prov = (Math.PI * bar_dia2 * bar_dia2 / 4) * (1000 / spcng2);
            list.Add(string.Format("Provide Y'{0} @ {1} mm c/c", bar_dia2, spcng2));
            list.Add(string.Format("Ast provided = (3.1416 x {0} x {0} / 4) x (1000 / {1})", bar_dia2, spcng2));
            list.Add(string.Format("             = {0:f3} Sq.mm.", Ast_prov));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("CHECK FOR BOND :"));
            list.Add(string.Format("----------------"));
            list.Add(string.Format(""));

            j = 1 - ((Ast_prov * fy) / (fck * b * d));
            list.Add(string.Format("j = 1 - [(Ast x fy) / (fck x b x d)]"));
            list.Add(string.Format("  = 1 - [({0:f3} x {1}) / ({2} x {3} x {4})]", Ast_prov, fy, fck, b, d));
            //list.Add(string.Format("  = 1 - 0.0637"));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));

            double M_V = (Ast_prov * 0.87 * fy * j * d) / (Vtot * 1000);
            list.Add(string.Format("    M/V = (Ast x 0.87 x fy x j x d) / (Vtot x 1000)"));
            list.Add(string.Format("        = {0:f3} x 0.87 x {1} x {2:f3} x {3} / ({4:f3} x 1000)", Ast_prov, fy, j, d, Vtot));
            list.Add(string.Format("        = {0:f3} mm", M_V));
            list.Add(string.Format(""));

            double Lo = d / 2;
            list.Add(string.Format("Lo = d / 2 = {0} / 2 = {1} mm.", d, Lo));
            list.Add(string.Format(""));

            val1 = M_V + Lo;
            list.Add(string.Format("(M / V) + Lo = {0:f3} + {1} = {2:f3} mm", M_V, Lo, val1));
            list.Add(string.Format(""));

            double Ld = 47 * bar_dia2;
            list.Add(string.Format("Development Length = Ld = 47 x Bar_dia"));
            list.Add(string.Format("                        = 47 x {0} ", bar_dia2));
            if (Ld < val1)
                list.Add(string.Format("                        = {0:f3} mm < {1:f3} mm, OK", Ld, val1));
            else
                list.Add(string.Format("                        = {0:f3} mm > {1:f3} mm, NOT OK", Ld, val1));
            list.Add(string.Format(""));


            D = D1;
            double dp = ph;
            list.Add(string.Format("Overall depth of Footing = D = {0} mm", D));
            list.Add(string.Format("Providing depth of Pedestal = dp = {0} mm", dp));


            double tot_dep = D + dp;
            list.Add(string.Format("Total Overall depth of Footing + Pedestal = D + dp = {0} + {1} = {2} mm", D, dp, tot_dep));
            list.Add(string.Format(""));
            list.Add(string.Format("Pedestal Reinforcement"));
            list.Add(string.Format(""));

            Ast_req = (0.12 / 1000) * P1 * 1000 * P2 * 1000;
            list.Add(string.Format("Area of Steel required = (0.12 / 1000) x p1 x p2"));
            list.Add(string.Format("                       = (0.12 / 1000) x {0} x {1}", P1, P2));
            list.Add(string.Format("                       = {0:f3} Sq.mm.", Ast_req));
            list.Add(string.Format(""));
            double bar_dia3 = 8;
            double bar_nos = 10;
            list.Add(string.Format("Provide {0} nos Y'{1} bars.", bar_nos, bar_dia3));

            Ast_prov = bar_nos * (Math.PI * bar_dia3 * bar_dia3 / 4.0);
            list.Add(string.Format("Ast Provided = (3.1416 X {0} X {0} / 4) X {1} = {2:f3} Sq.mm.", bar_dia3, bar_nos, Ast_prov));
            list.Add(string.Format(""));


            if (Report_File != "")
                File.WriteAllLines(Report_File, list.ToArray());




        }
        public bool IS_DESIGN_OK { get; set; }

        public double bar_dia1 = 0.0;
        public double bar_dia2 = 0.0;
        public double bar_spc1 = 0.0;
        public double bar_spc2 = 0.0;

        public List<string> Design_Summary { get; set; }
        public List<string> BOQ_Summary { get; set; }
        public List<string> Design_Program_Loop(int step)
        {
            BOQ = new ISO_Foundation_BOQ();
            BOQ.ColumnNos = ColumnNo;
            List<string> list = new List<string>();

            IS_DESIGN_OK = true;

            Design_Summary = new List<string>();

            #region TechSOFT Banner
            //list.Add("");
            //list.Add("");
            //list.Add("\t\t**********************************************");
            //list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            //list.Add("\t\t*      TechSOFT Engineering Services         *");
            //list.Add("\t\t*                                            *");
            //list.Add("\t\t*      DESIGN OF ISOLATED RCC FOOTING        *");
            //list.Add("\t\t*                                            *");
            //list.Add("\t\t**********************************************");
            //list.Add("\t\t----------------------------------------------");
            //list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            //list.Add("\t\t----------------------------------------------");
            #endregion TechSOFT Banner

            //list.Add(string.Format("Design of Isolated RCC Footing"));



            //P = 853.031;
            //Mx = 29.978;
            //C1 = 0.3;
            //C2 = 0.6;
            //l = 2.8;
            //b = 2.8;
            //h = 1.2;
            //alpha_br = 150;
            //P1 = 0.900;
            //P2 = 0.60;
            //gamma_c = 24;
            //gamma_s = 16;
            //fck = 20;
            //fy = 415;
            //bar_dia = 12;



            list.Add(string.Format("--------------------------------------------------------"));
            list.Add(string.Format("FOUNDATION {0} : Design Input Data for Column {1}", step, ColumnNo));
            list.Add(string.Format("--------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Design Data from Analysis"));
            list.Add(string.Format("--------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Vertical Load at the base = P = {0:f3} KN", P));
            list.Add(string.Format("Bending Moment at the base = Mx = {0:f3} KN-m", Mx));
            list.Add(string.Format(""));
            list.Add(string.Format("User’s Data:"));
            list.Add(string.Format("-------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Size of Column =  C1 x C2 = {0:f3} x {1:f3} Sq.m.", C1, C2));
            list.Add(string.Format(""));
            BOQ.Footing_Base_L1 = l;
            BOQ.Footing_Base_B1 = b;
            list.Add(string.Format("Size of Foundation/Footing = l x b = {0:f3} x {1:f3} Sq.m.", l, b));
            list.Add(string.Format(""));
            BOQ.Pedestal_L2 = P1;
            BOQ.Pedestal_B2 = P2;
            list.Add(string.Format("Size of Pedestal = P1 x P2 = {0:f3} x {1:f3} Sq.m.", P1, P2));
            list.Add(string.Format(""));
            BOQ.Pedestal_H2 = ph / 1000;
            list.Add(string.Format("Height of Pedestal = ph = {0} mm", ph));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall depth at the edge of Pedestal = D2 = {0} mm", D2));
            BOQ.Footing_Base_H1 = h;
            BOQ.Footing_Tapper_Height = D2 / 1000;
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Depth of Overburden Soil = h = {0:f3}m", h));
            list.Add(string.Format("Bearing Capacity of Soil = αbr = {0:f3} KN/Sq.m.", alpha_br));
            list.Add(string.Format("Unit weight of Concrete = γc = {0} KN/Cu.m ", gamma_c));
            list.Add(string.Format("Unit weight of Soil  = γs = {0} KN/Cu.m ", gamma_s));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bars"));
            list.Add(string.Format("Diameter of Bars  = d1 = {0} mm,  Spacing = s1 = {1} mm", bar_dia1, bar_spc1));
            list.Add(string.Format(""));
            list.Add(string.Format("Transverse Reinforcement Bars", bar_dia));
            list.Add(string.Format("Diameter of Bars = d2 = {0} mm,  Spacing = s2 = {1} mm", bar_dia2, bar_spc2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #region STEP 1 : DESIGN CALCULATIONS
            //list.Add(string.Format("STEP {0}.1 : Design Calculations ", step, ColumnNo));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format("STEP 1 : DESIGN CALCULATIONS ", step, ColumnNo));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format(""));

            double A = l * b;
            list.Add(string.Format("Area of Footing = A = l x b = {0} x {1} = {2:f3} Sq.m.", l, b, A));
            list.Add(string.Format(""));

            double p1 = P / A;
            list.Add(string.Format("Pressure on Soil for Axial Vertical Load = p1 = P/A "));
            list.Add(string.Format("                                              = {0:f3} / {1:f3}", P, A));
            list.Add(string.Format("                                              = {0:f3} KN/Sq.m.", p1));
            list.Add(string.Format(""));

            double alpha_sbr = alpha_br - (gamma_c - gamma_s) * h;
            list.Add(string.Format("Safe Bending Capacity = αsbr = αbr - (γc - γs) x h"));
            list.Add(string.Format("                             = {0} - ({1} - {2}) x {3}", alpha_br, gamma_c, gamma_s, h));
            list.Add(string.Format("                             = {0:f3} KN/Sq.m.", alpha_sbr));
            list.Add(string.Format(""));

            double W = 40 * P * h / alpha_sbr;
            list.Add(string.Format("Wt. of Soil Overburden = W = 40 x P x h / αsbr"));
            list.Add(string.Format("                           = 40 x {0:f3} x {1:f3} / {2:f3}", P, h, alpha_sbr));
            list.Add(string.Format("                           = {0:f3} KN", W));
            list.Add(string.Format(""));

            double e = Mx / (P + W);
            list.Add(string.Format("Eccentricity = e = Mx / (P + W)"));
            list.Add(string.Format("                 = {0:f3} / ({1:f3} + {2:f3})", Mx, P, W));
            list.Add(string.Format("                 = {0:f3} m.", e));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Pressure on Soil at depth = h = {0:f3}m", h));
            double p2 = (P + W) * (1 + 6 * e / l) / (b * l);
            list.Add(string.Format(""));
            list.Add(string.Format("  p2 = (P + W) x (1 + 6 x e / l) / (b x l)"));
            list.Add(string.Format("     = ({0:f3} + {1:f3}) x (1 + 6 x {2:f3} / {3:f3}) / ({4:f3} x {3:f3})", P, W, e, l, b));
            //list.Add(string.Format("     = (1173.991 x 1.0557 / (2.8 x 2.8)"));
            list.Add(string.Format("     = {0:f3} KN/Sq.m.", p2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            list.Add(string.Format("Pressure due to overburden Soil"));
            list.Add(string.Format(""));

            double p3 = W / (b * l);
            list.Add(string.Format("p3 = W / (b x l) = {0:f3} / ({1:f3} x {2:f3}) = {3:f3} KN/Sq.m.", W, b, l, p3));
            list.Add(string.Format(""));

            double p4 = p2 - p3;
            list.Add(string.Format("Therefore additional imposed pressure  = p4 = p2 - p3"));
            list.Add(string.Format("                                            = {0:f3} - {1:f3}", p2, p3));
            list.Add(string.Format("                                            = {0:f3} KN/Sq.m.", p4));
            list.Add(string.Format(""));

            double val1 = 1.25 * p1;
            if (val1 > p4)
            {
                list.Add(string.Format("1.25 x p1 = 1.25 x {0:f3} = {1:f3} KN/Sq.m. > p4 = {2:f3} KN/Sq.m.", p1, val1, p4));
                list.Add(string.Format(""));
                list.Add(string.Format("Here, 1.25 x p1 > (p2 - p3) the size of Footing is OK, and"));
                list.Add(string.Format("The design will be done by neglecting the effect of Bending Moment and as axially loaded only."));

            }
            else
            {
                list.Add(string.Format("1.25 x p1 = 1.25 x {0:f3} = {1:f3} KN/Sq.m. < p4 = {2:f3} KN/Sq.m.", p1, val1, p4));
                list.Add(string.Format(""));
                list.Add(string.Format("Here, 1.25 x p1 < (p2 - p3) the size of Footing was to be increased,"));
            }
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            list.Add(string.Format("Axial Load = P = {0:f3} KN", P));

            val1 = P * 0.1;
            list.Add(string.Format("Additional 10% of P = {0:f3} KN", val1));

            double P_total = P + val1;
            list.Add(string.Format("Total Design Load = {0:f3} + {1:f3} = {2:f3} KN.", P, val1, P_total));
            list.Add(string.Format(""));


            double req_area = P_total / alpha_sbr;
            list.Add(string.Format("Required Area for Footing = {0:f3} / αsbr", P_total));
            list.Add(string.Format("                          = {0:f3} / {1:f3}", P_total, alpha_sbr));
            list.Add(string.Format("                          = {0:f3} Sq.m.", req_area));
            list.Add(string.Format(""));

            double Pu = P * 1.5;
            list.Add(string.Format("Ultimate Load = Pu = {0:f3} x 1.5 = {1:f3} KN", P, Pu));
            list.Add(string.Format(""));

            double pu = Pu / A;
            list.Add(string.Format("Ultimate Pressure = pu = Pu / A"));
            list.Add(string.Format("                       = {0:f3} / {1:f3}", Pu, A));
            list.Add(string.Format("                       = {0:f3} KN/Sq.m.", pu));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            list.Add(string.Format(""));
            list.Add(string.Format("         Section at distance ‘d’ from pedestal [1-1]"));
            list.Add(string.Format("           Section at face of pedestal [3-3]     |     "));
            list.Add(string.Format("          |---------|--------------------|-------|----|"));
            list.Add(string.Format("          |         |                    |       |    |"));
            list.Add(string.Format("          |         |                    |       |    |"));
            list.Add(string.Format("          |         |                    |       |    |"));
            list.Add(string.Format("          |         |         p2         |       |    |"));
            list.Add(string.Format("          |         |--------------------|       |    |"));
            list.Add(string.Format("          |         |         c2         |       |    |"));
            list.Add(string.Format("          |         |     |--------|     |       |    |"));
            list.Add(string.Format("       b  |       p1|  c1 |        |     |       |    |"));
            list.Add(string.Format("          |         |     | Column |     |       |    |"));
            list.Add(string.Format("          |         |     |        |     |       |    |"));
            list.Add(string.Format("          |         |     |--------|     |       |    |"));
            list.Add(string.Format("          |         |      Pedestal      |       |    |"));
            list.Add(string.Format("          |         |--------------------|       |    |"));
            list.Add(string.Format("          |               Footing        |       |    | Section [2-2] at distance ‘d’ from pedestal "));
            list.Add(string.Format("   [2]----|------------------------------|-------|----|--------[2]"));
            list.Add(string.Format("          |                              |       |    |"));
            list.Add(string.Format("          |______________________________|_______|____|"));
            list.Add(string.Format("                 <--- l --->             |       |"));
            list.Add(string.Format("                                        [3]     [1]"));
            list.Add(string.Format("                                           "));
            list.Add(string.Format("                   Fig. 1"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment at the face of pedestal Section [3 - 3]"));
            list.Add(string.Format(""));

            double Mx1 = pu * (l - P2) / 2 * b * (l - P2) / (2 * 2);
            list.Add(string.Format("    Mx = pu x (l - P2) / 2 x b x (l - P2) / (2 x 2)"));
            list.Add(string.Format("       = {0:f3} x ({1:f3} - {2:f3}) / 2 x {3:f3} x ({1:f3} - {2:f3}) / 4", pu, l, P2, b));
            list.Add(string.Format("       = {0:f3} KN.m", Mx1));
            list.Add(string.Format(""));

            double bm1 = Mx1 / P1;
            list.Add(string.Format("Bending Moment per metre Length at the face of pedestal"));
            list.Add(string.Format(" = Mx / P1 = {0:f3} / {1:f3} = {2:f3} KN.m/m", Mx1, P1, bm1));
            list.Add(string.Format(""));

            double Vx = pu * ((l - P2) / 2) * (l / l);
            list.Add(string.Format("Shear Force at the face of pedestal = Vx (Bond) / metre "));
            list.Add(string.Format("                                    = pu x [(l - P2) / 2] x (l / l)"));
            list.Add(string.Format("                                    = {0:f3} x [({1:f3} - {2:f3}) / 2] x ({1:f3} / {1:f3})", pu, l, P2));
            list.Add(string.Format("                                    = {0:f3} KN/m", Vx));
            list.Add(string.Format(""));

            double My = (pu / (2 * P2)) * (b - P1) * l * (b - P1) / (2 * 2);
            list.Add(string.Format("Bending Moment per metre Length at the face of pedestal"));
            list.Add(string.Format(""));
            list.Add(string.Format("    My = [pu / (2 x P2)] x (b - P1) x l x (b - P1) / (2 x 2)"));
            list.Add(string.Format("       = [{0:f3} / (2 x {1:f3})] x ({2:f3} - {3:f3}) x {4:f3} x ({2:f3} - {3:f3}) / 4", pu, P2, b, P1, l));
            list.Add(string.Format("       = {0:f3} KN.m/m", My));
            list.Add(string.Format(""));

            double Vy = pu * ((b - P1) / 2) * (l / l);
            list.Add(string.Format("Shear Force at the face of pedestal = Vy (Bond) / metre"));
            list.Add(string.Format("                                    = pu x [(b - P1) / 2] x (l / l)"));
            list.Add(string.Format("                                    = {0:f3} x [({1:f3} - {2:f3}) /2] x ({3:f3} / {3:f3})", pu, b, P1, l));
            list.Add(string.Format("                                    = {0:f3} KN/m", Vy));
            list.Add(string.Format(""));



            bool flag = false;
            //double D = 560.0;
            double d_dash = c + bar_dia / 2;
            double d = D - d_dash;
            double _a, _b, _Vx_1_1, _Vx_1_1_a, _Vy_2_2, _Vy_2_2_b, Mmax;

            double d1, Vmax, tau_c, d2, _d;
            string kStr = "";


            double D1 = D;
            //D2 = 300.0;

            double D_dash, D3, eff_d;


            List<string> trial_text = new List<string>();


            int cn = 0;
            do
            {
                #region Trial

                //D1 = D;
                d_dash = c + bar_dia / 2;
                d = D1 - d_dash;

                trial_text.Clear();


                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Let us assume an overall depth = D = {0} mm", D1));
                trial_text.Add(string.Format("Considering, Cover + Half of Bar Dia = d’ = {0} mm", d_dash));


                trial_text.Add(string.Format("Effective depth = D-d’ = d = {0} mm", d));
                trial_text.Add(string.Format(""));
                d = d / 1000;
                _a = P1 + ((b - P1) / 2) * (d) * 2 / ((l - P2) / 2);
                trial_text.Add(string.Format(" a = P1 + [(b - P1) / 2] x d  x 2/ [(l - P2) / 2]"));
                trial_text.Add(string.Format("   = {0:f3} + [({1:f3} - {2:f3}) /2] x {3:f3} x 2 / [({4:f3} - {5:f3}) / 2]", P1, b, P1, d, l, P2));
                trial_text.Add(string.Format("   = {0:f3} m", _a));
                trial_text.Add(string.Format(""));

                _b = P2 + ((l - P2) / 2) * d * 2.0 / ((b - P1) / 2.0);
                trial_text.Add(string.Format(" b = P2 + [(l - P2) / 2] x d x 2 / [(b - P1) / 2]"));
                trial_text.Add(string.Format("   = {0:f3} + [({1:f3} - {2:f3}) /2] x {3:f3} x 2 / [({4:f3} - {5:f3}) / 2]", P2, l, P2, d, b, P1));
                trial_text.Add(string.Format("   = {0:f3} m", _b));
                trial_text.Add(string.Format(""));

                _Vx_1_1 = pu * (((l - P2) / 2) - d) * b;
                trial_text.Add(string.Format("Vx (1 - 1) = pu x [[(l - P2) / 2] - d] x b"));
                trial_text.Add(string.Format("           = {0:f3} x [[({1:f3} - {2:f3}) / 2] - {3:f3}] x {4:f3}", pu, l, P2, d, b));
                trial_text.Add(string.Format("           = {0:f3} KN", _Vx_1_1));
                trial_text.Add(string.Format(""));
                _Vx_1_1_a = _Vx_1_1 / _a;
                trial_text.Add(string.Format("Vx (1 -1) / metre = Vx (1 - 1) / a = {0:f3} / {1:f3} = {2:f3} KN/m", _Vx_1_1, _a, _Vx_1_1_a));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Similarly,"));

                _Vy_2_2 = pu * (((b - P1) / 2) - d) * l;
                trial_text.Add(string.Format("Vy (2 - 2) = pu x [[(b - P1) / 2] - d] x l"));
                trial_text.Add(string.Format("           = {0:f3} x [[({1:f3} - {2:f3}) / 2] - {3:f3}] x {4:f3}", pu, b, P1, d, l));
                trial_text.Add(string.Format("           = {0:f3} KN", _Vy_2_2));
                trial_text.Add(string.Format(""));

                _Vy_2_2_b = _Vy_2_2 / _b;
                trial_text.Add(string.Format("Vy (2 -2) / metre = Vy (2 - 2) / b = {0:f3} / {1:f3} = {2:f3} KN/m", _Vy_2_2, _b, _Vy_2_2_b));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Required depth of footing considering maximum Bending Moments,"));
                trial_text.Add(string.Format(""));


                trial_text.Add(string.Format("Mx = {0:f3} KNm and My = {1:f3} KNm", Mx1, My));
                trial_text.Add(string.Format(""));

                Mmax = Math.Max(Mx1, My);
                trial_text.Add(string.Format("Therefore Mmax = {0:f3} KNm", Mmax));
                trial_text.Add(string.Format(""));


                d1 = Math.Sqrt((Mmax * 1000000 / (0.138 * fck * 1000)));
                trial_text.Add(string.Format("   d1 >= √[Mmax x 10^6 / (0.138 x fck x b)]"));
                trial_text.Add(string.Format("       = √[{0:f3} x 10^6 / (0.138 x {1} x 1000)]", Mmax, fck));
                trial_text.Add(string.Format("       = {0:f3} mm", d1));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Required depth of footing Considering maximum Shear Force,"));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Vx (1 - 1) / metre = {0:f3} KN/m", _Vx_1_1_a));
                trial_text.Add(string.Format("Vy (2 - 2) / metre = {0:f3} KN/m", _Vy_2_2_b));
                trial_text.Add(string.Format(""));

                Vmax = Math.Max(_Vx_1_1_a, _Vy_2_2_b);
                trial_text.Add(string.Format("Therefore, Vmax = {0:f3} KN/m", Vmax));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("d2 >= Vmax x 10^3 / (Ƭc x 1000)"));
                trial_text.Add(string.Format(""));


                //tau_c = Tables.Permissible_Shear_Stress(0.25, (int)fck, ref kStr);
                tau_c = 0.36;
                trial_text.Add(string.Format("For minimum required Steel reinforcement of 0.25%, Corresponding Ƭc = {0:f3} N/Sq.mm.", tau_c));
                //trial_text.Add(string.Format("d2 >= 155.44 x 1000 / (0.36 x 1000) = 431.78 mm"));
                d2 = Vmax * 1000 / (tau_c * 1000);
                trial_text.Add(string.Format("d2 >= {0:f3} x 1000 / ({1:f3} x 1000) = {2:f3} mm", Vmax, tau_c, d2));
                trial_text.Add(string.Format(""));


                _d = Math.Max(d1, d2);
                trial_text.Add(string.Format("Required effective depth is maximum of d1 & d2 = d = {0:f3} mm", _d));

                //_d = (int)(_d / 100.0);

                //_d = _d + 1;

                //_d = _d * 100;
                trial_text.Add(string.Format("Let us provide overall depth of footing at the face of Pedestal = D = {0} mm", d * 1000));
                trial_text.Add(string.Format(""));


                trial_text.Add(string.Format("Overall depth at the face of pedestal = D1 = {0} mm", D1));
                trial_text.Add(string.Format("Overall depth at the edge of footing = D2 = {0} mm", D2));


                //D_dash = (2.8 - 0.6);

                //decimal wd = ((2.80 - 0.60) / 2.0);
                //float f1 = 2.8f;
                //float f2 = 0.6f;

                //float f3 = f1 - f2;

                D_dash = (l - P2) / 2.0;
                trial_text.Add(string.Format("Distance from face of pedestal to edge of footing = D’"));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format(" D’ = (l - P2) / 2"));
                trial_text.Add(string.Format("    = ({0:f3} - {1:f3}) / 2", l, P2));
                trial_text.Add(string.Format("    = {0:f3} m", D_dash));
                D_dash = D_dash * 1000.0;
                trial_text.Add(string.Format("    = {0:f3} mm", D_dash));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Required Overall depth at a distance = D = {0}mm for face of Pedestal = D3", D));
                //trial_text.Add(string.Format("=D3"));
                trial_text.Add(string.Format(""));


                //D3 = D2 + ((D1 - D2) * (((l - P2) * 1000 / 2) - D_dash) / ((l - P2) * 1000 / 2));
                D3 = D2 + ((D1 - D2) * (P2 * 1000) / D_dash);
                trial_text.Add(string.Format("D3 = D2 + ((D1 - D2) * (P2 * 1000) / D'"));
                trial_text.Add(string.Format("   = {0:f3} + ({1:f3} - {0:f3}) x {2:f3}  / {3:f3}", D2, D1, p2 * 1000, D_dash));
                trial_text.Add(string.Format("   = {0:f3} mm", D3));

                //trial_text.Add(string.Format("D3 = D2 + [(D1- D2) x [p2 x 1000] / [(l - p2) x 1000 / 2]]"));
                //trial_text.Add(string.Format("   = {0:f3} + ({1:f3} - {0:f3}) x {2:f3}  / {3:f3}", D2, D1, (((l - p2) * 1000 / 2) - D_dash), ((l - p2) * 1000 / 2)));
                //trial_text.Add(string.Format("   = {0:f3} mm", D3));

                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Considering Cover + Half of Bar Dia = d’ = {0} mm", d_dash));
                trial_text.Add(string.Format(""));

                eff_d = D3 - d_dash;
                trial_text.Add(string.Format("Effective depth = D3 - d’"));
                trial_text.Add(string.Format("                = {0:f3} - {1}", D3, d_dash));
                if (eff_d <= _d)
                {
                    trial_text.Add(string.Format("                = {0:f3} mm <= d = {1:f3} mm,   NOT OK.", eff_d, _d));
                    D1 += 20;
                    if (cn == 0)
                        list.AddRange(trial_text);

                    if (D1 > 1000)
                    {
                        list.Add(string.Format("Tried foundation thickness upto 1000mm, with a Trial increment of 20 mm"));
                        list.Add(string.Format("but found 'NOT OK' terminating the Design user has to modify the input data.."));
                        list.Add(string.Format(""));


                        if (Report_File != "")
                            File.WriteAllLines(Report_File, list.ToArray());



                        return list;
                    }
                    flag = true;
                }
                else
                {
                    flag = false;
                    trial_text.Add(string.Format("                = {0:f3} mm > d = {1:f3} mm,   OK.", eff_d, _d));
                }
                trial_text.Add(string.Format(""));

                cn++;
                #endregion Trial
            }
            while (flag);
            list.AddRange(trial_text);

            list.Add(string.Format("So, provide footing of size = l x b = {0:f3}m x {1:f3}m ", l, b));
            list.Add(string.Format(""));
            list.Add(string.Format("and Overall depth at the face of Pedestal = D’ = {0:f3} mm", D_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("and at the edge = D2 = {0:f3} mm.", D2));


            //double P1 = 0.9;
            //double P2 = 0.6;
            //ph = 0.25;
            list.Add(string.Format("Also, the Pedestal of size = p1 x p2 = {0} mm x {1} mm", P1 * 1000, P2 * 1000));
            list.Add(string.Format("and height of Pedestal as {0}mm.", ph));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Cross Sectional Area of Pedestal"));
            list.Add(string.Format(""));

            double A2 = 4 * C1 * C2;
            list.Add(string.Format("   A1 <= 4 x (Cross Sectional Area of Column = A2)"));
            list.Add(string.Format("      <= 4 x {0:f3} x {1:f3}", C1, C2));
            list.Add(string.Format("      <= {0:f3} Sq.m.", A2));
            list.Add(string.Format(""));


            double A1 = P1 * P2;
            if (A1 < A2)
                list.Add(string.Format("Therefore, A1 = p1 x p2 = {0:f3} x {1:f3} = {2:f3} < {3:f3} Sq.m., OK", P1, P2, A1, A2));
            else
                list.Add(string.Format("Therefore, A1 = p1 x p2 = {0:f3} x {1:f3} = {2:f3} > {3:f3} Sq.m., NOT OK", P1, P2, A1, A2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double alpha_cbr = 0.45 * fck * Math.Sqrt(A1 / A2);
            list.Add(string.Format("Now, αcbr = 0.45 x fck x √(A1 / A2)"));
            list.Add(string.Format("           = 0.45 x {0} x √({1:f3} / {2:f3})", fck, A1, A2));
            list.Add(string.Format("           = {0:f3} N/Sq.mm.", alpha_cbr));
            list.Add(string.Format(""));

            double abrs = (P * 1000 * 1.5) / (C1 * 1000 * C2 * 1000);
            list.Add(string.Format("Actual Bearing Stress = (P x 1000 x 1.5) / (C1 x 1000 x C2 x 1000)"));
            list.Add(string.Format("                      = ({0:f3} x 1000 x 1.5) / ({1:f3} x 1000 x {2:f3} x 1000)", P, C1, C2));
            list.Add(string.Format(""));
            if (abrs < alpha_cbr)
                list.Add(string.Format("                      = {0:f3} N/Sq.mm. < αcbr = {1:f3} N/Sq.mm., OK.", abrs, alpha_cbr));
            else
                list.Add(string.Format("                      = {0:f3} N/Sq.mm. > αcbr = {1:f3} N/Sq.mm., NOT OK.", abrs, alpha_cbr));


            list.Add(string.Format(""));
            list.Add(string.Format(""));


            #endregion STEP 1 : DESIGN CALCULATIONS

            #region STEP 2 : PUNCHING SHEAR FORCE


            list.Add(string.Format("---------------------------------------"));
            //list.Add(string.Format("STEP {0}.2 : PUNCHING SHEAR FORCE :", step));
            list.Add(string.Format("STEP 2 : PUNCHING SHEAR FORCE", step));
            list.Add(string.Format("---------------------------------------"));
            list.Add(string.Format(""));


            double Vp = P * 1.5 - (P1 + D_dash / 1000) * (P2 + D_dash / 1000) * pu;
            list.Add(string.Format("  Vp = P x 1.5 - (p1 + d) x (p2 + d) x pu"));
            //list.Add(string.Format("     = 853.051 x 1.5 - (0.9 + 0.56) x (0.6 + 0.56) x 163.21"));
            list.Add(string.Format("     = {0:f3} x 1.5 - ({1:f3} + {2:f3}) x ({3:f3} + {2:f3}) x {4:f3}", P, P1, D_dash / 1000, P2, pu));
            //list.Add(string.Format("     = 1279.577 - 276.412"));
            list.Add(string.Format("     = {0:f3} KN", Vp));
            list.Add(string.Format(""));
            list.Add(string.Format("D1 = Overall depth at the face of Pedestal = {0} mm", D1));
            list.Add(string.Format("D2 = Overall depth at the edge of Footing = {0} mm,", D2));
            list.Add(string.Format(""));

            double s = D_dash;
            list.Add(string.Format("Distance = s = {0} m = {0} mm", s / 1000, s));
            list.Add(string.Format(""));



            double ovr_d = D / 2;
            list.Add(string.Format("Overall depth of a distance = d / 2 = {0} / 2 = {1} mm from the face of Pedestal = Dp", D, ovr_d));
            list.Add(string.Format(""));
            double Dp = D2 + ((D1 - D2) * (s - ovr_d) / s);
            list.Add(string.Format("   Dp = D2 + [(D1 - D2) x (s -280) / s]"));
            list.Add(string.Format("      = {0} + [({1} - {0}) x ({2} - {3}) / {0}]", D2, D1, s, ovr_d));
            list.Add(string.Format("      = {0:f3} mm", Dp));
            list.Add(string.Format(""));
            list.Add(string.Format("Considering Cover + Half of Bar Dia = d’ = {0} mm", d_dash));

            eff_d = Dp - d_dash;
            list.Add(string.Format("Effective Depth = Dp - d’"));
            list.Add(string.Format("                = {0:f3} - {1}", Dp, d_dash));
            list.Add(string.Format("                = {0:f3} mm", eff_d));
            list.Add(string.Format(""));


            list.Add(string.Format("Permissible Shear Stress, Ƭc = Ks x 0.45 x √fck"));
            list.Add(string.Format(""));

            double Ks = 0.5 + (P2 / P1);
            if (Ks > 1.0)
            {
                list.Add(string.Format("Ks = 0.5 + (p2 / p1) = 0.5 + ({0:f3} / {1:f3}) = {2:f3} > 1", P2, P1, Ks));
                //list.Add(string.Format("Condition, Ks <= 1, So, take Ks = 1"));
                //list.Add(string.Format("Condition, Ks >= 1, So, take Ks = 1"));
                Ks = 1.0;
            }
            else
                list.Add(string.Format("Ks = 0.5 + (p2 / p1) = 0.5 + ({0:f3} / {1:f3}) = {2:f3} < 1", P2, P1, Ks));

            list.Add(string.Format("Condition, Ks <= 1"));
            list.Add(string.Format(""));

            double tau_c1 = Ks * 0.45 * Math.Sqrt(fck);
            if (tau_c1 > tau_c)
            {
                list.Add(string.Format("Ƭc = Ks x 0.45 x √fck = {0:f3} x 0.45 x √{1} = {2:f3} N/Sq.mm. > {3:f3}", Ks, fck, tau_c1, tau_c));
            }
            else
            {
                list.Add(string.Format("Ƭc = Ks x 0.45 x √fck = {0:f3} x 0.45 x √{1} = {2:f3} N/Sq.mm. < {3:f3}", Ks, fck, tau_c1, tau_c));
            }
            list.Add(string.Format(""));

            //s = 397.09;

            double sd = ((D1 - D2) * Dp / s) + (D2 - d_dash);
            //list.Add(string.Format("s = {0:f3} = Effective Depth at a distance ‘d’ from face of Pedestal,", s));
            list.Add(string.Format("Effective Depth at a distance ‘d’ from face of Pedestal, = sd", s));
            list.Add(string.Format(""));
            list.Add(string.Format("sd = ((D1 - D2) * Dp / s) + (D2 - d')"));
            list.Add(string.Format("   = (({0:f3} - {1:f3}) * {2:f3} / {3:f3}) + ({1:f3} - {4:f3})", D1, D2, Dp, s, d_dash));

            double min_sr = (0.25 / 100) * s * 1000;
            list.Add(string.Format("Minimum Steel reinforcement >= (0.25 / 100) x s x 1000"));
            list.Add(string.Format("                             = 0.0025 x {0:f3} x 1000", s));
            list.Add(string.Format("                             = {0:f3} Sq.mm.", min_sr));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double da = ((D1 - d_dash) + (D2 - d_dash)) / 2;
            list.Add(string.Format("Average Effective Depth = da = [(D1 - d’) + (D2 - d’)] / 2"));
            list.Add(string.Format("                             = [({0} - {1}) + ({2} - {1})] / 2", D1, d_dash, D2));
            list.Add(string.Format("                             = {0:f3} mm", da));
            list.Add(string.Format(""));
            double con_min_st = (0.12 / 100) * da * 1000;
            list.Add(string.Format("Condition for minimum Steel    >= (0.12 / 100) x da x 1000"));
            list.Add(string.Format("                               >= (0.12 / 100) x {0} x 1000", da));
            list.Add(string.Format("                               >= {0:f3} Sq.mm.", con_min_st));
            list.Add(string.Format(""));
            //Chiranjit comment [2015 04 05]
            //list.Add(string.Format("Let us provide Reinforcement Y'12 @ 110mm c/c"));
            list.Add(string.Format(""));

            double spcng = bar_spc1;
            double Ast_prov = (Math.PI * bar_dia * bar_dia / 4) * (1000.0 / spcng); ;
            list.Add(string.Format("Ast Provided = (3.1416 x {0} x {0} / 4) x (1000 / {1}) = {2:f3} Sq.mm.", bar_dia, spcng, Ast_prov));
            list.Add(string.Format(""));
            list.Add(string.Format("Mx = {0:f3} KNm", Mx1));

            list.Add(string.Format("Mx / m = {0:f3} KN.m/m", bm1));
            list.Add(string.Format("Vx (Bond) / m = {0:f3} KN/m", Vx));
            list.Add(string.Format("Vx (1 -1) / m = {0:f3} KN/m", _Vx_1_1_a));
            list.Add(string.Format(""));


            double _My_m = My;

            My = _My_m * P2;
            list.Add(string.Format("My = {0:f3} KNm", My));
            list.Add(string.Format("My / m = {0:f3} KNm / m", _My_m));
            list.Add(string.Format("Vy (Bond) / m = {0:f3} KN / m", Vy));
            list.Add(string.Format("Vy (2 - 2) / m = {0:f3} KN/m", _Vy_2_2_b));
            list.Add(string.Format(""));


            double Mtotal = Math.Max(Mx1, My);
            if (Mx1 > My)
            {
                list.Add(string.Format("Mx > My"));
                list.Add(string.Format(""));
                list.Add(string.Format("Therefore, Mtotal = Mx = {0:f3} KNm", Mtotal));
            }
            else
            {
                list.Add(string.Format("My > Mx"));
                list.Add(string.Format(""));
                list.Add(string.Format("Therefore, Mtotal = My = {0:f3} KNm", Mtotal));
            }


            d = D;
            b = P1 * 1000;
            double j = 0.94;
            j = 0.5 + Math.Pow((0.025 - (Mx * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);



            list.Add(string.Format("d = {0} mm", d));
            list.Add(string.Format("b = p1 = {0} mm", b));
            list.Add(string.Format("j = {0:f3}", j));
            list.Add(string.Format(""));

            double Vtot = Math.Max(Vx, Vy);
            list.Add(string.Format("Vtot = Max of Vx/m & Vy/m = {0:f3} KN/m", Vtot));
            list.Add(string.Format(""));

            double Ast_req = (Mtotal * 1000 * 1000) / (0.87 * j * d * fy);
            list.Add(string.Format("Required Ast = (Mtotal x 1000 x 1000) / (0.87 x j x d x fy)"));
            list.Add(string.Format("             = ({0:f3} x 1000 x 1000) / (0.87 x {1:f3} x {2} x {3})", Mtotal, j, d, fy));
            list.Add(string.Format("             = {0:f3} Sq.mm.", Ast_req));
            list.Add(string.Format(""));



            //double bar_dia2 = bar_dia;
            double spcng2 = bar_spc2;

            Ast_prov = (Math.PI * bar_dia * bar_dia / 4);

            //double bar_nos = (int)(Ast_req / Ast_prov);


            //double bar_nos = (int)(1000 / spcng2);
            double bar_nos = (int)(BOQ.Footing_Base_B1 * 1000 / spcng2);

            bar_nos += 1.0;

            //spcng2 = (1000.0 / bar_nos);

            Steel_Reinforcement ssr = new Steel_Reinforcement();
            ssr.BarMark = "F_AST[1]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = BOQ.Footing_Base_L1 - 2 * c / 1000;
            BOQ.Steel_Reinforcement.Add(ssr);



            bar_nos = (int)(BOQ.Footing_Base_L1 * 1000 / spcng2);
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "F_AST[2]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = BOQ.Footing_Base_B1 - 2 * c / 1000;
            BOQ.Steel_Reinforcement.Add(ssr);


            double Ast1 = 0;
            Ast_prov = (Math.PI * bar_dia * bar_dia / 4) * (1000 / spcng2);

            Ast1 = Ast_prov;

            list.Add(string.Format("Provide Y'{0} @ {1} mm c/c", bar_dia, spcng2));
            list.Add(string.Format("Ast provided = (3.1416 x {0} x {0} / 4) x (1000 / {1})", bar_dia2, spcng2));
            list.Add(string.Format("             = {0:f3} Sq.mm.", Ast_prov));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion STEP 2 : PUNCHING SHEAR FORCE

            #region STEP 3 : CHECK FOR BOND

            list.Add(string.Format("-----------------------------"));
            //list.Add(string.Format("STEP {0}.3 : CHECK FOR BOND :", step));
            list.Add(string.Format("STEP 3 : CHECK FOR BOND ", step));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format(""));

            j = 1 - ((Ast_prov * fy) / (fck * b * d));
            list.Add(string.Format("j = 1 - [(Ast x fy) / (fck x b x d)]"));
            list.Add(string.Format("  = 1 - [({0:f3} x {1}) / ({2} x {3} x {4})]", Ast_prov, fy, fck, b, d));
            //list.Add(string.Format("  = 1 - 0.0637"));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));

            double M_V = (Ast_prov * 0.87 * fy * j * d) / (Vtot * 1000);
            list.Add(string.Format("    M/V = (Ast x 0.87 x fy x j x d) / (Vtot x 1000)"));
            list.Add(string.Format("        = {0:f3} x 0.87 x {1} x {2:f3} x {3} / ({4:f3} x 1000)", Ast_prov, fy, j, d, Vtot));
            list.Add(string.Format("        = {0:f3} mm", M_V));
            list.Add(string.Format(""));

            double Lo = d / 2;
            list.Add(string.Format("Lo = d / 2 = {0} / 2 = {1} mm.", d, Lo));
            list.Add(string.Format(""));

            val1 = M_V + Lo;
            list.Add(string.Format("(M / V) + Lo = {0:f3} + {1} = {2:f3} mm", M_V, Lo, val1));
            list.Add(string.Format(""));

            double Ld = 47 * bar_dia2;
            list.Add(string.Format("Development Length = Ld = 47 x Bar_dia"));
            list.Add(string.Format("                        = 47 x {0} ", bar_dia2));
            if (Ld < val1)
                list.Add(string.Format("                        = {0:f3} mm < {1:f3} mm, OK", Ld, val1));
            else
                list.Add(string.Format("                        = {0:f3} mm > {1:f3} mm, NOT OK", Ld, val1));
            list.Add(string.Format(""));


            D = D1;
            double dp = ph;
            list.Add(string.Format("Overall depth of Footing = D = {0} mm", D));
            list.Add(string.Format("Providing depth of Pedestal = dp = {0} mm", dp));


            double tot_dep = D + dp;
            list.Add(string.Format("Total Overall depth of Footing + Pedestal = D + dp = {0} + {1} = {2} mm", D, dp, tot_dep));
            list.Add(string.Format(""));
            list.Add(string.Format("Pedestal Reinforcement"));
            list.Add(string.Format(""));

            Ast_req = (0.12 / 1000) * P1 * 1000 * P2 * 1000;
            list.Add(string.Format("Area of Steel required = (0.12 / 1000) x p1 x p2"));
            list.Add(string.Format("                       = (0.12 / 1000) x {0} x {1}", P1 * 1000, P2 * 1000));
            list.Add(string.Format("                       = {0:f3} Sq.mm.", Ast_req));
            list.Add(string.Format(""));


            double bar_dia3 = bar_dia;
            bar_nos = 10;

            Ast_prov = (Math.PI * bar_dia3 * bar_dia3 / 4.0);




            bar_nos = (int)(Ast_prov / Ast_req);
            bar_nos += 1;
            list.Add(string.Format("Provide {0} nos Y'{1} bars.", bar_nos, bar_dia3));

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "F_AST[3]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = 2 * (BOQ.Pedestal_L2 + BOQ.Pedestal_B2) - 4 * c / 1000;
            BOQ.Steel_Reinforcement.Add(ssr);



            list.Add(string.Format("Ast Provided = (3.1416 X {0} X {0} / 4) X {1} = {2:f3} Sq.mm.", bar_dia3, bar_nos, Ast_prov));
            list.Add(string.Format(""));


            #endregion STEP 3 : CHECK FOR BOND

            #region STEP 4 : DESIGN SUMMARY
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 4 : DESIGN SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));


            Design_Summary.Add(string.Format("Size of Foundation/Footing = l x b = {0:f3} x {1:f3} Sq.m.", BOQ.Footing_Base_L1, BOQ.Footing_Base_B1));
            Design_Summary.Add(string.Format("Overall thickness of Footing at the face of Pedestal = D1 = {0} mm", D1));
            Design_Summary.Add(string.Format("Thickness of Footing at the edge of Foundation = D2 = {0} mm", D2));
            Design_Summary.Add(string.Format("Depth of Foundation / Overburden Soil = h = {0:f3} m", h));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Size of Pedestal = P1 x P2 = {0:f3} x {1:f3} Sq.m.", P1, P2));
            Design_Summary.Add(string.Format("Height of Pedestal = ph = {0} mm", ph));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Size of Column =  C1 x C2 = {0:f3} x {1:f3} Sq.m.", C1, C2));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            //list.Add(string.Format("Provide T20 @ 130 mm c/c Rebars both ways at Bottom, (Ast = 2416.610 Sq.mm)"));
            Design_Summary.Add(string.Format("Provide T{0} @ {1} mm c/c Rebars both ways at Bottom, (Ast = {2:f3} Sq.mm)", bar_dia, bar_spc1, Ast1));
            Design_Summary.Add(string.Format("Bar mark in drawing = F_Ast[1] as Span Steel (Bottom). "));
            Design_Summary.Add(string.Format(""));

            Design_Summary.Add(string.Format("Provide T{0} @ {1} mm c/c Transverse Reinf. Bars, (Ast = {2:f3} Sq.mm)", bar_dia2, bar_spc2, Ast_prov));
            Design_Summary.Add(string.Format("Bar mark in drawing = F_Ast[2] as Transverse Direction (Bottom). "));
            Design_Summary.Add(string.Format(""));

            list.AddRange(Design_Summary.ToArray());
            Design_Summary.Insert(0, string.Format("FOUNDATION = {0}", ColumnNo));
            list.Add(string.Format(""));
            #endregion STEP 4 : DESIGN SUMMARY



            #region STEP 5 : BOQ SUMMARY
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 5 : BOQ SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));

            BOQ_Summary = new List<string>();

            //BOQ_Summary.Add(string.Format("Size of Foundation/Footing = l x b = {0:f3} x {1:f3} Sq.m.", BOQ.Footing_Base_L1, BOQ.Footing_Base_B1));
            //BOQ_Summary.Add(string.Format("Overall thickness of Footing at the face of Pedestal = D1 = {0} mm", D1));
            //BOQ_Summary.Add(string.Format("Thickness of Footing at the edge of Foundation = D2 = {0} mm", D2));
            //BOQ_Summary.Add(string.Format("Depth of Foundation / Overburden Soil = h = {0:f3} m", h));
            //BOQ_Summary.Add(string.Format(""));
            //BOQ_Summary.Add(string.Format("Size of Pedestal = P1 x P2 = {0:f3} x {1:f3} Sq.m.", P1, P2));
            //BOQ_Summary.Add(string.Format("Height of Pedestal = ph = {0} mm", ph));
            //BOQ_Summary.Add(string.Format(""));
            //BOQ_Summary.Add(string.Format("Size of Column =  C1 x C2 = {0:f3} x {1:f3} Sq.m.", C1, C2));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));

            double con_qty = BOQ.Footing_Base_L1 * BOQ.Footing_Base_B1 * BOQ.Footing_Base_H1;
            BOQ_Summary.Add(string.Format("Concrete Quantity "));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Foundation = l x b x h"));
            BOQ_Summary.Add(string.Format("           = {0:f3} x {1:f3} x {2:f3}",
                BOQ.Footing_Base_L1,
                BOQ.Footing_Base_B1,
                BOQ.Footing_Base_H1));
            BOQ_Summary.Add(string.Format("           = {0:f3} Cu.m", con_qty));
            BOQ_Summary.Add(string.Format(""));

            con_qty = BOQ.Pedestal_L2 * BOQ.Pedestal_B2 * BOQ.Pedestal_H2;
            BOQ_Summary.Add(string.Format("Pedestal = P1 x P2 x Ph"));
            BOQ_Summary.Add(string.Format("         = {0:f3} x {1:f3} x {2:f3}",
                BOQ.Pedestal_L2,
                BOQ.Pedestal_B2,
                BOQ.Pedestal_H2));
            BOQ_Summary.Add(string.Format("         = {0:f3} Cu.m", con_qty));
           
            BOQ_Summary.Add(string.Format(""));
            //list.Add(string.Format("Provide T20 @ 130 mm c/c Rebars both ways at Bottom, (Ast = 2416.610 Sq.mm)"));
            BOQ_Summary.Add(string.Format("Provide T{0} @ {1} mm c/c Rebars both ways at Bottom, (Ast = {2:f3} Sq.mm)", bar_dia, bar_spc1, Ast1));
            //BOQ_Summary.Add(string.Format("Bar mark in drawing = F_Ast[1] as Span Steel (Bottom). "));
            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f3} = {3:f3} Ton",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars,
                BOQ.Steel_Reinforcement[0].Length,
                BOQ.Steel_Reinforcement[0].Bar_Weight,
                BOQ.Steel_Reinforcement[0].Total_Weight));

            BOQ_Summary.Add(string.Format("Provide T{0} @ {1} mm c/c Transverse Reinf. Bars, (Ast = {2:f3} Sq.mm)", bar_dia2, bar_spc2, Ast_prov));
            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f3} = {3:f3} Ton",
              BOQ.Steel_Reinforcement[1].Number_Of_Bars,
              BOQ.Steel_Reinforcement[1].Length,
              BOQ.Steel_Reinforcement[1].Bar_Weight,
              BOQ.Steel_Reinforcement[1].Total_Weight));

            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("-----------------------------------------------------------------------------------------"));

            list.AddRange(BOQ_Summary.ToArray());
            list.Add(string.Format(""));
            #endregion STEP 4 : DESIGN SUMMARY


            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF DESIGN        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            list.Add("");

            if (Report_File != "")
            {
                string tmp_file = Get_Report_File(step);
                File.WriteAllLines(tmp_file, list.ToArray());

                tmp_file = Get_BOQ_File(step);
                File.WriteAllLines(tmp_file, BOQ_Summary.ToArray());

                tmp_file = Get_Design_Summary_File(step);
                File.WriteAllLines(tmp_file, Design_Summary.ToArray());
            }

            return list;

        }

        public static List<string> Get_Banner()
        {

            List<string> list = new List<string>();


            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*      DESIGN OF ISOLATED RCC FOOTING        *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");
            #endregion TechSOFT Banner

            return list;
        }

        public List<string> Design_Program_Individual(int step)
        {

            BOQ = new ISO_Foundation_BOQ();
            BOQ.ColumnNos = ColumnNo;
            List<string> list = new List<string>();

            IS_DESIGN_OK = true;

            Design_Summary = new List<string>();

            list.AddRange(Get_Banner());


            //list.Add(string.Format("Design of Isolated RCC Footing"));



            //P = 853.031;
            //Mx = 29.978;
            //C1 = 0.3;
            //C2 = 0.6;
            //l = 2.8;
            //b = 2.8;
            //h = 1.2;
            //alpha_br = 150;
            //P1 = 0.900;
            //P2 = 0.60;
            //gamma_c = 24;
            //gamma_s = 16;
            //fck = 20;
            //fy = 415;
            //bar_dia = 12;



            //list.Add(string.Format("--------------------------------------------------------"));
            //list.Add(string.Format("FOUNDATION {0} : Design Input Data for Column {1}", step, ColumnNo));
            //list.Add(string.Format("--------------------------------------------------------"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Design Data from Analysis"));
            //list.Add(string.Format("--------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("User’s Data:"));
            list.Add(string.Format("-------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Vertical Load at the base = P = {0:f3} KN", P));
            list.Add(string.Format("Bending Moment at the base = Mx = {0:f3} KN-m", Mx));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Size of Column =  C1 x C2 = {0:f3} x {1:f3} Sq.m.", C1, C2));
            list.Add(string.Format(""));
            BOQ.Footing_Base_L1 = l;
            BOQ.Footing_Base_B1 = b;
            list.Add(string.Format("Size of Foundation/Footing = l x b = {0:f3} x {1:f3} Sq.m.", l, b));
            list.Add(string.Format(""));
            BOQ.Pedestal_L2 = P1;
            BOQ.Pedestal_B2 = P2;
            list.Add(string.Format("Size of Pedestal = P1 x P2 = {0:f3} x {1:f3} Sq.m.", P1, P2));
            list.Add(string.Format(""));
            BOQ.Pedestal_H2 = ph / 1000;
            list.Add(string.Format("Height of Pedestal = ph = {0} mm", ph));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall depth at the edge of Pedestal = D2 = {0} mm", D2));
            BOQ.Footing_Base_H1 = h;
            BOQ.Footing_Tapper_Height = D2 / 1000;
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Depth of Overburden Soil = h = {0:f3}m", h));
            list.Add(string.Format("Bearing Capacity of Soil = αbr = {0:f3} KN/Sq.m.", alpha_br));
            list.Add(string.Format("Unit weight of Concrete = γc = {0} KN/Cu.m ", gamma_c));
            list.Add(string.Format("Unit weight of Soil  = γs = {0} KN/Cu.m ", gamma_s));
            list.Add(string.Format(""));
            list.Add(string.Format("Main Reinforcement Bars"));
            list.Add(string.Format("Diameter of Bars  = d1 = {0} mm,  Spacing = s1 = {1} mm", bar_dia1, bar_spc1));
            list.Add(string.Format(""));
            list.Add(string.Format("Transverse Reinforcement Bars", bar_dia));
            list.Add(string.Format("Diameter of Bars = d2 = {0} mm,  Spacing = s2 = {1} mm", bar_dia2, bar_spc2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #region STEP 1 : DESIGN CALCULATIONS
            //list.Add(string.Format("STEP {0}.1 : Design Calculations ", step, ColumnNo));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format("STEP 1 : DESIGN CALCULATIONS ", step, ColumnNo));
            list.Add(string.Format("----------------------------------"));
            list.Add(string.Format(""));

            double A = l * b;
            list.Add(string.Format("Area of Footing = A = l x b = {0} x {1} = {2:f3} Sq.m.", l, b, A));
            list.Add(string.Format(""));

            double p1 = P / A;
            list.Add(string.Format("Pressure on Soil for Axial Vertical Load = p1 = P/A "));
            list.Add(string.Format("                                              = {0:f3} / {1:f3}", P, A));
            list.Add(string.Format("                                              = {0:f3} KN/Sq.m.", p1));
            list.Add(string.Format(""));

            double alpha_sbr = alpha_br - (gamma_c - gamma_s) * h;
            list.Add(string.Format("Safe Bending Capacity = αsbr = αbr - (γc - γs) x h"));
            list.Add(string.Format("                             = {0} - ({1} - {2}) x {3}", alpha_br, gamma_c, gamma_s, h));
            list.Add(string.Format("                             = {0:f3} KN/Sq.m.", alpha_sbr));
            list.Add(string.Format(""));

            double W = 40 * P * h / alpha_sbr;
            list.Add(string.Format("Wt. of Soil Overburden = W = 40 x P x h / αsbr"));
            list.Add(string.Format("                           = 40 x {0:f3} x {1:f3} / {2:f3}", P, h, alpha_sbr));
            list.Add(string.Format("                           = {0:f3} KN", W));
            list.Add(string.Format(""));

            double e = Mx / (P + W);
            list.Add(string.Format("Eccentricity = e = Mx / (P + W)"));
            list.Add(string.Format("                 = {0:f3} / ({1:f3} + {2:f3})", Mx, P, W));
            list.Add(string.Format("                 = {0:f3} m.", e));
            list.Add(string.Format(""));
            list.Add(string.Format("Maximum Pressure on Soil at depth = h = {0:f3}m", h));
            double p2 = (P + W) * (1 + 6 * e / l) / (b * l);
            list.Add(string.Format(""));
            list.Add(string.Format("  p2 = (P + W) x (1 + 6 x e / l) / (b x l)"));
            list.Add(string.Format("     = ({0:f3} + {1:f3}) x (1 + 6 x {2:f3} / {3:f3}) / ({4:f3} x {3:f3})", P, W, e, l, b));
            //list.Add(string.Format("     = (1173.991 x 1.0557 / (2.8 x 2.8)"));
            list.Add(string.Format("     = {0:f3} KN/Sq.m.", p2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            list.Add(string.Format("Pressure due to overburden Soil"));
            list.Add(string.Format(""));

            double p3 = W / (b * l);
            list.Add(string.Format("p3 = W / (b x l) = {0:f3} / ({1:f3} x {2:f3}) = {3:f3} KN/Sq.m.", W, b, l, p3));
            list.Add(string.Format(""));

            double p4 = p2 - p3;
            list.Add(string.Format("Therefore additional imposed pressure  = p4 = p2 - p3"));
            list.Add(string.Format("                                            = {0:f3} - {1:f3}", p2, p3));
            list.Add(string.Format("                                            = {0:f3} KN/Sq.m.", p4));
            list.Add(string.Format(""));

            double val1 = 1.25 * p1;
            if (val1 > p4)
            {
                list.Add(string.Format("1.25 x p1 = 1.25 x {0:f3} = {1:f3} KN/Sq.m. > p4 = {2:f3} KN/Sq.m.", p1, val1, p4));
                list.Add(string.Format(""));
                list.Add(string.Format("Here, 1.25 x p1 > (p2 - p3) the size of Footing is OK, and"));
                list.Add(string.Format("The design will be done by neglecting the effect of Bending Moment and as axially loaded only."));

            }
            else
            {
                list.Add(string.Format("1.25 x p1 = 1.25 x {0:f3} = {1:f3} KN/Sq.m. < p4 = {2:f3} KN/Sq.m.", p1, val1, p4));
                list.Add(string.Format(""));
                list.Add(string.Format("Here, 1.25 x p1 < (p2 - p3) the size of Footing was to be increased,"));
            }
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            list.Add(string.Format("Axial Load = P = {0:f3} KN", P));

            val1 = P * 0.1;
            list.Add(string.Format("Additional 10% of P = {0:f3} KN", val1));

            double P_total = P + val1;
            list.Add(string.Format("Total Design Load = {0:f3} + {1:f3} = {2:f3} KN.", P, val1, P_total));
            list.Add(string.Format(""));


            double req_area = P_total / alpha_sbr;
            list.Add(string.Format("Required Area for Footing = {0:f3} / αsbr", P_total));
            list.Add(string.Format("                          = {0:f3} / {1:f3}", P_total, alpha_sbr));
            list.Add(string.Format("                          = {0:f3} Sq.m.", req_area));
            list.Add(string.Format(""));

            double Pu = P * 1.5;
            list.Add(string.Format("Ultimate Load = Pu = {0:f3} x 1.5 = {1:f3} KN", P, Pu));
            list.Add(string.Format(""));

            double pu = Pu / A;
            list.Add(string.Format("Ultimate Pressure = pu = Pu / A"));
            list.Add(string.Format("                       = {0:f3} / {1:f3}", Pu, A));
            list.Add(string.Format("                       = {0:f3} KN/Sq.m.", pu));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            list.Add(string.Format(""));
            list.Add(string.Format("         Section at distance ‘d’ from pedestal [1-1]"));
            list.Add(string.Format("           Section at face of pedestal [3-3]     |     "));
            list.Add(string.Format("          |---------|--------------------|-------|----|"));
            list.Add(string.Format("          |         |                    |       |    |"));
            list.Add(string.Format("          |         |                    |       |    |"));
            list.Add(string.Format("          |         |                    |       |    |"));
            list.Add(string.Format("          |         |         p2         |       |    |"));
            list.Add(string.Format("          |         |--------------------|       |    |"));
            list.Add(string.Format("          |         |         c2         |       |    |"));
            list.Add(string.Format("          |         |     |--------|     |       |    |"));
            list.Add(string.Format("       b  |       p1|  c1 |        |     |       |    |"));
            list.Add(string.Format("          |         |     | Column |     |       |    |"));
            list.Add(string.Format("          |         |     |        |     |       |    |"));
            list.Add(string.Format("          |         |     |--------|     |       |    |"));
            list.Add(string.Format("          |         |      Pedestal      |       |    |"));
            list.Add(string.Format("          |         |--------------------|       |    |"));
            list.Add(string.Format("          |               Footing        |       |    | Section [2-2] at distance ‘d’ from pedestal "));
            list.Add(string.Format("   [2]----|------------------------------|-------|----|--------[2]"));
            list.Add(string.Format("          |                              |       |    |"));
            list.Add(string.Format("          |______________________________|_______|____|"));
            list.Add(string.Format("                 <--- l --->             |       |"));
            list.Add(string.Format("                                        [3]     [1]"));
            list.Add(string.Format("                                           "));
            list.Add(string.Format("                   Fig. 1"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moment at the face of pedestal Section [3 - 3]"));
            list.Add(string.Format(""));

            double Mx1 = pu * (l - P2) / 2 * b * (l - P2) / (2 * 2);
            list.Add(string.Format("    Mx = pu x (l - P2) / 2 x b x (l - P2) / (2 x 2)"));
            list.Add(string.Format("       = {0:f3} x ({1:f3} - {2:f3}) / 2 x {3:f3} x ({1:f3} - {2:f3}) / 4", pu, l, P2, b));
            list.Add(string.Format("       = {0:f3} KN.m", Mx1));
            list.Add(string.Format(""));

            double bm1 = Mx1 / P1;
            list.Add(string.Format("Bending Moment per metre Length at the face of pedestal"));
            list.Add(string.Format(" = Mx / P1 = {0:f3} / {1:f3} = {2:f3} KN.m/m", Mx1, P1, bm1));
            list.Add(string.Format(""));

            double Vx = pu * ((l - P2) / 2) * (l / l);
            list.Add(string.Format("Shear Force at the face of pedestal = Vx (Bond) / metre "));
            list.Add(string.Format("                                    = pu x [(l - P2) / 2] x (l / l)"));
            list.Add(string.Format("                                    = {0:f3} x [({1:f3} - {2:f3}) / 2] x ({1:f3} / {1:f3})", pu, l, P2));
            list.Add(string.Format("                                    = {0:f3} KN/m", Vx));
            list.Add(string.Format(""));

            double My = (pu / (2 * P2)) * (b - P1) * l * (b - P1) / (2 * 2);
            list.Add(string.Format("Bending Moment per metre Length at the face of pedestal"));
            list.Add(string.Format(""));
            list.Add(string.Format("    My = [pu / (2 x P2)] x (b - P1) x l x (b - P1) / (2 x 2)"));
            list.Add(string.Format("       = [{0:f3} / (2 x {1:f3})] x ({2:f3} - {3:f3}) x {4:f3} x ({2:f3} - {3:f3}) / 4", pu, P2, b, P1, l));
            list.Add(string.Format("       = {0:f3} KN.m/m", My));
            list.Add(string.Format(""));

            double Vy = pu * ((b - P1) / 2) * (l / l);
            list.Add(string.Format("Shear Force at the face of pedestal = Vy (Bond) / metre"));
            list.Add(string.Format("                                    = pu x [(b - P1) / 2] x (l / l)"));
            list.Add(string.Format("                                    = {0:f3} x [({1:f3} - {2:f3}) /2] x ({3:f3} / {3:f3})", pu, b, P1, l));
            list.Add(string.Format("                                    = {0:f3} KN/m", Vy));
            list.Add(string.Format(""));



            bool flag = false;
            //double D = 560.0;
            double d_dash = c + bar_dia / 2;
            double d = D - d_dash;
            double _a, _b, _Vx_1_1, _Vx_1_1_a, _Vy_2_2, _Vy_2_2_b, Mmax;

            double d1, Vmax, tau_c, d2, _d;
            string kStr = "";


            double D1 = D;
            //D2 = 300.0;

            double D_dash, D3, eff_d;


            List<string> trial_text = new List<string>();


            int cn = 0;
            do
            {
                #region Trial

                //D1 = D;
                d_dash = c + bar_dia / 2;
                d = D1 - d_dash;

                trial_text.Clear();


                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Let us assume an overall depth = D = {0} mm", D1));
                trial_text.Add(string.Format("Considering, Cover + Half of Bar Dia = d’ = {0} mm", d_dash));


                trial_text.Add(string.Format("Effective depth = D-d’ = d = {0} mm", d));
                trial_text.Add(string.Format(""));
                d = d / 1000;
                _a = P1 + ((b - P1) / 2) * (d) * 2 / ((l - P2) / 2);
                trial_text.Add(string.Format(" a = P1 + [(b - P1) / 2] x d  x 2/ [(l - P2) / 2]"));
                trial_text.Add(string.Format("   = {0:f3} + [({1:f3} - {2:f3}) /2] x {3:f3} x 2 / [({4:f3} - {5:f3}) / 2]", P1, b, P1, d, l, P2));
                trial_text.Add(string.Format("   = {0:f3} m", _a));
                trial_text.Add(string.Format(""));

                _b = P2 + ((l - P2) / 2) * d * 2.0 / ((b - P1) / 2.0);
                trial_text.Add(string.Format(" b = P2 + [(l - P2) / 2] x d x 2 / [(b - P1) / 2]"));
                trial_text.Add(string.Format("   = {0:f3} + [({1:f3} - {2:f3}) /2] x {3:f3} x 2 / [({4:f3} - {5:f3}) / 2]", P2, l, P2, d, b, P1));
                trial_text.Add(string.Format("   = {0:f3} m", _b));
                trial_text.Add(string.Format(""));

                _Vx_1_1 = pu * (((l - P2) / 2) - d) * b;
                trial_text.Add(string.Format("Vx (1 - 1) = pu x [[(l - P2) / 2] - d] x b"));
                trial_text.Add(string.Format("           = {0:f3} x [[({1:f3} - {2:f3}) / 2] - {3:f3}] x {4:f3}", pu, l, P2, d, b));
                trial_text.Add(string.Format("           = {0:f3} KN", _Vx_1_1));
                trial_text.Add(string.Format(""));
                _Vx_1_1_a = _Vx_1_1 / _a;
                trial_text.Add(string.Format("Vx (1 -1) / metre = Vx (1 - 1) / a = {0:f3} / {1:f3} = {2:f3} KN/m", _Vx_1_1, _a, _Vx_1_1_a));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Similarly,"));

                _Vy_2_2 = pu * (((b - P1) / 2) - d) * l;
                trial_text.Add(string.Format("Vy (2 - 2) = pu x [[(b - P1) / 2] - d] x l"));
                trial_text.Add(string.Format("           = {0:f3} x [[({1:f3} - {2:f3}) / 2] - {3:f3}] x {4:f3}", pu, b, P1, d, l));
                trial_text.Add(string.Format("           = {0:f3} KN", _Vy_2_2));
                trial_text.Add(string.Format(""));

                _Vy_2_2_b = _Vy_2_2 / _b;
                trial_text.Add(string.Format("Vy (2 -2) / metre = Vy (2 - 2) / b = {0:f3} / {1:f3} = {2:f3} KN/m", _Vy_2_2, _b, _Vy_2_2_b));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Required depth of footing considering maximum Bending Moments,"));
                trial_text.Add(string.Format(""));


                trial_text.Add(string.Format("Mx = {0:f3} KNm and My = {1:f3} KNm", Mx1, My));
                trial_text.Add(string.Format(""));

                Mmax = Math.Max(Mx1, My);
                trial_text.Add(string.Format("Therefore Mmax = {0:f3} KNm", Mmax));
                trial_text.Add(string.Format(""));


                d1 = Math.Sqrt((Mmax * 1000000 / (0.138 * fck * 1000)));
                trial_text.Add(string.Format("   d1 >= √[Mmax x 10^6 / (0.138 x fck x b)]"));
                trial_text.Add(string.Format("       = √[{0:f3} x 10^6 / (0.138 x {1} x 1000)]", Mmax, fck));
                trial_text.Add(string.Format("       = {0:f3} mm", d1));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Required depth of footing Considering maximum Shear Force,"));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Vx (1 - 1) / metre = {0:f3} KN/m", _Vx_1_1_a));
                trial_text.Add(string.Format("Vy (2 - 2) / metre = {0:f3} KN/m", _Vy_2_2_b));
                trial_text.Add(string.Format(""));

                Vmax = Math.Max(_Vx_1_1_a, _Vy_2_2_b);
                trial_text.Add(string.Format("Therefore, Vmax = {0:f3} KN/m", Vmax));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("d2 >= Vmax x 10^3 / (Ƭc x 1000)"));
                trial_text.Add(string.Format(""));


                //tau_c = Tables.Permissible_Shear_Stress(0.25, (int)fck, ref kStr);
                tau_c = 0.36;
                trial_text.Add(string.Format("For minimum required Steel reinforcement of 0.25%, Corresponding Ƭc = {0:f3} N/Sq.mm.", tau_c));
                //trial_text.Add(string.Format("d2 >= 155.44 x 1000 / (0.36 x 1000) = 431.78 mm"));
                d2 = Vmax * 1000 / (tau_c * 1000);
                trial_text.Add(string.Format("d2 >= {0:f3} x 1000 / ({1:f3} x 1000) = {2:f3} mm", Vmax, tau_c, d2));
                trial_text.Add(string.Format(""));


                _d = Math.Max(d1, d2);
                trial_text.Add(string.Format("Required effective depth is maximum of d1 & d2 = d = {0:f3} mm", _d));

                //_d = (int)(_d / 100.0);

                //_d = _d + 1;

                //_d = _d * 100;
                trial_text.Add(string.Format("Let us provide overall depth of footing at the face of Pedestal = D = {0} mm", d * 1000));
                trial_text.Add(string.Format(""));


                trial_text.Add(string.Format("Overall depth at the face of pedestal = D1 = {0} mm", D1));
                trial_text.Add(string.Format("Overall depth at the edge of footing = D2 = {0} mm", D2));


                //D_dash = (2.8 - 0.6);

                //decimal wd = ((2.80 - 0.60) / 2.0);
                //float f1 = 2.8f;
                //float f2 = 0.6f;

                //float f3 = f1 - f2;

                D_dash = (l - P2) / 2.0;
                trial_text.Add(string.Format("Distance from face of pedestal to edge of footing = D’"));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format(" D’ = (l - P2) / 2"));
                trial_text.Add(string.Format("    = ({0:f3} - {1:f3}) / 2", l, P2));
                trial_text.Add(string.Format("    = {0:f3} m", D_dash));
                D_dash = D_dash * 1000.0;
                trial_text.Add(string.Format("    = {0:f3} mm", D_dash));
                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Required Overall depth at a distance = D = {0}mm for face of Pedestal = D3", D));
                //trial_text.Add(string.Format("=D3"));
                trial_text.Add(string.Format(""));


                //D3 = D2 + ((D1 - D2) * (((l - P2) * 1000 / 2) - D_dash) / ((l - P2) * 1000 / 2));
                D3 = D2 + ((D1 - D2) * (P2 * 1000) / D_dash);
                trial_text.Add(string.Format("D3 = D2 + ((D1 - D2) * (P2 * 1000) / D'"));
                trial_text.Add(string.Format("   = {0:f3} + ({1:f3} - {0:f3}) x {2:f3}  / {3:f3}", D2, D1, p2 * 1000, D_dash));
                trial_text.Add(string.Format("   = {0:f3} mm", D3));

                //trial_text.Add(string.Format("D3 = D2 + [(D1- D2) x [p2 x 1000] / [(l - p2) x 1000 / 2]]"));
                //trial_text.Add(string.Format("   = {0:f3} + ({1:f3} - {0:f3}) x {2:f3}  / {3:f3}", D2, D1, (((l - p2) * 1000 / 2) - D_dash), ((l - p2) * 1000 / 2)));
                //trial_text.Add(string.Format("   = {0:f3} mm", D3));

                trial_text.Add(string.Format(""));
                trial_text.Add(string.Format("Considering Cover + Half of Bar Dia = d’ = {0} mm", d_dash));
                trial_text.Add(string.Format(""));

                eff_d = D3 - d_dash;
                trial_text.Add(string.Format("Effective depth = D3 - d’"));
                trial_text.Add(string.Format("                = {0:f3} - {1}", D3, d_dash));
                if (eff_d <= _d)
                {
                    trial_text.Add(string.Format("                = {0:f3} mm <= d = {1:f3} mm,   NOT OK.", eff_d, _d));
                    D1 += 20;
                    if (cn == 0)
                        list.AddRange(trial_text);

                    if (D1 > 1000)
                    {
                        list.Add(string.Format("Tried foundation thickness upto 1000mm, with a Trial increment of 20 mm"));
                        list.Add(string.Format("but found 'NOT OK' terminating the Design user has to modify the input data.."));
                        list.Add(string.Format(""));


                        if (Report_File != "")
                            File.WriteAllLines(Report_File, list.ToArray());



                        return list;
                    }
                    flag = true;
                }
                else
                {
                    flag = false;
                    trial_text.Add(string.Format("                = {0:f3} mm > d = {1:f3} mm,   OK.", eff_d, _d));
                }
                trial_text.Add(string.Format(""));

                cn++;
                #endregion Trial
            }
            while (flag);
            list.AddRange(trial_text);

            list.Add(string.Format("So, provide footing of size = l x b = {0:f3}m x {1:f3}m ", l, b));
            list.Add(string.Format(""));
            list.Add(string.Format("and Overall depth at the face of Pedestal = D’ = {0:f3} mm", D_dash));
            list.Add(string.Format(""));
            list.Add(string.Format("and at the edge = D2 = {0:f3} mm.", D2));


            //double P1 = 0.9;
            //double P2 = 0.6;
            //ph = 0.25;
            list.Add(string.Format("Also, the Pedestal of size = p1 x p2 = {0} mm x {1} mm", P1 * 1000, P2 * 1000));
            list.Add(string.Format("and height of Pedestal as {0}mm.", ph));
            list.Add(string.Format(""));
            list.Add(string.Format("Required Cross Sectional Area of Pedestal"));
            list.Add(string.Format(""));

            double A2 = 4 * C1 * C2;
            list.Add(string.Format("   A1 <= 4 x (Cross Sectional Area of Column = A2)"));
            list.Add(string.Format("      <= 4 x {0:f3} x {1:f3}", C1, C2));
            list.Add(string.Format("      <= {0:f3} Sq.m.", A2));
            list.Add(string.Format(""));


            double A1 = P1 * P2;
            if (A1 < A2)
                list.Add(string.Format("Therefore, A1 = p1 x p2 = {0:f3} x {1:f3} = {2:f3} < {3:f3} Sq.m., OK", P1, P2, A1, A2));
            else
                list.Add(string.Format("Therefore, A1 = p1 x p2 = {0:f3} x {1:f3} = {2:f3} > {3:f3} Sq.m., NOT OK", P1, P2, A1, A2));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double alpha_cbr = 0.45 * fck * Math.Sqrt(A1 / A2);
            list.Add(string.Format("Now, αcbr = 0.45 x fck x √(A1 / A2)"));
            list.Add(string.Format("           = 0.45 x {0} x √({1:f3} / {2:f3})", fck, A1, A2));
            list.Add(string.Format("           = {0:f3} N/Sq.mm.", alpha_cbr));
            list.Add(string.Format(""));

            double abrs = (P * 1000 * 1.5) / (C1 * 1000 * C2 * 1000);
            list.Add(string.Format("Actual Bearing Stress = (P x 1000 x 1.5) / (C1 x 1000 x C2 x 1000)"));
            list.Add(string.Format("                      = ({0:f3} x 1000 x 1.5) / ({1:f3} x 1000 x {2:f3} x 1000)", P, C1, C2));
            list.Add(string.Format(""));
            if (abrs < alpha_cbr)
                list.Add(string.Format("                      = {0:f3} N/Sq.mm. < αcbr = {1:f3} N/Sq.mm., OK.", abrs, alpha_cbr));
            else
                list.Add(string.Format("                      = {0:f3} N/Sq.mm. > αcbr = {1:f3} N/Sq.mm., NOT OK.", abrs, alpha_cbr));


            list.Add(string.Format(""));
            list.Add(string.Format(""));


            #endregion STEP 1 : DESIGN CALCULATIONS

            #region STEP 2 : PUNCHING SHEAR FORCE


            list.Add(string.Format("---------------------------------------"));
            //list.Add(string.Format("STEP {0}.2 : PUNCHING SHEAR FORCE :", step));
            list.Add(string.Format("STEP 2 : PUNCHING SHEAR FORCE", step));
            list.Add(string.Format("---------------------------------------"));
            list.Add(string.Format(""));


            double Vp = P * 1.5 - (P1 + D_dash / 1000) * (P2 + D_dash / 1000) * pu;
            list.Add(string.Format("  Vp = P x 1.5 - (p1 + d) x (p2 + d) x pu"));
            //list.Add(string.Format("     = 853.051 x 1.5 - (0.9 + 0.56) x (0.6 + 0.56) x 163.21"));
            list.Add(string.Format("     = {0:f3} x 1.5 - ({1:f3} + {2:f3}) x ({3:f3} + {2:f3}) x {4:f3}", P, P1, D_dash / 1000, P2, pu));
            //list.Add(string.Format("     = 1279.577 - 276.412"));
            list.Add(string.Format("     = {0:f3} KN", Vp));
            list.Add(string.Format(""));
            list.Add(string.Format("D1 = Overall depth at the face of Pedestal = {0} mm", D1));
            list.Add(string.Format("D2 = Overall depth at the edge of Footing = {0} mm,", D2));
            list.Add(string.Format(""));

            double s = D_dash;
            list.Add(string.Format("Distance = s = {0} m = {0} mm", s / 1000, s));
            list.Add(string.Format(""));



            double ovr_d = D / 2;
            list.Add(string.Format("Overall depth of a distance = d / 2 = {0} / 2 = {1} mm from the face of Pedestal = Dp", D, ovr_d));
            list.Add(string.Format(""));
            double Dp = D2 + ((D1 - D2) * (s - ovr_d) / s);
            list.Add(string.Format("   Dp = D2 + [(D1 - D2) x (s -280) / s]"));
            list.Add(string.Format("      = {0} + [({1} - {0}) x ({2} - {3}) / {0}]", D2, D1, s, ovr_d));
            list.Add(string.Format("      = {0:f3} mm", Dp));
            list.Add(string.Format(""));
            list.Add(string.Format("Considering Cover + Half of Bar Dia = d’ = {0} mm", d_dash));

            eff_d = Dp - d_dash;
            list.Add(string.Format("Effective Depth = Dp - d’"));
            list.Add(string.Format("                = {0:f3} - {1}", Dp, d_dash));
            list.Add(string.Format("                = {0:f3} mm", eff_d));
            list.Add(string.Format(""));


            list.Add(string.Format("Permissible Shear Stress, Ƭc = Ks x 0.45 x √fck"));
            list.Add(string.Format(""));

            double Ks = 0.5 + (P2 / P1);
            if (Ks > 1.0)
            {
                list.Add(string.Format("Ks = 0.5 + (p2 / p1) = 0.5 + ({0:f3} / {1:f3}) = {2:f3} > 1", P2, P1, Ks));
                //list.Add(string.Format("Condition, Ks <= 1, So, take Ks = 1"));
                //list.Add(string.Format("Condition, Ks >= 1, So, take Ks = 1"));
                Ks = 1.0;
            }
            else
                list.Add(string.Format("Ks = 0.5 + (p2 / p1) = 0.5 + ({0:f3} / {1:f3}) = {2:f3} < 1", P2, P1, Ks));

            list.Add(string.Format("Condition, Ks <= 1"));
            list.Add(string.Format(""));

            double tau_c1 = Ks * 0.45 * Math.Sqrt(fck);
            if (tau_c1 > tau_c)
            {
                list.Add(string.Format("Ƭc = Ks x 0.45 x √fck = {0:f3} x 0.45 x √{1} = {2:f3} N/Sq.mm. > {3:f3}", Ks, fck, tau_c1, tau_c));
            }
            else
            {
                list.Add(string.Format("Ƭc = Ks x 0.45 x √fck = {0:f3} x 0.45 x √{1} = {2:f3} N/Sq.mm. < {3:f3}", Ks, fck, tau_c1, tau_c));
            }
            list.Add(string.Format(""));

            //s = 397.09;

            double sd = ((D1 - D2) * Dp / s) + (D2 - d_dash);
            //list.Add(string.Format("s = {0:f3} = Effective Depth at a distance ‘d’ from face of Pedestal,", s));
            list.Add(string.Format("Effective Depth at a distance ‘d’ from face of Pedestal, = sd", s));
            list.Add(string.Format(""));
            list.Add(string.Format("sd = ((D1 - D2) * Dp / s) + (D2 - d')"));
            list.Add(string.Format("   = (({0:f3} - {1:f3}) * {2:f3} / {3:f3}) + ({1:f3} - {4:f3})", D1, D2, Dp, s, d_dash));

            double min_sr = (0.25 / 100) * s * 1000;
            list.Add(string.Format("Minimum Steel reinforcement >= (0.25 / 100) x s x 1000"));
            list.Add(string.Format("                             = 0.0025 x {0:f3} x 1000", s));
            list.Add(string.Format("                             = {0:f3} Sq.mm.", min_sr));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double da = ((D1 - d_dash) + (D2 - d_dash)) / 2;
            list.Add(string.Format("Average Effective Depth = da = [(D1 - d’) + (D2 - d’)] / 2"));
            list.Add(string.Format("                             = [({0} - {1}) + ({2} - {1})] / 2", D1, d_dash, D2));
            list.Add(string.Format("                             = {0:f3} mm", da));
            list.Add(string.Format(""));
            double con_min_st = (0.12 / 100) * da * 1000;
            list.Add(string.Format("Condition for minimum Steel    >= (0.12 / 100) x da x 1000"));
            list.Add(string.Format("                               >= (0.12 / 100) x {0} x 1000", da));
            list.Add(string.Format("                               >= {0:f3} Sq.mm.", con_min_st));
            list.Add(string.Format(""));
            //Chiranjit comment [2015 04 05]
            //list.Add(string.Format("Let us provide Reinforcement Y'12 @ 110mm c/c"));
            list.Add(string.Format(""));

            double spcng = bar_spc1;
            double Ast_prov = (Math.PI * bar_dia * bar_dia / 4) * (1000.0 / spcng); ;
            list.Add(string.Format("Ast Provided = (3.1416 x {0} x {0} / 4) x (1000 / {1}) = {2:f3} Sq.mm.", bar_dia, spcng, Ast_prov));
            list.Add(string.Format(""));
            list.Add(string.Format("Mx = {0:f3} KNm", Mx1));

            list.Add(string.Format("Mx / m = {0:f3} KN.m/m", bm1));
            list.Add(string.Format("Vx (Bond) / m = {0:f3} KN/m", Vx));
            list.Add(string.Format("Vx (1 -1) / m = {0:f3} KN/m", _Vx_1_1_a));
            list.Add(string.Format(""));


            double _My_m = My;

            My = _My_m * P2;
            list.Add(string.Format("My = {0:f3} KNm", My));
            list.Add(string.Format("My / m = {0:f3} KNm / m", _My_m));
            list.Add(string.Format("Vy (Bond) / m = {0:f3} KN / m", Vy));
            list.Add(string.Format("Vy (2 - 2) / m = {0:f3} KN/m", _Vy_2_2_b));
            list.Add(string.Format(""));


            double Mtotal = Math.Max(Mx1, My);
            if (Mx1 > My)
            {
                list.Add(string.Format("Mx > My"));
                list.Add(string.Format(""));
                list.Add(string.Format("Therefore, Mtotal = Mx = {0:f3} KNm", Mtotal));
            }
            else
            {
                list.Add(string.Format("My > Mx"));
                list.Add(string.Format(""));
                list.Add(string.Format("Therefore, Mtotal = My = {0:f3} KNm", Mtotal));
            }


            d = D;
            b = P1 * 1000;
            double j = 0.94;
            j = 0.5 + Math.Pow((0.025 - (Mx * 1000000) / (0.87 * fck * 1000 * d * d)), 0.5);



            list.Add(string.Format("d = {0} mm", d));
            list.Add(string.Format("b = p1 = {0} mm", b));
            list.Add(string.Format("j = {0:f3}", j));
            list.Add(string.Format(""));

            double Vtot = Math.Max(Vx, Vy);
            list.Add(string.Format("Vtot = Max of Vx/m & Vy/m = {0:f3} KN/m", Vtot));
            list.Add(string.Format(""));

            double Ast_req = (Mtotal * 1000 * 1000) / (0.87 * j * d * fy);
            list.Add(string.Format("Required Ast = (Mtotal x 1000 x 1000) / (0.87 x j x d x fy)"));
            list.Add(string.Format("             = ({0:f3} x 1000 x 1000) / (0.87 x {1:f3} x {2} x {3})", Mtotal, j, d, fy));
            list.Add(string.Format("             = {0:f3} Sq.mm.", Ast_req));
            list.Add(string.Format(""));



            //double bar_dia2 = bar_dia;
            double spcng2 = bar_spc2;

            Ast_prov = (Math.PI * bar_dia * bar_dia / 4);

            //double bar_nos = (int)(Ast_req / Ast_prov);


            //double bar_nos = (int)(1000 / spcng2);
            double bar_nos = (int)(BOQ.Footing_Base_B1 * 1000 / spcng2);

            bar_nos += 1.0;

            //spcng2 = (1000.0 / bar_nos);

            Steel_Reinforcement ssr = new Steel_Reinforcement();
            ssr.BarMark = "F_AST[1]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = BOQ.Footing_Base_L1 - 2 * c / 1000;
            BOQ.Steel_Reinforcement.Add(ssr);



            bar_nos = (int)(BOQ.Footing_Base_L1 * 1000 / spcng2);
            ssr = new Steel_Reinforcement();
            ssr.BarMark = "F_AST[2]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = BOQ.Footing_Base_B1 - 2 * c / 1000;
            BOQ.Steel_Reinforcement.Add(ssr);


            double Ast1 = 0;
            Ast_prov = (Math.PI * bar_dia * bar_dia / 4) * (1000 / spcng2);

            Ast1 = Ast_prov;

            list.Add(string.Format("Provide Y'{0} @ {1} mm c/c", bar_dia, spcng2));
            list.Add(string.Format("Ast provided = (3.1416 x {0} x {0} / 4) x (1000 / {1})", bar_dia2, spcng2));
            list.Add(string.Format("             = {0:f3} Sq.mm.", Ast_prov));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion STEP 2 : PUNCHING SHEAR FORCE

            #region STEP 3 : CHECK FOR BOND

            list.Add(string.Format("-----------------------------"));
            //list.Add(string.Format("STEP {0}.3 : CHECK FOR BOND :", step));
            list.Add(string.Format("STEP 3 : CHECK FOR BOND ", step));
            list.Add(string.Format("-----------------------------"));
            list.Add(string.Format(""));

            j = 1 - ((Ast_prov * fy) / (fck * b * d));
            list.Add(string.Format("j = 1 - [(Ast x fy) / (fck x b x d)]"));
            list.Add(string.Format("  = 1 - [({0:f3} x {1}) / ({2} x {3} x {4})]", Ast_prov, fy, fck, b, d));
            //list.Add(string.Format("  = 1 - 0.0637"));
            list.Add(string.Format("  = {0:f3}", j));
            list.Add(string.Format(""));

            double M_V = (Ast_prov * 0.87 * fy * j * d) / (Vtot * 1000);
            list.Add(string.Format("    M/V = (Ast x 0.87 x fy x j x d) / (Vtot x 1000)"));
            list.Add(string.Format("        = {0:f3} x 0.87 x {1} x {2:f3} x {3} / ({4:f3} x 1000)", Ast_prov, fy, j, d, Vtot));
            list.Add(string.Format("        = {0:f3} mm", M_V));
            list.Add(string.Format(""));

            double Lo = d / 2;
            list.Add(string.Format("Lo = d / 2 = {0} / 2 = {1} mm.", d, Lo));
            list.Add(string.Format(""));

            val1 = M_V + Lo;
            list.Add(string.Format("(M / V) + Lo = {0:f3} + {1} = {2:f3} mm", M_V, Lo, val1));
            list.Add(string.Format(""));

            double Ld = 47 * bar_dia2;
            list.Add(string.Format("Development Length = Ld = 47 x Bar_dia"));
            list.Add(string.Format("                        = 47 x {0} ", bar_dia2));
            if (Ld < val1)
                list.Add(string.Format("                        = {0:f3} mm < {1:f3} mm, OK", Ld, val1));
            else
                list.Add(string.Format("                        = {0:f3} mm > {1:f3} mm, NOT OK", Ld, val1));
            list.Add(string.Format(""));


            D = D1;
            double dp = ph;
            list.Add(string.Format("Overall depth of Footing = D = {0} mm", D));
            list.Add(string.Format("Providing depth of Pedestal = dp = {0} mm", dp));


            double tot_dep = D + dp;
            list.Add(string.Format("Total Overall depth of Footing + Pedestal = D + dp = {0} + {1} = {2} mm", D, dp, tot_dep));
            list.Add(string.Format(""));
            list.Add(string.Format("Pedestal Reinforcement"));
            list.Add(string.Format(""));

            Ast_req = (0.12 / 1000) * P1 * 1000 * P2 * 1000;
            list.Add(string.Format("Area of Steel required = (0.12 / 1000) x p1 x p2"));
            list.Add(string.Format("                       = (0.12 / 1000) x {0} x {1}", P1 * 1000, P2 * 1000));
            list.Add(string.Format("                       = {0:f3} Sq.mm.", Ast_req));
            list.Add(string.Format(""));


            double bar_dia3 = bar_dia;
            bar_nos = 10;

            Ast_prov = (Math.PI * bar_dia3 * bar_dia3 / 4.0);




            bar_nos = (int)(Ast_prov / Ast_req);
            bar_nos += 1;
            list.Add(string.Format("Provide {0} nos Y'{1} bars.", bar_nos, bar_dia3));

            ssr = new Steel_Reinforcement();
            ssr.BarMark = "F_AST[3]";
            ssr.Number_Of_Bars = (int)bar_nos;
            ssr.Bar_Dia = bar_dia;
            ssr.Length = 2 * (BOQ.Pedestal_L2 + BOQ.Pedestal_B2) - 4 * c / 1000;
            BOQ.Steel_Reinforcement.Add(ssr);



            list.Add(string.Format("Ast Provided = (3.1416 X {0} X {0} / 4) X {1} = {2:f3} Sq.mm.", bar_dia3, bar_nos, Ast_prov));
            list.Add(string.Format(""));


            #endregion STEP 3 : CHECK FOR BOND

            #region STEP 4 : DESIGN SUMMARY
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 4 : DESIGN SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));
            Design_Summary.Add(string.Format("------------------------------------------------"));
            //Design_Summary.Add(string.Format("FOUNDATION = {0}, ELEVATION = {1} M", Foot_Des.F));
            Design_Summary.Add(string.Format("FOUNDATION = {0}", "F1"));


            Design_Summary.Add(string.Format("Size of Foundation/Footing = l x b = {0:f3} x {1:f3} Sq.m.", BOQ.Footing_Base_L1, BOQ.Footing_Base_B1));
            Design_Summary.Add(string.Format("Overall thickness of Footing at the face of Pedestal = D1 = {0} mm", D1));
            Design_Summary.Add(string.Format("Thickness of Footing at the edge of Foundation = D2 = {0} mm", D2));
            Design_Summary.Add(string.Format("Depth of Foundation / Overburden Soil = h = {0:f3} m", h));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Size of Pedestal = P1 x P2 = {0:f3} x {1:f3} Sq.m.", P1, P2));
            Design_Summary.Add(string.Format("Height of Pedestal = ph = {0} mm", ph));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Size of Column =  C1 x C2 = {0:f3} x {1:f3} Sq.m.", C1, C2));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format(""));
            //list.Add(string.Format("Provide T20 @ 130 mm c/c Rebars both ways at Bottom, (Ast = 2416.610 Sq.mm)"));
            Design_Summary.Add(string.Format("Provide T{0} @ {1} mm c/c Rebars both ways at Bottom, (Ast = {2:f3} Sq.mm)", bar_dia, bar_spc1, Ast1));
            Design_Summary.Add(string.Format("Bar mark in drawing = F_Ast[1] as Span Steel (Bottom). "));
            Design_Summary.Add(string.Format(""));

            Design_Summary.Add(string.Format("Provide T{0} @ {1} mm c/c Transverse Reinf. Bars, (Ast = {2:f3} Sq.mm)", bar_dia2, bar_spc2, Ast_prov));
            Design_Summary.Add(string.Format("Bar mark in drawing = F_Ast[2] as Transverse Direction. "));
            Design_Summary.Add(string.Format(""));

            list.AddRange(Design_Summary.ToArray());
            list.Add(string.Format(""));
            #endregion STEP 4 : DESIGN SUMMARY

            //list.Add(string.Format("-------------------------------"));
            ////list.Add(string.Format("STEP {0}.4 : BILL OF QUANTITY", step));
            //list.Add(string.Format("STEP 5 : BILL OF QUANTITY", step));
            //list.Add(string.Format("-------------------------------"));
            //list.AddRange(BOQ.Get_Text());
            //list.Add(string.Format(""));

            #region STEP 5 : BOQ SUMMARY
            list.Add(string.Format(""));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format("STEP 5 : BOQ SUMMARY"));
            list.Add(string.Format("------------------------------------"));
            list.Add(string.Format(""));

            BOQ_Summary = new List<string>();

            //BOQ_Summary.Add(string.Format("Size of Foundation/Footing = l x b = {0:f3} x {1:f3} Sq.m.", BOQ.Footing_Base_L1, BOQ.Footing_Base_B1));
            //BOQ_Summary.Add(string.Format("Overall thickness of Footing at the face of Pedestal = D1 = {0} mm", D1));
            //BOQ_Summary.Add(string.Format("Thickness of Footing at the edge of Foundation = D2 = {0} mm", D2));
            //BOQ_Summary.Add(string.Format("Depth of Foundation / Overburden Soil = h = {0:f3} m", h));
            //BOQ_Summary.Add(string.Format(""));
            //BOQ_Summary.Add(string.Format("Size of Pedestal = P1 x P2 = {0:f3} x {1:f3} Sq.m.", P1, P2));
            //BOQ_Summary.Add(string.Format("Height of Pedestal = ph = {0} mm", ph));
            //BOQ_Summary.Add(string.Format(""));
            //BOQ_Summary.Add(string.Format("Size of Column =  C1 x C2 = {0:f3} x {1:f3} Sq.m.", C1, C2));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));

            double con_qty = BOQ.Footing_Base_L1 * BOQ.Footing_Base_B1 * BOQ.Footing_Base_H1;
            BOQ_Summary.Add(string.Format("Concrete Quantity "));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Foundation = l x b x h"));
            BOQ_Summary.Add(string.Format("           = {0:f3} x {1:f3} x {2:f3}",
                BOQ.Footing_Base_L1,
                BOQ.Footing_Base_B1,
                BOQ.Footing_Base_H1));
            BOQ_Summary.Add(string.Format("           = {0:f3} Cu.m", con_qty));
            BOQ_Summary.Add(string.Format(""));

            con_qty = BOQ.Pedestal_L2 * BOQ.Pedestal_B2 * BOQ.Pedestal_H2;
            BOQ_Summary.Add(string.Format("Pedestal = P1 x P2 x Ph"));
            BOQ_Summary.Add(string.Format("         = {0:f3} x {1:f3} x {2:f3}",
                BOQ.Pedestal_L2,
                BOQ.Pedestal_B2,
                BOQ.Pedestal_H2));
            BOQ_Summary.Add(string.Format("         = {0:f3} Cu.m", con_qty));

            BOQ_Summary.Add(string.Format(""));
            //list.Add(string.Format("Provide T20 @ 130 mm c/c Rebars both ways at Bottom, (Ast = 2416.610 Sq.mm)"));
            BOQ_Summary.Add(string.Format("Provide T{0} @ {1} mm c/c Rebars both ways at Bottom, (Ast = {2:f3} Sq.mm)", bar_dia, bar_spc1, Ast1));
            //BOQ_Summary.Add(string.Format("Bar mark in drawing = F_Ast[1] as Span Steel (Bottom). "));
            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f3} = {3:f3} Ton",
                BOQ.Steel_Reinforcement[0].Number_Of_Bars,
                BOQ.Steel_Reinforcement[0].Length,
                BOQ.Steel_Reinforcement[0].Bar_Weight,
                BOQ.Steel_Reinforcement[0].Total_Weight));

            BOQ_Summary.Add(string.Format("Provide T{0} @ {1} mm c/c Transverse Reinf. Bars, (Ast = {2:f3} Sq.mm)", bar_dia2, bar_spc2, Ast_prov));
            BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f3} = {3:f3} Ton",
              BOQ.Steel_Reinforcement[1].Number_Of_Bars,
              BOQ.Steel_Reinforcement[1].Length,
              BOQ.Steel_Reinforcement[1].Bar_Weight,
              BOQ.Steel_Reinforcement[1].Total_Weight));

            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("-----------------------------------------------------------------------------------------"));

            list.AddRange(BOQ_Summary.ToArray());
            list.Add(string.Format(""));
            #endregion STEP 4 : DESIGN SUMMARY

            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF DESIGN        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            list.Add("");

            if (Report_File != "")
            {
                File.WriteAllLines(Report_File, list.ToArray());
                File.WriteAllLines(File_Design_Summary, Design_Summary.ToArray());


                string tmp_file = Get_Report_File(step);
                File.WriteAllLines(tmp_file, list.ToArray());

                tmp_file = Get_BOQ_File(step);
                File.WriteAllLines(tmp_file, BOQ_Summary.ToArray());

                tmp_file = Get_Design_Summary_File(step);
                File.WriteAllLines(tmp_file, Design_Summary.ToArray());
            }

            return list;

        }

        public string Get_Report_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "DESIGN_F" + step.ToString("000") + ".TXT");
            return tmp_file;
        }

        public string Get_BOQ_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            tmp_file = Path.Combine(tmp_file, "BOQ");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "BOQ_F" + step.ToString("000") + ".TXT");
            return tmp_file;
        }

        public string Get_Design_Summary_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            tmp_file = Path.Combine(tmp_file, "DESIGN SUMMARY");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "DESIGN_SUMMARY_F" + step.ToString("000") + ".TXT");
            return tmp_file;
        }

        public string File_Design_Summary
        {
            get
            {
                string des_sum = Path.Combine(Path.GetDirectoryName(Get_Report_File(1)), "FOUNDATION_DESIGN_SUMMARY.TXT");
                return des_sum;
            }
        }
        public void Write_All_Data()
        {
            List<string> list = new List<string>();


            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*      DESIGN OF ISOLATED RCC FOOTING        *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");
            #endregion TechSOFT Banner


            //foreach (var item in Directory.GetFiles(Path.GetDirectoryName(Get_Report_File(1))))
            //{
            //    if (Path.GetExtension(item).ToUpper() == ".TXT")
            //        list.AddRange(File.ReadAllLines(item));
            //}

            #region End of Report
            list.Add("");
            list.Add("---------------------------------------------------------------------------");
            list.Add("---------------------       END OF REPORT        --------------------------");
            list.Add("---------------------------------------------------------------------------");
            #endregion End of Report

            File.WriteAllLines(Report_File, list.ToArray());

        }


    }

    /**/
    public class PileFoundation
    {
        public string Report_File = "";
        public string user_input_file = "";
        //public string user_drawing_file = "";
        //public string user_path = "";
        //public string file_path = "";
        //public string system_path = "";
        public bool is_process = false;
        //public IApplication iApp = null;

        public string ColumnNo { get; set; }

        public double D, P, K, AM, N_gamma, PL, Nq, Nc, FS, PCBL, SL, FL, sigma_ck, fy, gamma_c;
        public double Np, N, gamma_sub, cap_sigma_ck, cap_fy, sigma_cbc, sigma_st, m, F, d1, d2, d3;
        public double LPC, BPC, LPr, BPr, DPC, l1, l2, l3;


        //chiranjit [2013 06 17]
        public string BoreholeNo { get; set; }

        string _1, _2, _3, _4;

        public PileFoundationTableCollection pft_list = null;

        public List<string> Design_Summary { get; set; }
        public List<string> BOQ_Summary { get; set; }

        public Pile_Foundation_BOQ BOQ { get; set; }

        //public PileFoundation(IApplication app)
        //{
        //    iApp = app;
        //}
        public PileFoundation()
        {
            //iApp = app;
            Design_Summary = new List<string>();
            BOQ_Summary = new List<string>();
        }


        #region IReport Members

        public static List<string> Get_Banner()
        {

            List<string> list = new List<string>();


            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*      DESIGN OF RCC PILE FOUNDATION         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");
            #endregion TechSOFT Banner

            return list;
        }

        public void Calculate_Program()
        {
            string ref_string = "";
            StreamWriter sw = new StreamWriter(new FileStream(Report_File, FileMode.Create));
            try
            {
                #region TechSOFT Banner
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("\t\t***********************************************");
                sw.WriteLine("\t\t*            ASTRA Pro Release 18.0           *");
                sw.WriteLine("\t\t*        TechSOFT Engineering Services        *");
                sw.WriteLine("\t\t*                                             *");
                sw.WriteLine("\t\t*       DESIGN OF RCC PILE FOUNDATION         *");
                sw.WriteLine("\t\t*                                             *");
                sw.WriteLine("\t\t***********************************************");
                sw.WriteLine("\t\t----------------------------------------------");
                sw.WriteLine("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
                sw.WriteLine("\t\t----------------------------------------------");

                #endregion

                #region USER DATA

                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("USER'S DATA");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("FOR DESIGN OF PILE");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                sw.WriteLine("Pile Diameter [D] = {0} m", D);
                sw.WriteLine("Applied Load on Pile Group = {0} Ton", P);
                sw.WriteLine("Applied Moment on Pile Group  = {0} Ton-m", AM);
                sw.WriteLine("Coefficient of Active Earth Pressure [K] = {0}", K);


                double phi = pft_list[pft_list.Count - 1].Phi;

                if (pft_list.Count > 0)
                    Tables.Terzaghi_Bearing_Capacity_Factors(phi, ref Nc, ref Nq, ref N_gamma, ref ref_string);   //Chiranjit [2013 06 17;


                //sw.WriteLine("Nγ = {0}",  N_gamma );
                //sw.WriteLine("Nq = {0}",  Nq );
                //sw.WriteLine("Nc = {0}",  Nc );
                sw.WriteLine("Factor of Safety [FS] = {0}", FS);
                sw.WriteLine("Pile Cap Bottom Level [PCBL] = {0} m", PCBL);
                sw.WriteLine("Scour Level [SL) = {0} m", SL);
                sw.WriteLine("Founding Level [FL] = {0}", FL);
                sw.WriteLine("Concrete Grade [σ_ck] = M{0:f0}", sigma_ck);
                sw.WriteLine("Steel Grade [fy] = Fe{0:f0}", fy);
                sw.WriteLine("Unit Weight of Concrete [γ_c] = {0} Ton/cm", gamma_c);
                sw.WriteLine("Total Piles [Np] = {0}", Np);
                sw.WriteLine("Total Piles in front row [N] = {0}", N);
                //sw.WriteLine("γ_sub = {0} Ton/cu.m",  gamma_sub );

                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("FOR DESIGN OF PILE CAP");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                sw.WriteLine("Concrete Grade [σ_ck] = M {0:f0}", cap_sigma_ck);
                sw.WriteLine("Steel Grade [fy] = Fe {0:f0}", cap_fy);
                sw.WriteLine();
                sw.WriteLine("Allowable Stress in concrete");
                sw.WriteLine("in bending compression [σ_cbc] = {0} N/sq.mm = {1} kg/sq.cm", sigma_cbc, (sigma_cbc *= 10));
                sw.WriteLine("Allowable stress in steel [σ_st] = {0} N/sq.mm = {1} kg/sq.cm", sigma_st, (sigma_st = sigma_st * 10));
                sw.WriteLine("Modular Ratio [m] = {0}", m);
                sw.WriteLine("Load Factor [F] = {0}", F);


                sw.WriteLine("Diameter of Main Steel Reinforcement bars [d1] = {0} mm", d1);
                sw.WriteLine("Bottom Reinforcement Bar Diameter [d2] = {0} mm", d2);
                sw.WriteLine("Top Reinforcement Bar Diameter [d3] = {0} mm", d3);
                sw.WriteLine("Pile Cap Length [LPC] = {0} mm                  Marked as (LPC) in the Drawing", LPC);
                sw.WriteLine("Pile Cap Width [BPC] = {0} mm                   Marked as (BPC) in the Drawing", BPC);
                sw.WriteLine("Pier Length [LPr] = {0} mm                      Marked as (LPr) in the Drawing", LPr);
                sw.WriteLine("Pier Width [BPr] = {0} mm                       Marked as (BPr) in the Drawing", BPr);
                sw.WriteLine("Depth of Pile Cap [DPC] = {0} mm                Marked as (DPC) in the Drawing", DPC);
                sw.WriteLine("Distance   [L1] = {0} mm                        Marked as (L1) in the Drawing", l1);
                sw.WriteLine("Distance   [L2] = {0} mm                         Marked as (L2) in the Drawing", l2);
                sw.WriteLine("Distance   [L3] = {0} mm                        Marked as (L3) in the Drawing", l3);

                #endregion

                #region DESIGN CALCULATIONS
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("DESIGN CALCULATIONS");
                sw.WriteLine("------------------------------------------------------------");
                #endregion

                #region STEP 1 : CAPACITY FROM SOIL STRUCTURE INTERACTION
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("STEP 1 : CAPACITY FROM SOIL STRUCTURE INTERACTION");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                double L1 = PCBL - FL;
                L1 = double.Parse(L1.ToString("0.000"));
                sw.WriteLine("Pile Length = PL = PCBL - FL");
                sw.WriteLine("                 = {0:f3} - {1:f3}", PCBL, FL);
                sw.WriteLine("                 = {0:f3} m", L1);

                double L2 = SL - FL;
                L2 = double.Parse(L2.ToString("0.000"));
                sw.WriteLine();
                sw.WriteLine("Embedded Length = EL = SL - FL");
                sw.WriteLine("                     = {0:f3} - {1:f3}", SL, FL);
                sw.WriteLine("                     = {0:f3} m", L2);
                sw.WriteLine();

                double Ap = Math.PI * D * D / 4.0;
                Ap = double.Parse(Ap.ToString("0.000"));
                sw.WriteLine("Cross Sectional Area of PIle = Ap = π*D*D/4");
                sw.WriteLine("                             = π*{0}*{0}/4", D);
                sw.WriteLine("                             = {0:f3} sq.m", Ap);
                sw.WriteLine();

                #region (A) FOR COHESIONLESS COMPONENT OF SOIL
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("(A) FOR COHESIONLESS COMPONENT OF SOIL :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                #endregion

                #region SKIN FRICTION
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("SKIN FRICTION :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                #endregion

                //sw.WriteLine("Layers ,Thickness, Depth below, Surface, φ (deg), δ (deg), γ_sub, P_D, P_Di");
                //sw.WriteLine("Layers ,of Sub soil Layer, scour level(H), Area (As), φ (deg), δ (deg), γ_sub, Pd, Pdi");
                sw.WriteLine();
                sw.WriteLine("Borehole No. : {0}", BoreholeNo);
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                       "Layer",
                       "Depth upto",
                       "Thickness",
                       "Depth below",
                       "Surface",
                       "φ    ",
                       "δ    ",
                       "γ_sub",
                       "P_D   ",
                       "P_Di  ");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                       "Nos.",
                                       "bottom ",
                                       "of Sub ",
                                       "scour  ",
                                       "Area  ",
                                       "(deg)",
                                       "(deg)",
                                       "Ton /",
                                       "γ_sub*H",
                                       "Ton /");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                                      "",
                                                      "of Layer",
                                                      "soil Layer",
                                                      "level(H) ",
                                                      "(As)  ",
                                                      "",
                                                      "",
                                                      "cu.m",
                                                      "Ton /",
                                                      "sq.mm");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                                        "",
                                                        "(m)   ",
                                                        "(m)    ",
                                                        "(m)   ",
                                                        "",
                                                        "",
                                                        "",
                                                        "",
                                                        "sq.m",
                                                        "");
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                for (int i = 0; i < pft_list.Count; i++)
                {
                    sw.WriteLine("{0,-6:f0} {1,10:f3} {2,10:f3} {3,12:f3} {4,8:f2} {5,6:f1}° {6,6:f1}° {7,7:f3} {8,10:f3} {9,7:f3}",
                        pft_list[i].Layers,
                        pft_list[i].Depth,
                        pft_list[i].Thickness,
                        pft_list[i].H_DepthBelowScourLevel,
                        pft_list[i].SurfaceArea,
                        pft_list[i].Phi,
                        pft_list[i].Delta,
                        pft_list[i].GammaSub,
                        pft_list[i].P_D,
                        pft_list[i].P_Di);
                }
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                sw.WriteLine();
                for (int i = 0; i < pft_list.Count; i++)
                {
                    if (i == 0)
                    {
                        sw.WriteLine("P_Di[1] = (0 + {0})/2 = {1} Ton/sq.m", pft_list[0].P_D, pft_list[0].P_Di);
                    }
                    else
                    {
                        //sw.WriteLine("P_Di1 = (0 + {0})/2 = {1} Ton/sq.m", pft_list[0].P_D, pft_list[0].P_Di);
                        sw.WriteLine("P_Di[{0}] = ({1} + {2})/2 = {3} Ton/sq.m",
                            (i + 1),
                            pft_list[i - 1].P_D,
                            pft_list[i].P_D,
                            pft_list[i].P_Di);

                    }
                }
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Ultimate Resistance by Skin Friction :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                double sk_frc, Rfs;
                sk_frc = 0;
                Rfs = 0;

                List<double> list_dbl = new List<double>();
                for (int i = 0; i < pft_list.Count; i++)
                {
                    sk_frc = pft_list[i].SurfaceArea * K * pft_list[i].P_Di * Math.Tan((Math.PI / 180.0) * pft_list[i].Delta);
                    sk_frc = double.Parse(sk_frc.ToString("0.000"));
                    Rfs += sk_frc;

                    list_dbl.Add(sk_frc);
                    //sw.WriteLine("For Layer {0} : As{1}* K * P_Di{1} * tan δ", pft_list[i].Layers, (i + 1));

                    sw.WriteLine("For Layer {0} : As[{1}]* K * P_Di[{1}] * tan δ",
                        pft_list[i].Layers,
                        (i + 1));
                    sw.WriteLine("            = {0} * {1} * {2} * tan {3}",
                         pft_list[i].SurfaceArea,
                         K,
                         pft_list[i].P_Di,
                         pft_list[i].Delta);
                    sw.WriteLine("            = {0} Ton", sk_frc);
                    sw.WriteLine();
                }


                sw.WriteLine("Total Ultimate Resistance due to Skin Friction = Rfs = {0} Ton", Rfs);

                for (int i = 0; i < pft_list.Count; i++)
                {
                }

                sw.WriteLine();

                #endregion

                #region END BEARING
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("END BEARING");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Ultimate Resistance by End Bearing :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine("Referring to Table No. 2, given at the end of this report,");
                sw.WriteLine();
                sw.WriteLine("For the value of φ = {0} deg, Nc = {1}, Nq = {2} and Nγ = Nr = {3}", phi, Nc, Nq, N_gamma);
                sw.WriteLine();
                sw.WriteLine();

                double R_us = Ap * ((1.0 / 2.0) * 0.92 * D * N_gamma);

                int cnt = pft_list.Count;

                if (cnt >= 1)
                {
                    R_us = Ap * ((1.0 / 2.0) * pft_list[cnt - 1].GammaSub * D * N_gamma + (pft_list[cnt - 1].P_D * Nq));

                    sw.WriteLine("R_us = Ap * ((1/2) * γ * D * Nγ + P_D[{0}] * Nq) ", cnt);
                    sw.WriteLine("     = {0:f3} * (0.5 * {1:f3} * {2} * {3:f3} + {4:f3} * {5:f3})) ",
                        Ap,
                        pft_list[cnt - 1].GammaSub,
                        D,
                        N_gamma,
                        pft_list[cnt - 1].P_D,
                        Nq);
                    sw.WriteLine();
                    sw.WriteLine("     = {0:f3} Ton", R_us);
                }
                sw.WriteLine();

                double total_resist = Rfs + R_us;
                sw.WriteLine("Total Ultimate Resistance of Pile = Rfs + R_us");
                sw.WriteLine("                                  = {0:f3} + {1:f3}", Rfs, R_us);
                sw.WriteLine("                                  = {0:f3} Ton", total_resist);
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("Factor of Safety = FS = {0}", FS);
                double Qus = total_resist / FS;

                sw.WriteLine();
                sw.WriteLine("Safe Load on Pile = {0:f3} / {1} = {2:f3} Ton", total_resist, FS, Qus);

                #endregion

                #region END BEARING
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("(B) FOR COHESIVE COMPONENT OF SOIL :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("-----------------------------------------------------------------------------");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "Layers",
                    "Layer",
                    "Depth",
                    "Surface",
                    "",
                    "",
                    "Ultimate");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "",
                    "Thickness",
                    "below Scour",
                    "Area  ",
                    "α  ",
                    "c  ",
                    "resistance");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "",
                    "[D](m)",
                    "Level[H](m)",
                    "[As](sq.m)",
                    "",
                    "",
                    "[As*α*c](Ton)");
                sw.WriteLine("-----------------------------------------------------------------------------");

                double Rfc = 0.0;

                for (int i = 0; i < pft_list.Count; i++)
                {
                    sk_frc = (pft_list[i].SurfaceArea * pft_list[i].Alpha * pft_list[i].Cohesion);
                    Rfc += sk_frc;
                    sw.WriteLine("{0,-6} {1,10:f3} {2,14:f3} {3,14:f3} {4,7:f3} {5,7:f3} {6,7:f3}",
                    pft_list[i].Layers,
                    pft_list[i].Thickness,
                    pft_list[i].H_DepthBelowScourLevel,
                    pft_list[i].SurfaceArea,
                    pft_list[i].Alpha,
                    pft_list[i].Cohesion,
                    sk_frc);
                }
                sw.WriteLine("-----------------------------------------------------------------------------");
                sw.WriteLine("{0,63} {1,7:f3} Ton",
                    "Total Ultimate Resistance = ",
                    Rfc);
                sw.WriteLine();
                //sw.WriteLine("Total Ultimate Resistance = {0:f3} Ton", Rfc);
                //sw.WriteLine();

                //Chiranjit [2013 06 17]

                sw.WriteLine("Referring to Table No. 2, given at the end of this report,");
                sw.WriteLine();
                sw.WriteLine("For the value of φ = {0} deg, Nc = {1}, Nq = {2} and Nr = {3}", phi, Nc, Nq, N_gamma);
                sw.WriteLine();

                double end_brng = Ap * pft_list[cnt - 1].Cohesion * Nc;
                sw.WriteLine("End Bearing = Ap * C[{0}] * Nc", cnt);
                sw.WriteLine("            = {0} * {1} * {2}", Ap, pft_list[cnt - 1].Cohesion, Nc);
                sw.WriteLine("            = {0:f3} ", end_brng);
                sw.WriteLine();

                double Qu = Rfc + end_brng;
                sw.WriteLine("Total Ultimate Resistance of Pile = Qu");
                sw.WriteLine("    Qu = {0:f3} + {1:f3} = {2:f3} Ton", Rfc, end_brng, Qu);
                sw.WriteLine();
                sw.WriteLine("Factor of Safety = FS = {0}", FS);
                sw.WriteLine();

                double Quc = Qu / FS;
                sw.WriteLine("Safe Load on Pile = {0:f3}/{1} = {2:f3} Ton", Qu, FS, Quc);
                sw.WriteLine();

                double perm_load = Qus + Quc;
                sw.WriteLine("Permissible safe Load on Pile = Qus + Quc");
                sw.WriteLine("                              = {0:f3} + {1:f3}", Qus, Quc);
                sw.WriteLine("                              = {0:f3} Ton", perm_load);
                sw.WriteLine();
                sw.WriteLine("Applied Load on Pile = P = {0} Ton", P);
                sw.WriteLine();



                double load_cap = (LPC * BPC * DPC / 10E8) * gamma_c;
                //sw.WriteLine("Applied Load on Pile Group         = P = 216.000 Ton");
                sw.WriteLine("");
                sw.WriteLine("Load by Pile Cap on Pile Group = LPC x BPC x DPC x γ_c ");
                sw.WriteLine("                               = {0:f3} x {1:f3} x {2:f3} x {3:f3}", (LPC / 1000.0), (BPC / 1000.0), (DPC / 1000.0), gamma_c);
                sw.WriteLine("                               = {0:f3} Ton", load_cap);
                sw.WriteLine("");
                double self_wt = Ap * L1 * (gamma_c - 1.0);

                sw.WriteLine("Self weight of each Pile = Ap * L1 * (γ_c - 1)");
                sw.WriteLine("                    = {0:f3} * {1} * ({2} - 1)", Ap, L1, gamma_c);
                sw.WriteLine("                    = {0:f3} Ton", self_wt);
                sw.WriteLine();
                //sw.WriteLine("Self weight of each Pile                 = Ap * L1 * (γ_c - 1)");
                //sw.WriteLine("                                    = 0.785 * 25 * (2.5 - 1)");
                //sw.WriteLine("                                    = 29.438 Ton");
                sw.WriteLine("");

                double total_load = (P + load_cap) / Np + self_wt;
                sw.WriteLine("Total Load on Pile  = Pu");
                sw.WriteLine("                    = (P + Load by Pile Cap on Pile Group)/ Total Piles [Np] + Self weight of Pile");
                sw.WriteLine("                    = ({0:f3} + {1:f3})/{2:f0} + {3:f3} ", P, load_cap, Np, self_wt);
                sw.WriteLine("                    = {0:f3} + {1:f3}", ((P + load_cap) / Np), self_wt);
                //sw.WriteLine("= 100.772 Ton < 449.824 Ton, Hence, Safe");
                sw.WriteLine("");

                double Pu = total_load;


                //double total_load = P + self_wt;
                if (total_load < perm_load)
                    sw.WriteLine("                    = {0:f3} Ton < {1:f3} Ton, Hence, Safe", total_load, perm_load);
                else
                    sw.WriteLine("                    = {0:f3} Ton > {1:f3} Ton, Hence, Unsafe, NOT OK", total_load, perm_load);


                #endregion

                #region STEP 2 : STRUCTURAL DESIGN OF PILE
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("STEP 2 : STRUCTURAL DESIGN OF PILE");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();


                sw.WriteLine("Pile Dia = D = {0} m = {1} mm", D, (D * 1000));
                D = D * 1000;
                sw.WriteLine();
                double cover = 0.1 * D;
                frmPile_Graph fpg = new frmPile_Graph();

                sw.WriteLine("Cover = d' = 0.1 * D = 0.1 * {0} = {1} mm", D, cover);
                sw.WriteLine();
                sw.WriteLine("Cover / Pile Dia = d' / D = {0} / {1} = {2}", cover, D, (cover / D));
                fpg.txt_ddash.Text = (cover / D).ToString("0.00");
                sw.WriteLine();

                double val1 = Pu * 1000 * 10 / (sigma_ck * D * D);
                sw.WriteLine("Pu/(σ_ck*D*D) = {0}*1000*10/({1}*{2}*{2})", Pu, sigma_ck, D);
                sw.WriteLine("              = {0:f4}", val1);
                fpg.txt_Pu.Text = val1.ToString("0.0000");
                sw.WriteLine();

                val1 = (AM * 1000 * 10 * 1000) / (sigma_ck * D * D * D);
                sw.WriteLine("Mu/(σ_ck*D**3) = {0}/({1}*{2}^3)", AM, sigma_ck, D);
                sw.WriteLine("               = {0:f4}", val1);
                fpg.txt_Mu.Text = val1.ToString("0.0000");
                sw.WriteLine();
                fpg.txt_sigma_y.Text = fy.ToString();
                fpg.txt_sigma_ck.Text = sigma_ck.ToString();
                fpg.txt_obtaned_value.Text = "0.0";

                fpg.ShowDialog();
                val1 = MyList.StringToDouble(fpg.txt_obtaned_value.Text, 0.0);
                sw.WriteLine("From figure, we get p/σ_ck = {0}", val1);
                sw.WriteLine();
                if (val1 < 0.4)
                {
                    val1 = 0.4;
                }
                sw.WriteLine("In piles provide minimum {0}% Steel.", val1);
                sw.WriteLine();

                double area_mn_st = (val1 / 100) * (Math.PI / 4.0) * D * D;
                sw.WriteLine("Area of Main Steel Reinforcement = As");
                sw.WriteLine("   As = ({0}/100) * (π / 4) * D * D", val1);
                sw.WriteLine("      = ({0}/100) * (π / 4) * {1} * {1}", val1, D);
                sw.WriteLine("      = {0:f2} sq.mm", area_mn_st);
                sw.WriteLine();

                double ar_one_st_br = (Math.PI * d1 * d1) / 4.0;
                sw.WriteLine("Area of one Steel reinforcement bar = π * {0} * {0} / 4", d1);
                sw.WriteLine("                                    = {0:f2} sq.mm", ar_one_st_br);
                sw.WriteLine();

                double total_bar = (int)((area_mn_st / ar_one_st_br) + 1);
                sw.WriteLine("Total number of bars = {0:f2} / {1:f2} = {2:f0}", area_mn_st, ar_one_st_br, total_bar);
                sw.WriteLine();
                sw.WriteLine("Provide {0} numbers T{1} mm dia bars.", total_bar, d1);
                sw.WriteLine();
                sw.WriteLine("Use 8 mm diameter lateral MS bars as Ties / Binders");
                sw.WriteLine("the pitch / spacing = r < 500 mm");
                sw.WriteLine("                        < 16*d1 = 16*{0} = {1} mm", d1, (16 * d1));

                val1 = (int)((16 * d1) / 100.0);
                val1 *= 100;

                double provide_spacing = val1;
                sw.WriteLine("                        < {0} mm", val1);
                sw.WriteLine();

                sw.WriteLine("Provide {0} numbers T{1} mm dia bars with spacing of {2} mm c/c.     Marked as (4) in the Drawing", total_bar, d1, provide_spacing);
                //(4)  Main Bars 10 Nos. Dia. 20 MM. in Piles
                _4 = string.Format("Main Bars {0} Nos. Dia. {1} mm. in Piles", total_bar, d1, provide_spacing);


                #endregion

                #region STEP 3 : STRUCTURAL DESIGN OF PILE
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("STEP 3 : DESIGN OF PILE CAP :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();

                double n = (m * sigma_cbc) / (sigma_st + (m * sigma_cbc));
                sw.WriteLine("Neutral Axis Factor = n = (m * σ_cbc) / (σ_st + (m * σ_cbc))");
                sw.WriteLine("         = ({0} * {1}) / ({2} + ({0} * {1}))", m, sigma_cbc, sigma_st);
                sw.WriteLine("         = {0:f3}", n);
                sw.WriteLine();

                double j = (1 - (n / 3));
                sw.WriteLine("Lever Arm Factor = j = 1 - (n/3) = 1 - ({0:f3}/3) = {1:f3}", n, j);
                sw.WriteLine();


                double Q = 0.5 * sigma_cbc * j * n;
                sw.WriteLine("Q = 0.5 * σ_cbc * j * n");
                sw.WriteLine("  = 0.5 * {0} * {1:f3} * {2:f3}", sigma_cbc, j, n);
                sw.WriteLine("  = {0:f3}", Q);
                sw.WriteLine();
                double P2 = N * Pu;
                sw.WriteLine("Sum of Forces on Piles in front row = P2 = N X Pu = {0} X {1} = {2} Ton", N, Pu, P2);
                //sw.WriteLine("  P2 = {0} + {1} = {2} Ton", N, P, P2);
                sw.WriteLine();

                double mom_pier = P2 * ((l1 / 1000.0) - (l2 / 1000.0));
                sw.WriteLine("Moment at the Face of Pier = P2 * ((L1 / 1000.0) - (L2 / 1000.0))");
                sw.WriteLine("                           = {0} * (({1} / 1000.0) - ({2} / 1000.0))", P2, l1, l2);
                sw.WriteLine("                           = {0:f2} Ton-m", mom_pier);
                sw.WriteLine();

                double P3 = (l1 / 1000.0) * (LPC / 1000.0) * (DPC / 1000.0) * gamma_c;
                sw.WriteLine("Relief due to self wt of Pile Cap = P3");
                sw.WriteLine(" = P3 = (L1 / 1000.0) * (LPC / 1000.0) * (DPC / 1000.0) * γ_c");
                sw.WriteLine(" = ({0} / 1000.0) * ({1} / 1000.0) * ({2} / 1000.0) * {3}", l1, LPC, DPC, gamma_c);
                sw.WriteLine(" = {0:f3} Ton", P3);
                sw.WriteLine();

                double mom_self_wt = P3 * (l1 / (1000.0 * 2));
                sw.WriteLine("Moment due to self wt of Pile Cap");
                sw.WriteLine("  = {0:f3} * (L1 / (1000.0 * 2))", P3);
                sw.WriteLine("  = {0:f3} * ({1} / (1000.0 * 2))", P3, l1);
                sw.WriteLine("  = {0:f3} Ton-m", mom_self_wt);
                sw.WriteLine();

                double total_mom = mom_pier - mom_self_wt;
                sw.WriteLine("Total Moment at the Face of Pier = {0:f3} - {1:f3} = {2:f3} Ton-m", mom_pier, mom_self_wt, total_mom);

                sw.WriteLine();


                double M = total_mom / (LPC / 1000.0);
                sw.WriteLine("Moment per Linear metre = {0:f3} / (LPC/1000)", total_mom);
                sw.WriteLine("                        = {0:f3} / ({1}/1000)", total_mom, LPC);
                sw.WriteLine("                        = {0:f2} Ton-m/m", M);
                sw.WriteLine();


                double req_dep = (M * 10E4) / (Q * 100);
                req_dep = Math.Sqrt(req_dep);

                sw.WriteLine("Depth required = √(({0:f2}*10^5)/(Q*100))", M);
                sw.WriteLine("               = √(({0:f2}*10^5)/({1:f2}*100))", M, Q);
                sw.WriteLine("               = {0:f2} cm = {1:f2} mm", req_dep, (req_dep * 10));

                req_dep = req_dep * 10;
                sw.WriteLine();
                sw.WriteLine("Overall Depth Provided = {0} mm", DPC);
                sw.WriteLine();
                sw.WriteLine("Clear Cover = 175 mm");
                sw.WriteLine();
                double half_bar_dia = d2 / 2.0;
                sw.WriteLine("Half Bar diameter of Steel Reinforcements = {0} m", half_bar_dia);
                sw.WriteLine();

                double eff_dep = DPC - 175 - half_bar_dia;
                sw.WriteLine("Effective Depth Provided = {0} - 175 - {1}", DPC, half_bar_dia);
                if (eff_dep > req_dep)
                {
                    sw.WriteLine("                         = {0:f3} mm > {1:f2} mm, Hence OK", eff_dep, req_dep);
                }
                else
                {
                    sw.WriteLine("                         = {0:f3} mm < {1:f3} mm, Hence NOT OK", eff_dep, req_dep);
                }
                double deff = eff_dep / 10;
                sw.WriteLine();
                sw.WriteLine("deff = {0} mm = {1} cm", eff_dep, deff);
                sw.WriteLine();

                double req_st_renf = (M * 10E4) / (j * sigma_st * deff * 1);
                sw.WriteLine("Required Steel Reinforcement = M * 10^5/(j*σ_st*deff*1)");
                sw.WriteLine("    = {0:f3} * 10^5/({1:f3}*{2}*{3}*1)", M, j, sigma_st, deff);
                sw.WriteLine("    = {0:f3} sq.cm/m", req_st_renf);
                sw.WriteLine();

                double req_min_tension = (0.2 / 100) * deff;
                sw.WriteLine("Required minimum Steel for tension = 0.2%");
                sw.WriteLine("                                   = (0.2/100) * {0}", deff);
                sw.WriteLine("                                   = {0:f3} sq.cm/m", req_min_tension);
                sw.WriteLine();
                sw.WriteLine("Provide Steel Reinforcements 25 Diameter bars @150 mm c/c spacing.    Marked as (2) in the Drawing");
                //(2)  Main Bottom Bars Dia. 25 @ 150 c/c
                _2 = string.Format("Main Bottom Bars Dia. 25 @ 150 c/c");


                sw.WriteLine();
                double pro_area_st = (Math.PI * d2 * d2 / 4.0) * (1000.0 / 150.0);

                pro_area_st = pro_area_st / 100;

                if (pro_area_st > req_min_tension)
                {
                    sw.WriteLine("Area of Steel Provided at the bottom of the Pile Cap");
                    sw.WriteLine("in Longitudinal direction = {0:f3} sq.cm/m > {1:f3} sq.cm/m, Hence OK",
                        pro_area_st, req_min_tension);
                }
                else
                {
                    sw.WriteLine("Area of Steel Provided at the bottom of the Pile Cap");
                    sw.WriteLine("in Longitudinal direction = {0:f3} sq.cm/m < {1:f3} sq.cm/m, Hence NOT OK",
                        pro_area_st, req_min_tension);
                }
                sw.WriteLine();

                double nom_steel = (0.06 / 100) * deff;
                sw.WriteLine("Steel Provided in Longitudinal derection at the top of ");
                sw.WriteLine("Pile Cap = Nominal Steel = 0.06% of Area");
                sw.WriteLine("         = (0.06/100) * deff");
                sw.WriteLine("         = (0.06/100) * {0}", deff);
                sw.WriteLine("         = {0:f3} sq.cm/m", nom_steel);
                sw.WriteLine();
                sw.WriteLine("Provided {0} mm dia bars at 150 mm c/c spacing.         Marked as (1) in the Drawing", d3);
                //(1)  Main Top Bars Dia. 16 @ 150 c/c
                _1 = string.Format("Main Top Bars Dia. {0} @ 150 c/c", d3);

                sw.WriteLine();

                double area_top = (Math.PI * d3 * d3 / 4.0) * (1000.0 / 150.0);
                sw.WriteLine("Area of Steel Provided = (π*{0}*{0}/4)*(1000/150)", d3);
                sw.WriteLine("                       = {0:f2} sq.mm/m", area_top);
                area_top = area_top / 100;
                sw.WriteLine("                       = {0:f2} sq.cm/m", area_top);

                sw.WriteLine();
                sw.WriteLine("Distribution Steel provided at top and bottom of Pile Cap");
                sw.WriteLine(" {0} mm dia bars at 150 mm c/c spacing", d3);
                sw.WriteLine();
                area_top = (Math.PI * d3 * d3 / 4.0) * (1000.0 / 150.0);
                sw.WriteLine("Area of Steel Provided = (π*{0}*{0}/4)*(1000/150)", d3);
                sw.WriteLine("                       = {0:f2} sq.mm/m", area_top);
                area_top = area_top / 100;
                sw.WriteLine("                       = {0:f2} sq.cm/m", area_top);
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Shear Reinforcement :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                deff = deff / 100;
                sw.WriteLine("Critical section at deff = {0} m from face of Pier", deff);
                sw.WriteLine();
                //sw.WriteLine("Factor for Distribution of Load = 0.1375");
                sw.WriteLine();

                //double P4 = P2 * 0.1375;
                double P4 = P2;

                //sw.WriteLine("Reaction on Piles in Front row  = P4 = {0} * 0.1375 = {1:f2} Ton", P2, P4);
                sw.WriteLine("Reaction on Piles in Front row  = P2 = {0:f2} Ton", P4);
                sw.WriteLine();

                //val1 = (((LPC - (l1 - deff)) / 1000.0) * DPC * gamma_c);
                deff = deff * 1000;
                val1 = (LPC / 1000.0) * ((l1 / 1000.0) - (deff / 1000.0)) * (DPC / 1000.0) * gamma_c;
                double tau_v = (P4 - val1) / (deff);

                //double _tau_v = P4 * 10 * (LPC / 1000.0) * ((l1 / 1000.0) - (deff / 1000.0));
                double _tau_v = P4 * 10 * LPC * (l1 - deff);

                tau_v = (_tau_v) / (LPC * deff * 1000);
                tau_v = double.Parse(tau_v.ToString("0.000"));

                sw.WriteLine("Nominnal Shear stress = τ_v");
                sw.WriteLine();
                //sw.WriteLine("τ_v = ((P4 - (LPC * ((LPC - (l1 - deff)) / 1000.0) * DPC * γ_c)) / (deff * 1000.0))");
                //sw.WriteLine("    = (({0:f2} - ({1} * (({1} - ({2} - {3})) / 1000.0) * {4} * {5})) / ({3} * 1000.0))",
                //    P4, LPC, l1, deff, DPC, gamma_c);


                sw.WriteLine("τ_v = (P2*10*LPC*(l1 - deff)) / (LPC * deff * 1000)");
                sw.WriteLine("    = ({0}*10*{1}*({2} - {3})) / ({1} * {3} * 1000)", P4, LPC, l1, deff);
                //sw.WriteLine();
                sw.WriteLine("    = {0:f4} N/sq.mm", tau_v);
                sw.WriteLine();

                deff = deff / 10;
                double percent = (100 * pro_area_st) / (100.0 * deff);
                percent = double.Parse(percent.ToString("0.000"));
                sw.WriteLine("Percent of bottom main reinforcement");
                sw.WriteLine(" p = (100 * {0:f3}) / (100.0 * {1})", pro_area_st, deff);
                sw.WriteLine("   = {0:f3}", percent);
                sw.WriteLine();

                double tau_c = Get_Table_1_Value(percent, cap_sigma_ck, ref ref_string);
                sw.WriteLine("Permissible Shear Stress for p = {0} and for M{1:f0} Concrete", percent, cap_sigma_ck);
                sw.WriteLine("from Table 1 (given at the end of the report). {0}", ref_string);
                sw.WriteLine();
                if (tau_c > tau_v)
                {
                    sw.WriteLine("τ_c = {0:f2} N/sq.mm > τ_v", tau_c);

                    sw.WriteLine();

                    sw.WriteLine("So, no shear Reinforcement is required and provide");
                    sw.WriteLine("provide minimum shear reinforcement.");
                    sw.WriteLine();
                    double min_shr_renf = 0.0011 * 100 * 250;
                    sw.WriteLine("Minimum Shear Reinforcement = 0.0011 * b * S");
                    sw.WriteLine("                            = 0.0011 * 100 * 250");
                    sw.WriteLine("                            = 27.50 sq.cm/m");
                    sw.WriteLine();
                    sw.WriteLine("Provide 8 mm diameter 42 legged at 200 mm c/c spacing");
                    sw.WriteLine();

                    pro_area_st = (Math.PI * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0);
                    sw.WriteLine();
                    sw.WriteLine("Area of Steel Provided = (π * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0)");
                    sw.WriteLine("                       = {0:f2} sq.mm/m", pro_area_st);

                    pro_area_st = pro_area_st / 100.0;
                    sw.WriteLine("                       = {0:f2} sq.cm/m", pro_area_st);
                }
                else
                {
                    sw.WriteLine("τ_c = {0:f2} N/sq.mm < τ_v", tau_c);
                    sw.WriteLine();

                    double bal_sh_strs = tau_v - tau_c;
                    bal_sh_strs = double.Parse(bal_sh_strs.ToString("0.000"));
                    sw.WriteLine("Balance Shear Stress");
                    sw.WriteLine();
                    sw.WriteLine("τ_v - τ_c = {0} - {1} = {2} N/sq.mm", tau_v, tau_c, bal_sh_strs);
                    sw.WriteLine();

                    double bal_shr_frc = bal_sh_strs * l1 * deff / 1000.0;
                    bal_shr_frc = double.Parse(bal_shr_frc.ToString("0"));
                    sw.WriteLine("Balance Shear Force");
                    sw.WriteLine();
                    sw.WriteLine(" = ({0} * {1} * {2}) / 1000", bal_sh_strs, l1, deff);
                    sw.WriteLine(" = {0} kN", bal_shr_frc);
                    sw.WriteLine();
                    sw.WriteLine("Using 10 mm bars @200 mm c/c            Marked as (3) in the Drawing");
                    //(3)  Shear Reinf. Bars Dia. 10, 42 Legged, Spacing 200 
                    _3 = string.Format("Shear Reinf. Bars Dia. 10, 42 Legged, Spacing 200");

                    sw.WriteLine();

                    double Ast = (bal_shr_frc * 200.0 * 1000.0) / (200.0 * deff);
                    Ast = double.Parse(Ast.ToString("0"));
                    sw.WriteLine("Required Shear Reinforcement Steel");
                    sw.WriteLine("Ast = ({0} * 200.0 * 1000.0) / (200.0 * {1})", bal_shr_frc, deff);
                    sw.WriteLine("    = {0} sq.mm", Ast);
                    sw.WriteLine("    = {0} sq.cm", (Ast / 100.0));
                    sw.WriteLine();
                    double min_shr_renf = 0.0011 * 100 * 250;
                    sw.WriteLine("Minimum Shear Reinforcement = 0.0011 * b * S");
                    sw.WriteLine("                            = 0.0011 * 100 * 250");
                    sw.WriteLine("                            = 27.50 sq.cm/m");
                    sw.WriteLine();
                    if (Ast < min_shr_renf)
                    {
                        sw.WriteLine();
                        sw.WriteLine("Provide 8 mm diameter 42 legged at 200 mm c/c spacing");
                        sw.WriteLine();

                        pro_area_st = (Math.PI * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0);
                        sw.WriteLine();
                        sw.WriteLine("Area of Steel Provided = (π * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0)");
                        sw.WriteLine("                       = {0:f2} sq.mm/m", pro_area_st);

                        pro_area_st = pro_area_st / 100.0;
                        sw.WriteLine("                       = {0:f2} sq.cm/m", pro_area_st);
                    }


                    //sw.WriteLine("τ_c = {0} N/sq.mm < τ_v", tau_c);
                    //sw.WriteLine();
                    //sw.WriteLine("Provide Shear reinforcement for balance of");
                    //sw.WriteLine("Shear Stress (τ_v - τ_c) N/sq.mm");
                    sw.WriteLine();
                }
                #endregion

                sw.WriteLine();
                Write_Table_1(sw);
                #region END OF REPORT
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("---------------------------------------------------------------------------");
                sw.WriteLine("---------------------       END OF REPORT        --------------------------");
                sw.WriteLine("---------------------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("---------------------------------------------------------------------------");
                sw.WriteLine("---------            Thank you for using ASTRA Pro          ---------------");
                sw.WriteLine("---------------------------------------------------------------------------");

                #endregion
            }
            catch (Exception ex) { }
            finally
            {
                sw.Flush();
                sw.Close();
            }
        }

        public bool IS_DESIGN_OK;
        public List<string> Design_Program_Loop_1(int step)
        {

            double bno_1, bspc_2, d4, bspa_3, bspa_4, bspa_5;

            d4 = 8;
            Design_Summary = new List<string>();


            BOQ = new Pile_Foundation_BOQ();
            IS_DESIGN_OK = true;
            string ref_string = "";
            string filename = Get_Report_File(step);
            //StreamWriter sw = new StreamWriter(new FileStream(Report_File, FileMode.Create));
            StreamWriter sw = new StreamWriter(new FileStream(filename, FileMode.Create));
            try
            {
                #region TechSOFT Banner
                //sw.WriteLine();
                //sw.WriteLine();
                //sw.WriteLine("\t\t***********************************************");
                //sw.WriteLine("\t\t*            ASTRA Pro Release 18.0           *");
                //sw.WriteLine("\t\t*        TechSOFT Engineering Services        *");
                //sw.WriteLine("\t\t*                                             *");
                //sw.WriteLine("\t\t*       DESIGN OF RCC PILE FOUNDATION         *");
                //sw.WriteLine("\t\t*                                             *");
                //sw.WriteLine("\t\t***********************************************");
                //sw.WriteLine("\t\t----------------------------------------------");
                //sw.WriteLine("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
                //sw.WriteLine("\t\t----------------------------------------------");

                #endregion


                if (ColumnNo != "")
                {
                    sw.WriteLine(string.Format(""));
                    sw.WriteLine(string.Format(""));
                    sw.WriteLine(string.Format("--------------------------------------------------"));
                    //sw.WriteLine(string.Format("STEP {0}.0 : PILE DESIGN MEMBER NO : {1}", step, ColumnNo));
                    sw.WriteLine(string.Format("PILE DESIGN {0} : MEMBER NO : {1}", step, ColumnNo));
                    sw.WriteLine(string.Format("--------------------------------------------------"));
                    sw.WriteLine(string.Format(""));
                    sw.WriteLine(string.Format(""));
                    BOQ.ColumnNos = ColumnNo;
                }

                #region USER DATA

                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("USER'S DATA");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("FOR DESIGN OF PILE");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                sw.WriteLine("Pile Diameter [D] = {0} m", D);

                BOQ.Pile_Dia = D;

                sw.WriteLine("Applied Load on Pile Group = {0} Ton", P);
                sw.WriteLine("Applied Moment on Pile Group  = {0} Ton-m", AM);
                sw.WriteLine("Coefficient of Active Earth Pressure [K] = {0}", K);


                double phi = pft_list[pft_list.Count - 1].Phi;

                if (pft_list.Count > 0)
                    Tables.Terzaghi_Bearing_Capacity_Factors(phi, ref Nc, ref Nq, ref N_gamma, ref ref_string);   //Chiranjit [2013 06 17;


                //sw.WriteLine("Nγ = {0}",  N_gamma );
                //sw.WriteLine("Nq = {0}",  Nq );
                //sw.WriteLine("Nc = {0}",  Nc );
                sw.WriteLine("Factor of Safety [FS] = {0}", FS);
                sw.WriteLine("Pile Cap Bottom Level [PCBL] = {0} m", PCBL);
                sw.WriteLine("Scour Level [SL) = {0} m", SL);
                sw.WriteLine("Founding Level [FL] = {0}", FL);
                sw.WriteLine("Concrete Grade [σ_ck] = M{0:f0}", sigma_ck);
                sw.WriteLine("Steel Grade [fy] = Fe{0:f0}", fy);
                sw.WriteLine("Unit Weight of Concrete [γ_c] = {0} Ton/cm", gamma_c);
                sw.WriteLine("Total Piles [Np] = {0}", Np);
                sw.WriteLine("Total Piles in front row [N] = {0}", N);
                //sw.WriteLine("γ_sub = {0} Ton/cu.m",  gamma_sub );

                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("FOR DESIGN OF PILE CAP");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                sw.WriteLine("Concrete Grade [σ_ck] = M {0:f0}", cap_sigma_ck);
                sw.WriteLine("Steel Grade [fy] = Fe {0:f0}", cap_fy);
                sw.WriteLine();
                sw.WriteLine("Allowable Stress in concrete");
                sw.WriteLine("in bending compression [σ_cbc] = {0} N/sq.mm = {1} kg/sq.cm", sigma_cbc, (sigma_cbc * 10));
                sw.WriteLine("Allowable stress in steel [σ_st] = {0} N/sq.mm = {1} kg/sq.cm", sigma_st, (sigma_st * 10));
                sw.WriteLine("Modular Ratio [m] = {0}", m);
                sw.WriteLine("Load Factor [F] = {0}", F);


                sw.WriteLine("Diameter of Main Steel Reinforcement bars [d1] = {0} mm", d1);
                sw.WriteLine("Bottom Reinforcement Bar Diameter [d2] = {0} mm", d2);
                sw.WriteLine("Top Reinforcement Bar Diameter [d3] = {0} mm", d3);
                sw.WriteLine("Pile Cap Length [LPC] = {0} mm                  Marked as (LPC) in the Drawing", LPC);
                sw.WriteLine("Pile Cap Width [BPC] = {0} mm                   Marked as (BPC) in the Drawing", BPC);
                sw.WriteLine("Pier Length [LPr] = {0} mm                      Marked as (LPr) in the Drawing", LPr);
                sw.WriteLine("Pier Width [BPr] = {0} mm                       Marked as (BPr) in the Drawing", BPr);
                sw.WriteLine("Depth of Pile Cap [DPC] = {0} mm                Marked as (DPC) in the Drawing", DPC);
                sw.WriteLine("Distance   [L1] = {0} mm                        Marked as (L1) in the Drawing", l1);
                sw.WriteLine("Distance   [L2] = {0} mm                         Marked as (L2) in the Drawing", l2);
                sw.WriteLine("Distance   [L3] = {0} mm                        Marked as (L3) in the Drawing", l3);

                #endregion

                #region DESIGN CALCULATIONS
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("STEP 1 : DESIGN CALCULATIONS");
                sw.WriteLine("------------------------------------------------------------");
                #endregion

                #region STEP 1 : CAPACITY FROM SOIL STRUCTURE INTERACTION
                sw.WriteLine();
                //sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine("STEP {0}.1 : CAPACITY FROM SOIL STRUCTURE INTERACTION", step);
                sw.WriteLine("CAPACITY FROM SOIL STRUCTURE INTERACTION", step);
                sw.WriteLine("----------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                double L1 = PCBL - FL;
                L1 = double.Parse(L1.ToString("0.000"));
                sw.WriteLine("Pile Length = PL = PCBL - FL");
                sw.WriteLine("                 = {0:f3} - {1:f3}", PCBL, FL);
                sw.WriteLine("                 = {0:f3} m", L1);
                BOQ.Pile_Length = L1;

                double L2 = SL - FL;
                L2 = double.Parse(L2.ToString("0.000"));
                sw.WriteLine();
                sw.WriteLine("Embedded Length = EL = SL - FL");
                sw.WriteLine("                     = {0:f3} - {1:f3}", SL, FL);
                sw.WriteLine("                     = {0:f3} m", L2);
                sw.WriteLine();

                BOQ.Pile_Nos = Np;



                double Ap = Math.PI * D * D / 4.0;
                Ap = double.Parse(Ap.ToString("0.000"));
                sw.WriteLine("Cross Sectional Area of PIle = Ap = π*D*D/4");
                sw.WriteLine("                             = π*{0}*{0}/4", D);
                sw.WriteLine("                             = {0:f3} sq.m", Ap);
                sw.WriteLine();

                //BOQ.Pile_Area = Ap;

                #region (A) FOR COHESIONLESS COMPONENT OF SOIL
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("(A) FOR COHESIONLESS COMPONENT OF SOIL :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                #endregion

                #region SKIN FRICTION
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("SKIN FRICTION :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                #endregion

                //sw.WriteLine("Layers ,Thickness, Depth below, Surface, φ (deg), δ (deg), γ_sub, P_D, P_Di");
                //sw.WriteLine("Layers ,of Sub soil Layer, scour level(H), Area (As), φ (deg), δ (deg), γ_sub, Pd, Pdi");
                sw.WriteLine();
                sw.WriteLine("Borehole No. : {0}", BoreholeNo);
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                       "Layer",
                       "Depth upto",
                       "Thickness",
                       "Depth below",
                       "Surface",
                       "φ    ",
                       "δ    ",
                       "γ_sub",
                       "P_D   ",
                       "P_Di  ");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                       "Nos.",
                                       "bottom ",
                                       "of Sub ",
                                       "scour  ",
                                       "Area  ",
                                       "(deg)",
                                       "(deg)",
                                       "Ton /",
                                       "γ_sub*H",
                                       "Ton /");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                                      "",
                                                      "of Layer",
                                                      "soil Layer",
                                                      "level(H) ",
                                                      "(As)  ",
                                                      "",
                                                      "",
                                                      "cu.m",
                                                      "Ton /",
                                                      "sq.mm");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                                        "",
                                                        "(m)   ",
                                                        "(m)    ",
                                                        "(m)   ",
                                                        "",
                                                        "",
                                                        "",
                                                        "",
                                                        "sq.m",
                                                        "");
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                for (int i = 0; i < pft_list.Count; i++)
                {
                    sw.WriteLine("{0,-6:f0} {1,10:f3} {2,10:f3} {3,12:f3} {4,8:f2} {5,6:f1}° {6,6:f1}° {7,7:f3} {8,10:f3} {9,7:f3}",
                        pft_list[i].Layers,
                        pft_list[i].Depth,
                        pft_list[i].Thickness,
                        pft_list[i].H_DepthBelowScourLevel,
                        pft_list[i].SurfaceArea,
                        pft_list[i].Phi,
                        pft_list[i].Delta,
                        pft_list[i].GammaSub,
                        pft_list[i].P_D,
                        pft_list[i].P_Di);
                }
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                sw.WriteLine();
                for (int i = 0; i < pft_list.Count; i++)
                {
                    if (i == 0)
                    {
                        sw.WriteLine("P_Di[1] = (0 + {0})/2 = {1} Ton/sq.m", pft_list[0].P_D, pft_list[0].P_Di);
                    }
                    else
                    {
                        //sw.WriteLine("P_Di1 = (0 + {0})/2 = {1} Ton/sq.m", pft_list[0].P_D, pft_list[0].P_Di);
                        sw.WriteLine("P_Di[{0}] = ({1} + {2})/2 = {3} Ton/sq.m",
                            (i + 1),
                            pft_list[i - 1].P_D,
                            pft_list[i].P_D,
                            pft_list[i].P_Di);

                    }
                }
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Ultimate Resistance by Skin Friction :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                double sk_frc, Rfs;
                sk_frc = 0;
                Rfs = 0;

                List<double> list_dbl = new List<double>();
                for (int i = 0; i < pft_list.Count; i++)
                {
                    sk_frc = pft_list[i].SurfaceArea * K * pft_list[i].P_Di * Math.Tan((Math.PI / 180.0) * pft_list[i].Delta);
                    sk_frc = double.Parse(sk_frc.ToString("0.000"));
                    Rfs += sk_frc;

                    list_dbl.Add(sk_frc);
                    //sw.WriteLine("For Layer {0} : As{1}* K * P_Di{1} * tan δ", pft_list[i].Layers, (i + 1));

                    sw.WriteLine("For Layer {0} : As[{1}]* K * P_Di[{1}] * tan δ",
                        pft_list[i].Layers,
                        (i + 1));
                    sw.WriteLine("            = {0} * {1} * {2} * tan {3}",
                         pft_list[i].SurfaceArea,
                         K,
                         pft_list[i].P_Di,
                         pft_list[i].Delta);
                    sw.WriteLine("            = {0} Ton", sk_frc);
                    sw.WriteLine();
                }


                sw.WriteLine("Total Ultimate Resistance due to Skin Friction = Rfs = {0} Ton", Rfs);

                for (int i = 0; i < pft_list.Count; i++)
                {
                }

                sw.WriteLine();

                #endregion

                #region END BEARING
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("END BEARING");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Ultimate Resistance by End Bearing :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine("Referring to Table No. 2, given at the end of this report,");
                sw.WriteLine();
                sw.WriteLine("For the value of φ = {0} deg, Nc = {1}, Nq = {2} and Nγ = Nr = {3}", phi, Nc, Nq, N_gamma);
                sw.WriteLine();
                sw.WriteLine();

                double R_us = Ap * ((1.0 / 2.0) * 0.92 * D * N_gamma);

                int cnt = pft_list.Count;

                if (cnt >= 1)
                {
                    R_us = Ap * ((1.0 / 2.0) * pft_list[cnt - 1].GammaSub * D * N_gamma + (pft_list[cnt - 1].P_D * Nq));

                    sw.WriteLine("R_us = Ap * ((1/2) * γ * D * Nγ + P_D[{0}] * Nq) ", cnt);
                    sw.WriteLine("     = {0:f3} * (0.5 * {1:f3} * {2} * {3:f3} + {4:f3} * {5:f3})) ",
                        Ap,
                        pft_list[cnt - 1].GammaSub,
                        D,
                        N_gamma,
                        pft_list[cnt - 1].P_D,
                        Nq);
                    sw.WriteLine();
                    sw.WriteLine("     = {0:f3} Ton", R_us);
                }
                sw.WriteLine();

                double total_resist = Rfs + R_us;
                sw.WriteLine("Total Ultimate Resistance of Pile = Rfs + R_us");
                sw.WriteLine("                                  = {0:f3} + {1:f3}", Rfs, R_us);
                sw.WriteLine("                                  = {0:f3} Ton", total_resist);
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("Factor of Safety = FS = {0}", FS);
                double Qus = total_resist / FS;

                sw.WriteLine();
                sw.WriteLine("Safe Load on Pile = {0:f3} / {1} = {2:f3} Ton", total_resist, FS, Qus);

                #endregion

                #region END BEARING
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("(B) FOR COHESIVE COMPONENT OF SOIL :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("-----------------------------------------------------------------------------");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "Layers",
                    "Layer",
                    "Depth",
                    "Surface",
                    "",
                    "",
                    "Ultimate");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "",
                    "Thickness",
                    "below Scour",
                    "Area  ",
                    "α  ",
                    "c  ",
                    "resistance");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "",
                    "[D](m)",
                    "Level[H](m)",
                    "[As](sq.m)",
                    "",
                    "",
                    "[As*α*c](Ton)");
                sw.WriteLine("-----------------------------------------------------------------------------");

                double Rfc = 0.0;

                for (int i = 0; i < pft_list.Count; i++)
                {
                    sk_frc = (pft_list[i].SurfaceArea * pft_list[i].Alpha * pft_list[i].Cohesion);
                    Rfc += sk_frc;
                    sw.WriteLine("{0,-6} {1,10:f3} {2,14:f3} {3,14:f3} {4,7:f3} {5,7:f3} {6,7:f3}",
                    pft_list[i].Layers,
                    pft_list[i].Thickness,
                    pft_list[i].H_DepthBelowScourLevel,
                    pft_list[i].SurfaceArea,
                    pft_list[i].Alpha,
                    pft_list[i].Cohesion,
                    sk_frc);
                }
                sw.WriteLine("-----------------------------------------------------------------------------");
                sw.WriteLine("{0,63} {1,7:f3} Ton",
                    "Total Ultimate Resistance = ",
                    Rfc);
                sw.WriteLine();
                //sw.WriteLine("Total Ultimate Resistance = {0:f3} Ton", Rfc);
                //sw.WriteLine();

                //Chiranjit [2013 06 17]

                sw.WriteLine("Referring to Table No. 2, given at the end of this report,");
                sw.WriteLine();
                sw.WriteLine("For the value of φ = {0} deg, Nc = {1}, Nq = {2} and Nr = {3}", phi, Nc, Nq, N_gamma);
                sw.WriteLine();

                double end_brng = Ap * pft_list[cnt - 1].Cohesion * Nc;
                sw.WriteLine("End Bearing = Ap * C[{0}] * Nc", cnt);
                sw.WriteLine("            = {0} * {1} * {2}", Ap, pft_list[cnt - 1].Cohesion, Nc);
                sw.WriteLine("            = {0:f3} ", end_brng);
                sw.WriteLine();

                double Qu = Rfc + end_brng;
                sw.WriteLine("Total Ultimate Resistance of Pile = Qu");
                sw.WriteLine("    Qu = {0:f3} + {1:f3} = {2:f3} Ton", Rfc, end_brng, Qu);
                sw.WriteLine();
                sw.WriteLine("Factor of Safety = FS = {0}", FS);
                sw.WriteLine();

                double Quc = Qu / FS;
                sw.WriteLine("Safe Load on Pile = {0:f3}/{1} = {2:f3} Ton", Qu, FS, Quc);
                sw.WriteLine();

                double perm_load = Qus + Quc;
                sw.WriteLine("Permissible safe Load on Pile = Qus + Quc");
                sw.WriteLine("                              = {0:f3} + {1:f3}", Qus, Quc);
                sw.WriteLine("                              = {0:f3} Ton", perm_load);
                sw.WriteLine();
                sw.WriteLine("Applied Load on Pile = P = {0} Ton", P);
                sw.WriteLine();



                double load_cap = (LPC * BPC * DPC / 10E8) * gamma_c;
                //sw.WriteLine("Applied Load on Pile Group         = P = 216.000 Ton");
                sw.WriteLine("");
                sw.WriteLine("Load by Pile Cap on Pile Group = LPC x BPC x DPC x γ_c ");
                sw.WriteLine("                               = {0:f3} x {1:f3} x {2:f3} x {3:f3}", (LPC / 1000.0), (BPC / 1000.0), (DPC / 1000.0), gamma_c);
                sw.WriteLine("                               = {0:f3} Ton", load_cap);
                sw.WriteLine("");
                double self_wt = Ap * L1 * (gamma_c - 1.0);

                sw.WriteLine("Self weight of each Pile = Ap * L1 * (γ_c - 1)");
                sw.WriteLine("                    = {0:f3} * {1} * ({2} - 1)", Ap, L1, gamma_c);
                sw.WriteLine("                    = {0:f3} Ton", self_wt);
                sw.WriteLine();
                //sw.WriteLine("Self weight of each Pile                 = Ap * L1 * (γ_c - 1)");
                //sw.WriteLine("                                    = 0.785 * 25 * (2.5 - 1)");
                //sw.WriteLine("                                    = 29.438 Ton");
                sw.WriteLine("");

                double total_load = (P + load_cap) / Np + self_wt;
                sw.WriteLine("Total Load on Pile  = Pu");
                sw.WriteLine("                    = (P + Load by Pile Cap on Pile Group)/ Total Piles [Np] + Self weight of Pile");
                sw.WriteLine("                    = ({0:f3} + {1:f3})/{2:f0} + {3:f3} ", P, load_cap, Np, self_wt);
                sw.WriteLine("                    = {0:f3} + {1:f3}", ((P + load_cap) / Np), self_wt);
                //sw.WriteLine("= 100.772 Ton < 449.824 Ton, Hence, Safe");
                sw.WriteLine("");

                double Pu = total_load;


                //double total_load = P + self_wt;
                if (total_load < perm_load)
                    sw.WriteLine("                    = {0:f3} Ton < {1:f3} Ton, Hence, Safe", total_load, perm_load);
                else
                {
                    IS_DESIGN_OK = false;
                    sw.WriteLine("                    = {0:f3} Ton > {1:f3} Ton, Hence, Unsafe, NOT OK", total_load, perm_load);
                }


                #endregion

                #region STEP 2 : STRUCTURAL DESIGN OF PILE
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine("STEP {0}.2 : STRUCTURAL DESIGN OF PILE", step);
                sw.WriteLine("STEP 2 : STRUCTURAL DESIGN OF PILE", step);
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();


                sw.WriteLine("Pile Dia = D = {0} m = {1} mm", D, (D * 1000));
                D = D * 1000;
                sw.WriteLine();
                double cover = 0.1 * D;
                frmPile_Graph fpg = new frmPile_Graph();

                sw.WriteLine("Cover = d' = 0.1 * D = 0.1 * {0} = {1} mm", D, cover);
                sw.WriteLine();
                sw.WriteLine("Cover / Pile Dia = d' / D = {0} / {1} = {2}", cover, D, (cover / D));
                fpg.txt_ddash.Text = (cover / D).ToString("0.00");
                sw.WriteLine();

                double val1 = Pu * 1000 * 10 / (sigma_ck * D * D);
                sw.WriteLine("Pu/(σ_ck*D*D) = {0}*1000*10/({1}*{2}*{2})", Pu, sigma_ck, D);
                sw.WriteLine("              = {0:f4}", val1);
                fpg.txt_Pu.Text = val1.ToString("0.0000");
                sw.WriteLine();

                val1 = (AM * 1000 * 10 * 1000) / (sigma_ck * D * D * D);
                sw.WriteLine("Mu/(σ_ck*D**3) = {0}/({1}*{2}^3)", AM, sigma_ck, D);
                sw.WriteLine("               = {0:f4}", val1);
                fpg.txt_Mu.Text = val1.ToString("0.0000");
                sw.WriteLine();
                fpg.txt_sigma_y.Text = fy.ToString();
                fpg.txt_sigma_ck.Text = sigma_ck.ToString();
                fpg.txt_obtaned_value.Text = "0.0";

                fpg.ShowDialog();
                val1 = MyList.StringToDouble(fpg.txt_obtaned_value.Text, 0.0);
                sw.WriteLine("From figure, we get p/σ_ck = {0}", val1);
                sw.WriteLine();
                if (val1 < 0.4)
                {
                    val1 = 0.4;
                }
                sw.WriteLine("In piles provide minimum {0}% Steel.", val1);
                sw.WriteLine();

                double area_mn_st = (val1 / 100) * (Math.PI / 4.0) * D * D;
                sw.WriteLine("Area of Main Steel Reinforcement = As");
                sw.WriteLine("   As = ({0}/100) * (π / 4) * D * D", val1);
                sw.WriteLine("      = ({0}/100) * (π / 4) * {1} * {1}", val1, D);
                sw.WriteLine("      = {0:f2} sq.mm", area_mn_st);
                sw.WriteLine();

                double ar_one_st_br = (Math.PI * d1 * d1) / 4.0;
                sw.WriteLine("Area of one Steel reinforcement bar = π * {0} * {0} / 4", d1);
                sw.WriteLine("                                    = {0:f2} sq.mm", ar_one_st_br);
                sw.WriteLine();

                double total_bar = (int)((area_mn_st / ar_one_st_br) + 1);


                Steel_Reinforcement ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[1]";
                ssr.Number_Of_Bars = (int)total_bar;
                ssr.Bar_Dia = d1;
                ssr.Length = BOQ.Pile_Length;
                BOQ.Steel_Reinforcement.Add(ssr);

                sw.WriteLine("Total number of bars = {0:f2} / {1:f2} = {2:f0}", area_mn_st, ar_one_st_br, total_bar);
                sw.WriteLine();
                sw.WriteLine("Provide {0} numbers T{1} mm dia bars.", total_bar, d1);
                sw.WriteLine();
                sw.WriteLine("Use 8 mm diameter lateral MS bars as Ties / Binders");
                sw.WriteLine("the pitch / spacing = r < 500 mm");
                sw.WriteLine("                        < 16*d1 = 16*{0} = {1} mm", d1, (16 * d1));

                val1 = (int)((16 * d1) / 100.0);
                val1 *= 100;

                double provide_spacing = val1;
                sw.WriteLine("                        < {0} mm", val1);
                sw.WriteLine();


                ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[2]";
                ssr.Number_Of_Bars = (int)(BOQ.Pile_Length * 1000 / provide_spacing);
                ssr.Bar_Dia = 8;
                ssr.Length = 2 * Math.PI * ((D - cover) / 1000.0);


                BOQ.Steel_Reinforcement.Add(ssr);

                sw.WriteLine("Provide {0} numbers T{1} mm dia bars with spacing of {2} mm c/c.     Marked as (4) in the Drawing",
                    ssr.Number_Of_Bars, ssr.Bar_Dia, provide_spacing);
                //(4)  Main Bars 10 Nos. Dia. 20 MM. in Piles
                _4 = string.Format("Main Bars {0} Nos. Dia. {1} mm. in Piles", ssr.Number_Of_Bars, ssr.Bar_Dia, provide_spacing);


                #endregion

                #region STEP 3 : STRUCTURAL DESIGN OF PILE

                BOQ.Pile_Cap_Length = LPC / 1000;
                BOQ.Pile_Cap_Width = BPC / 1000;
                BOQ.Pile_Cap_Thickness = DPC / 1000;


                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine("STEP {0}.3 : DESIGN OF PILE CAP :", step);
                sw.WriteLine("STEP 3 : DESIGN OF PILE CAP :", step);
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();

                double n = (m * sigma_cbc) / (sigma_st + (m * sigma_cbc));
                sw.WriteLine("Neutral Axis Factor = n = (m * σ_cbc) / (σ_st + (m * σ_cbc))");
                sw.WriteLine("         = ({0} * {1}) / ({2} + ({0} * {1}))", m, sigma_cbc, sigma_st);
                sw.WriteLine("         = {0:f3}", n);
                sw.WriteLine();

                double j = (1 - (n / 3));
                sw.WriteLine("Lever Arm Factor = j = 1 - (n/3) = 1 - ({0:f3}/3) = {1:f3}", n, j);
                sw.WriteLine();


                double Q = 0.5 * sigma_cbc * j * n;
                sw.WriteLine("Q = 0.5 * σ_cbc * j * n");
                sw.WriteLine("  = 0.5 * {0} * {1:f3} * {2:f3}", sigma_cbc, j, n);
                sw.WriteLine("  = {0:f3}", Q);
                sw.WriteLine();
                double P2 = N * Pu;
                sw.WriteLine("Sum of Forces on Piles in front row = P2 = N X Pu = {0} X {1} = {2} Ton", N, Pu, P2);
                //sw.WriteLine("  P2 = {0} + {1} = {2} Ton", N, P, P2);
                sw.WriteLine();

                double mom_pier = P2 * ((l1 / 1000.0) - (l2 / 1000.0));
                sw.WriteLine("Moment at the Face of Pier = P2 * ((L1 / 1000.0) - (L2 / 1000.0))");
                sw.WriteLine("                           = {0} * (({1} / 1000.0) - ({2} / 1000.0))", P2, l1, l2);
                sw.WriteLine("                           = {0:f2} Ton-m", mom_pier);
                sw.WriteLine();

                double P3 = (l1 / 1000.0) * (LPC / 1000.0) * (DPC / 1000.0) * gamma_c;
                sw.WriteLine("Relief due to self wt of Pile Cap = P3");
                sw.WriteLine(" = P3 = (L1 / 1000.0) * (LPC / 1000.0) * (DPC / 1000.0) * γ_c");
                sw.WriteLine(" = ({0} / 1000.0) * ({1} / 1000.0) * ({2} / 1000.0) * {3}", l1, LPC, DPC, gamma_c);
                sw.WriteLine(" = {0:f3} Ton", P3);
                sw.WriteLine();

                double mom_self_wt = P3 * (l1 / (1000.0 * 2));
                sw.WriteLine("Moment due to self wt of Pile Cap");
                sw.WriteLine("  = {0:f3} * (L1 / (1000.0 * 2))", P3);
                sw.WriteLine("  = {0:f3} * ({1} / (1000.0 * 2))", P3, l1);
                sw.WriteLine("  = {0:f3} Ton-m", mom_self_wt);
                sw.WriteLine();

                double total_mom = mom_pier - mom_self_wt;
                sw.WriteLine("Total Moment at the Face of Pier = {0:f3} - {1:f3} = {2:f3} Ton-m", mom_pier, mom_self_wt, total_mom);

                sw.WriteLine();


                double M = total_mom / (LPC / 1000.0);
                sw.WriteLine("Moment per Linear metre = {0:f3} / (LPC/1000)", total_mom);
                sw.WriteLine("                        = {0:f3} / ({1}/1000)", total_mom, LPC);
                sw.WriteLine("                        = {0:f2} Ton-m/m", M);
                sw.WriteLine();


                double req_dep = (M * 10E4) / (Q * 100);
                req_dep = Math.Sqrt(req_dep);

                sw.WriteLine("Depth required = √(({0:f2}*10^5)/(Q*100))", M);
                sw.WriteLine("               = √(({0:f2}*10^5)/({1:f2}*100))", M, Q);
                sw.WriteLine("               = {0:f2} cm = {1:f2} mm", req_dep, (req_dep * 10));

                req_dep = req_dep * 10;
                sw.WriteLine();
                sw.WriteLine("Overall Depth Provided = {0} mm", DPC);
                sw.WriteLine();
                sw.WriteLine("Clear Cover = 175 mm");
                sw.WriteLine();
                double half_bar_dia = d2 / 2.0;
                sw.WriteLine("Half Bar diameter of Steel Reinforcements = {0} m", half_bar_dia);
                sw.WriteLine();

                double eff_dep = DPC - 175 - half_bar_dia;
                sw.WriteLine("Effective Depth Provided = {0} - 175 - {1}", DPC, half_bar_dia);
                if (eff_dep > req_dep)
                {
                    sw.WriteLine("                         = {0:f3} mm > {1:f2} mm, Hence OK", eff_dep, req_dep);
                }
                else
                {
                    IS_DESIGN_OK = false;
                    sw.WriteLine("                         = {0:f3} mm < {1:f3} mm, Hence NOT OK", eff_dep, req_dep);
                }
                double deff = eff_dep / 10;
                sw.WriteLine();
                sw.WriteLine("deff = {0} mm = {1} cm", eff_dep, deff);
                sw.WriteLine();

                double req_st_renf = (M * 10E4) / (j * sigma_st * deff * 1);
                sw.WriteLine("Required Steel Reinforcement = M * 10^5/(j*σ_st*deff*1)");
                sw.WriteLine("    = {0:f3} * 10^5/({1:f3}*{2}*{3}*1)", M, j, sigma_st, deff);
                sw.WriteLine("    = {0:f3} sq.cm/m", req_st_renf);
                sw.WriteLine();

                double req_min_tension = (0.2 / 100) * deff;
                sw.WriteLine("Required minimum Steel for tension = 0.2%");
                sw.WriteLine("                                   = (0.2/100) * {0}", deff);
                sw.WriteLine("                                   = {0:f3} sq.cm/m", req_min_tension);
                sw.WriteLine();


                ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[3]";
                ssr.Number_Of_Bars = ((int)(1000.0 / 150.0) + 1);
                ssr.Bar_Dia = d2;
                ssr.Length = BOQ.Pile_Cap_Length;
                BOQ.Steel_Reinforcement.Add(ssr);

                sw.WriteLine("Provide Steel Reinforcements {0} Diameter bars @150 mm c/c spacing.    Marked as (2) in the Drawing", d2);
                //(2)  Main Bottom Bars Dia. 25 @ 150 c/c
                _2 = string.Format("Main Bottom Bars Dia. {0} @ 150 c/c", d2);


                sw.WriteLine();
                double pro_area_st = (Math.PI * d2 * d2 / 4.0) * (1000.0 / 150.0);

                pro_area_st = pro_area_st / 100;

                if (pro_area_st > req_min_tension)
                {
                    sw.WriteLine("Area of Steel Provided at the bottom of the Pile Cap");
                    sw.WriteLine("in Longitudinal direction = {0:f3} sq.cm/m > {1:f3} sq.cm/m, Hence OK",
                        pro_area_st, req_min_tension);
                }
                else
                {
                    IS_DESIGN_OK = false;
                    sw.WriteLine("Area of Steel Provided at the bottom of the Pile Cap");
                    sw.WriteLine("in Longitudinal direction = {0:f3} sq.cm/m < {1:f3} sq.cm/m, Hence NOT OK",
                        pro_area_st, req_min_tension);
                }
                sw.WriteLine();

                double nom_steel = (0.06 / 100) * deff;
                sw.WriteLine("Steel Provided in Longitudinal derection at the top of ");
                sw.WriteLine("Pile Cap = Nominal Steel = 0.06% of Area");
                sw.WriteLine("         = (0.06/100) * deff");
                sw.WriteLine("         = (0.06/100) * {0}", deff);
                sw.WriteLine("         = {0:f3} sq.cm/m", nom_steel);
                sw.WriteLine();

                ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[3]";
                ssr.Number_Of_Bars = ((int)(1000.0 / 150.0) + 1);
                ssr.Bar_Dia = d3;
                ssr.Length = BOQ.Pile_Cap_Length;
                BOQ.Steel_Reinforcement.Add(ssr);

                sw.WriteLine("Provided {0} mm dia bars at 150 mm c/c spacing.         Marked as (1) in the Drawing", d3);
                //(1)  Main Top Bars Dia. 16 @ 150 c/c
                _1 = string.Format("Main Top Bars Dia. {0} @ 150 c/c", d3);

                sw.WriteLine();

                double area_top = (Math.PI * d3 * d3 / 4.0) * (1000.0 / 150.0);
                sw.WriteLine("Area of Steel Provided = (π*{0}*{0}/4)*(1000/150)", d3);
                sw.WriteLine("                       = {0:f2} sq.mm/m", area_top);
                area_top = area_top / 100;
                sw.WriteLine("                       = {0:f2} sq.cm/m", area_top);

                sw.WriteLine();
                sw.WriteLine("Distribution Steel provided at top and bottom of Pile Cap");
                sw.WriteLine(" {0} mm dia bars at 150 mm c/c spacing", d3);
                sw.WriteLine();
                area_top = (Math.PI * d3 * d3 / 4.0) * (1000.0 / 150.0);
                sw.WriteLine("Area of Steel Provided = (π*{0}*{0}/4)*(1000/150)", d3);
                sw.WriteLine("                       = {0:f2} sq.mm/m", area_top);
                area_top = area_top / 100;
                sw.WriteLine("                       = {0:f2} sq.cm/m", area_top);
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Shear Reinforcement :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                deff = deff / 100;
                sw.WriteLine("Critical section at deff = {0} m from face of Pier", deff);
                sw.WriteLine();
                //sw.WriteLine("Factor for Distribution of Load = 0.1375");
                sw.WriteLine();

                //double P4 = P2 * 0.1375;
                double P4 = P2;

                //sw.WriteLine("Reaction on Piles in Front row  = P4 = {0} * 0.1375 = {1:f2} Ton", P2, P4);
                sw.WriteLine("Reaction on Piles in Front row  = P2 = {0:f2} Ton", P4);
                sw.WriteLine();

                //val1 = (((LPC - (l1 - deff)) / 1000.0) * DPC * gamma_c);
                deff = deff * 1000;
                val1 = (LPC / 1000.0) * ((l1 / 1000.0) - (deff / 1000.0)) * (DPC / 1000.0) * gamma_c;
                double tau_v = (P4 - val1) / (deff);

                //double _tau_v = P4 * 10 * (LPC / 1000.0) * ((l1 / 1000.0) - (deff / 1000.0));
                double _tau_v = P4 * 10 * LPC * (l1 - deff);

                tau_v = (_tau_v) / (LPC * deff * 1000);
                tau_v = double.Parse(tau_v.ToString("0.000"));

                sw.WriteLine("Nominnal Shear stress = τ_v");
                sw.WriteLine();
                //sw.WriteLine("τ_v = ((P4 - (LPC * ((LPC - (l1 - deff)) / 1000.0) * DPC * γ_c)) / (deff * 1000.0))");
                //sw.WriteLine("    = (({0:f2} - ({1} * (({1} - ({2} - {3})) / 1000.0) * {4} * {5})) / ({3} * 1000.0))",
                //    P4, LPC, l1, deff, DPC, gamma_c);


                sw.WriteLine("τ_v = (P2*10*LPC*(l1 - deff)) / (LPC * deff * 1000)");
                sw.WriteLine("    = ({0}*10*{1}*({2} - {3})) / ({1} * {3} * 1000)", P4, LPC, l1, deff);
                //sw.WriteLine();
                sw.WriteLine("    = {0:f4} N/sq.mm", tau_v);
                sw.WriteLine();

                deff = deff / 10;
                double percent = (100 * pro_area_st) / (100.0 * deff);
                percent = double.Parse(percent.ToString("0.000"));
                sw.WriteLine("Percent of bottom main reinforcement");
                sw.WriteLine(" p = (100 * {0:f3}) / (100.0 * {1})", pro_area_st, deff);
                sw.WriteLine("   = {0:f3}", percent);
                sw.WriteLine();

                double tau_c = Get_Table_1_Value(percent, cap_sigma_ck, ref ref_string);
                sw.WriteLine("Permissible Shear Stress for p = {0} and for M{1:f0} Concrete", percent, cap_sigma_ck);
                sw.WriteLine("from Table 1 (given at the end of the report). {0}", ref_string);
                sw.WriteLine();
                if (tau_c > tau_v)
                {
                    sw.WriteLine("τ_c = {0:f2} N/sq.mm > τ_v", tau_c);

                    sw.WriteLine();

                    sw.WriteLine("So, no shear Reinforcement is required and provide");
                    sw.WriteLine("provide minimum shear reinforcement.");
                    sw.WriteLine();
                    double min_shr_renf = 0.0011 * 100 * 250;
                    sw.WriteLine("Minimum Shear Reinforcement = 0.0011 * b * S");
                    sw.WriteLine("                            = 0.0011 * 100 * 250");
                    sw.WriteLine("                            = 27.50 sq.cm/m");
                    sw.WriteLine();
                    sw.WriteLine("Provide 8 mm diameter 42 legged at 200 mm c/c spacing");
                    sw.WriteLine();

                    ssr = new Steel_Reinforcement();
                    ssr.BarMark = "P_AST[4]";
                    ssr.Number_Of_Bars = ((int)(1000.0 / 200));
                    ssr.Bar_Dia = 8;
                    ssr.Length = BOQ.Pile_Cap_Length;
                    BOQ.Steel_Reinforcement.Add(ssr);


                    pro_area_st = (Math.PI * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0);
                    sw.WriteLine();
                    sw.WriteLine("Area of Steel Provided = (π * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0)");
                    sw.WriteLine("                       = {0:f2} sq.mm/m", pro_area_st);

                    pro_area_st = pro_area_st / 100.0;
                    sw.WriteLine("                       = {0:f2} sq.cm/m", pro_area_st);
                }
                else
                {
                    sw.WriteLine("τ_c = {0:f2} N/sq.mm < (τ_v) {1:f2} N/sq.mm ", tau_c, tau_v);
                    sw.WriteLine();

                    double bal_sh_strs = tau_v - tau_c;
                    bal_sh_strs = double.Parse(bal_sh_strs.ToString("0.000"));
                    sw.WriteLine("Balance Shear Stress");
                    sw.WriteLine();
                    sw.WriteLine("τ_v - τ_c = {0} - {1} = {2} N/sq.mm", tau_v, tau_c, bal_sh_strs);
                    sw.WriteLine();

                    double bal_shr_frc = bal_sh_strs * l1 * deff / 1000.0;
                    bal_shr_frc = double.Parse(bal_shr_frc.ToString("0"));
                    sw.WriteLine("Balance Shear Force");
                    sw.WriteLine();
                    sw.WriteLine(" = ({0} * {1} * {2}) / 1000", bal_sh_strs, l1, deff);
                    sw.WriteLine(" = {0} kN", bal_shr_frc);
                    sw.WriteLine();
                    sw.WriteLine("Using 10 mm bars @200 mm c/c            Marked as (3) in the Drawing");
                    //(3)  Shear Reinf. Bars Dia. 10, 42 Legged, Spacing 200 
                    _3 = string.Format("Shear Reinf. Bars Dia. 10, 42 Legged, Spacing 200");

                    sw.WriteLine();

                    double Ast = (bal_shr_frc * 200.0 * 1000.0) / (200.0 * deff);
                    Ast = double.Parse(Ast.ToString("0"));
                    sw.WriteLine("Required Shear Reinforcement Steel");
                    sw.WriteLine("Ast = ({0} * 200.0 * 1000.0) / (200.0 * {1})", bal_shr_frc, deff);
                    sw.WriteLine("    = {0} sq.mm", Ast);
                    sw.WriteLine("    = {0} sq.cm", (Ast / 100.0));
                    sw.WriteLine();
                    double min_shr_renf = 0.0011 * 100 * 250;
                    sw.WriteLine("Minimum Shear Reinforcement = 0.0011 * b * S");
                    sw.WriteLine("                            = 0.0011 * 100 * 250");
                    sw.WriteLine("                            = 27.50 sq.cm/m");
                    sw.WriteLine();
                    if (Ast < min_shr_renf)
                    {
                        sw.WriteLine();
                        sw.WriteLine("Provide 8 mm diameter 42 legged at 200 mm c/c spacing");
                        sw.WriteLine();

                        pro_area_st = (Math.PI * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0);
                        sw.WriteLine();
                        sw.WriteLine("Area of Steel Provided = (π * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0)");
                        sw.WriteLine("                       = {0:f2} sq.mm/m", pro_area_st);

                        pro_area_st = pro_area_st / 100.0;
                        sw.WriteLine("                       = {0:f2} sq.cm/m", pro_area_st);
                    }


                    ssr = new Steel_Reinforcement();
                    ssr.BarMark = "P_AST[4]";
                    ssr.Number_Of_Bars = ((int)(1000.0 / 200));
                    ssr.Bar_Dia = 8;
                    ssr.Length = BOQ.Pile_Cap_Length;
                    BOQ.Steel_Reinforcement.Add(ssr);

                    //sw.WriteLine("τ_c = {0} N/sq.mm < τ_v", tau_c);
                    //sw.WriteLine();
                    //sw.WriteLine("Provide Shear reinforcement for balance of");
                    //sw.WriteLine("Shear Stress (τ_v - τ_c) N/sq.mm");
                    sw.WriteLine();
                }
                #endregion

                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("");

                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine("STEP {0}.4 : BILL OF QUANTITY ", step);
                sw.WriteLine("STEP 4 : BILL OF QUANTITY ", step);
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                foreach (var item in BOQ.Get_Text())
                {
                    sw.WriteLine(item);

                }
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine();
                Write_Table_1(sw);
                #region END OF REPORT
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("---------------------------------------------------------------------------");
                sw.WriteLine("---------------------       END OF DESIGN        --------------------------");
                sw.WriteLine("---------------------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                //sw.WriteLine("---------------------------------------------------------------------------");
                //sw.WriteLine("---------            Thank you for using ASTRA Pro          ---------------");
                //sw.WriteLine("---------------------------------------------------------------------------");

                #endregion
            }
            catch (Exception ex) { }
            finally
            {
                sw.Flush();
                sw.Close();
            }

            return new List<string>(File.ReadAllLines(filename));
        }


        public List<string> Design_Program_Loop(int step)
        {
            double bno_1, bspc_2, d4, bspa_3, bspa_4, bspa_5;
            d4 = 8;
            Design_Summary = new List<string>();

            BOQ = new Pile_Foundation_BOQ();
            IS_DESIGN_OK = true;
            string ref_string = "";
            //string filename = Report_File;
            string filename = Get_Report_File(step);
            //StreamWriter sw = new StreamWriter(new FileStream(Report_File, FileMode.Create));
            StreamWriter sw = new StreamWriter(new FileStream(filename, FileMode.Create));
            try
            {
                #region TechSOFT Banner
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("\t\t***********************************************");
                sw.WriteLine("\t\t*            ASTRA Pro Release 18.0           *");
                sw.WriteLine("\t\t*        TechSOFT Engineering Services        *");
                sw.WriteLine("\t\t*                                             *");
                sw.WriteLine("\t\t*        DESIGN OF RCC PILE FOUNDATION        *");
                sw.WriteLine("\t\t*                                             *");
                sw.WriteLine("\t\t***********************************************");
                sw.WriteLine("\t\t----------------------------------------------");
                sw.WriteLine("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
                sw.WriteLine("\t\t----------------------------------------------");

                #endregion


                //if (ColumnNo != "")
                //{
                //    sw.WriteLine(string.Format(""));
                //    sw.WriteLine(string.Format(""));
                //    sw.WriteLine(string.Format("--------------------------------------------------"));
                //    //sw.WriteLine(string.Format("STEP {0}.0 : PILE DESIGN MEMBER NO : {1}", step, ColumnNo));
                //    sw.WriteLine(string.Format("PILE DESIGN {0} : MEMBER NO : {1}", step, ColumnNo));
                //    sw.WriteLine(string.Format("--------------------------------------------------"));
                //    sw.WriteLine(string.Format(""));
                //    sw.WriteLine(string.Format(""));
                //    BOQ.ColumnNos = ColumnNo;
                //}

                #region USER DATA

                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("USER'S DATA");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("FOR DESIGN OF PILE");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                sw.WriteLine("Pile Diameter [D] = {0} m", D);

                BOQ.Pile_Dia = D;

                sw.WriteLine("Applied Load on Pile Group = {0} Ton", P);
                sw.WriteLine("Applied Moment on Pile Group  = {0} Ton-m", AM);
                sw.WriteLine("Coefficient of Active Earth Pressure [K] = {0}", K);


                double phi = pft_list[pft_list.Count - 1].Phi;

                if (pft_list.Count > 0)
                    Tables.Terzaghi_Bearing_Capacity_Factors(phi, ref Nc, ref Nq, ref N_gamma, ref ref_string);   //Chiranjit [2013 06 17;


                //sw.WriteLine("Nγ = {0}",  N_gamma );
                //sw.WriteLine("Nq = {0}",  Nq );
                //sw.WriteLine("Nc = {0}",  Nc );
                sw.WriteLine("Factor of Safety [FS] = {0}", FS);
                sw.WriteLine("Pile Cap Bottom Level [PCBL] = {0} m", PCBL);
                sw.WriteLine("Scour Level [SL) = {0} m", SL);
                sw.WriteLine("Founding Level [FL] = {0}", FL);
                sw.WriteLine("Concrete Grade [σ_ck] = M{0:f0}", sigma_ck);
                sw.WriteLine("Steel Grade [fy] = Fe{0:f0}", fy);
                sw.WriteLine("Unit Weight of Concrete [γ_c] = {0} Ton/cm", gamma_c);
                sw.WriteLine("Total Piles [Np] = {0}", Np);
                sw.WriteLine("Total Piles in front row [N] = {0}", N);
                //sw.WriteLine("γ_sub = {0} Ton/cu.m",  gamma_sub );

                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("FOR DESIGN OF PILE CAP");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                sw.WriteLine("Concrete Grade [σ_ck] = M {0:f0}", cap_sigma_ck);
                sw.WriteLine("Steel Grade [fy] = Fe {0:f0}", cap_fy);
                sw.WriteLine();
                sw.WriteLine("Allowable Stress in concrete");
                sw.WriteLine("in bending compression [σ_cbc] = {0} N/sq.mm = {1} kg/sq.cm", sigma_cbc, (sigma_cbc * 10));
                sw.WriteLine("Allowable stress in steel [σ_st] = {0} N/sq.mm = {1} kg/sq.cm", sigma_st, (sigma_st * 10));
                sw.WriteLine("Modular Ratio [m] = {0}", m);
                sw.WriteLine("Load Factor [F] = {0}", F);


                sw.WriteLine("Pile Main Steel Reinforcement bar Diameter [d1] = {0} mm", d1);
                sw.WriteLine("Pile Cap Main Reinforcement (Top & Bottom) Bar Diameter [d2] = {0} mm", d2);
                sw.WriteLine("Pile Cap Distribution Reinforcement (Top & Bottom) Bar Diameter [d3] = {0} mm", d3);
                sw.WriteLine();
                sw.WriteLine("Pile Cap Length [LPC] = {0} mm                  Marked as (LPC) in the Drawing", LPC);
                sw.WriteLine("Pile Cap Width [BPC] = {0} mm                   Marked as (BPC) in the Drawing", BPC);
                //sw.WriteLine("Pier Length [LPr] = {0} mm                      Marked as (LPr) in the Drawing", LPr);
                //sw.WriteLine("Pier Width [BPr] = {0} mm                       Marked as (BPr) in the Drawing", BPr);
                sw.WriteLine("Depth of Pile Cap [DPC] = {0} mm                Marked as (DPC) in the Drawing", DPC);
                sw.WriteLine("Distance   [L1] = {0} mm                        Marked as (L1) in the Drawing", l1);
                sw.WriteLine("Distance   [L2] = {0} mm                         Marked as (L2) in the Drawing", l2);
                sw.WriteLine("Distance   [L3] = {0} mm                        Marked as (L3) in the Drawing", l3);

                #endregion

                #region DESIGN CALCULATIONS
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("STEP 1 : DESIGN CALCULATIONS");
                sw.WriteLine("------------------------------------------------------------");
                #endregion

                #region STEP 1 : CAPACITY FROM SOIL STRUCTURE INTERACTION
                sw.WriteLine();
                //sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine("STEP {0}.1 : CAPACITY FROM SOIL STRUCTURE INTERACTION", step);
                sw.WriteLine("CAPACITY FROM SOIL STRUCTURE INTERACTION", step);
                sw.WriteLine("----------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                double L1 = PCBL - FL;
                L1 = double.Parse(L1.ToString("0.000"));
                sw.WriteLine("Pile Length = PL = PCBL - FL");
                sw.WriteLine("                 = {0:f3} - {1:f3}", PCBL, FL);
                sw.WriteLine("                 = {0:f3} m", L1);
                BOQ.Pile_Length = L1;

                double L2 = SL - FL;
                L2 = double.Parse(L2.ToString("0.000"));
                sw.WriteLine();
                sw.WriteLine("Embedded Length = EL = SL - FL");
                sw.WriteLine("                     = {0:f3} - {1:f3}", SL, FL);
                sw.WriteLine("                     = {0:f3} m", L2);
                sw.WriteLine();

                BOQ.Pile_Nos = Np;



                double Ap = Math.PI * D * D / 4.0;
                Ap = double.Parse(Ap.ToString("0.000"));
                sw.WriteLine("Cross Sectional Area of PIle = Ap = π*D*D/4");
                sw.WriteLine("                             = π*{0}*{0}/4", D);
                sw.WriteLine("                             = {0:f3} sq.m", Ap);
                sw.WriteLine();

                //BOQ.Pile_Area = Ap;

                #region (A) FOR COHESIONLESS COMPONENT OF SOIL
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("(A) FOR COHESIONLESS COMPONENT OF SOIL :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                #endregion

                #region SKIN FRICTION
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("SKIN FRICTION :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                #endregion

                //sw.WriteLine("Layers ,Thickness, Depth below, Surface, φ (deg), δ (deg), γ_sub, P_D, P_Di");
                //sw.WriteLine("Layers ,of Sub soil Layer, scour level(H), Area (As), φ (deg), δ (deg), γ_sub, Pd, Pdi");
                sw.WriteLine();
                sw.WriteLine("Borehole No. : {0}", BoreholeNo);
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                       "Layer",
                       "Depth upto",
                       "Thickness",
                       "Depth below",
                       "Surface",
                       "φ    ",
                       "δ    ",
                       "γ_sub",
                       "P_D   ",
                       "P_Di  ");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                       "Nos.",
                                       "bottom ",
                                       "of Sub ",
                                       "scour  ",
                                       "Area  ",
                                       "(deg)",
                                       "(deg)",
                                       "Ton /",
                                       "γ_sub*H",
                                       "Ton /");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                                      "",
                                                      "of Layer",
                                                      "soil Layer",
                                                      "level(H) ",
                                                      "(As)  ",
                                                      "",
                                                      "",
                                                      "cu.m",
                                                      "Ton /",
                                                      "sq.mm");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                                        "",
                                                        "(m)   ",
                                                        "(m)    ",
                                                        "(m)   ",
                                                        "",
                                                        "",
                                                        "",
                                                        "",
                                                        "sq.m",
                                                        "");
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                for (int i = 0; i < pft_list.Count; i++)
                {
                    sw.WriteLine("{0,-6:f0} {1,10:f3} {2,10:f3} {3,12:f3} {4,8:f2} {5,6:f1}° {6,6:f1}° {7,7:f3} {8,10:f3} {9,7:f3}",
                        pft_list[i].Layers,
                        pft_list[i].Depth,
                        pft_list[i].Thickness,
                        pft_list[i].H_DepthBelowScourLevel,
                        pft_list[i].SurfaceArea,
                        pft_list[i].Phi,
                        pft_list[i].Delta,
                        pft_list[i].GammaSub,
                        pft_list[i].P_D,
                        pft_list[i].P_Di);
                }
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                sw.WriteLine();
                for (int i = 0; i < pft_list.Count; i++)
                {
                    if (i == 0)
                    {
                        sw.WriteLine("P_Di[1] = (0 + {0})/2 = {1} Ton/sq.m", pft_list[0].P_D, pft_list[0].P_Di);
                    }
                    else
                    {
                        //sw.WriteLine("P_Di1 = (0 + {0})/2 = {1} Ton/sq.m", pft_list[0].P_D, pft_list[0].P_Di);
                        sw.WriteLine("P_Di[{0}] = ({1} + {2})/2 = {3} Ton/sq.m",
                            (i + 1),
                            pft_list[i - 1].P_D,
                            pft_list[i].P_D,
                            pft_list[i].P_Di);

                    }
                }
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Ultimate Resistance by Skin Friction :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                double sk_frc, Rfs;
                sk_frc = 0;
                Rfs = 0;

                List<double> list_dbl = new List<double>();
                for (int i = 0; i < pft_list.Count; i++)
                {
                    sk_frc = pft_list[i].SurfaceArea * K * pft_list[i].P_Di * Math.Tan((Math.PI / 180.0) * pft_list[i].Delta);
                    sk_frc = double.Parse(sk_frc.ToString("0.000"));
                    Rfs += sk_frc;

                    list_dbl.Add(sk_frc);
                    //sw.WriteLine("For Layer {0} : As{1}* K * P_Di{1} * tan δ", pft_list[i].Layers, (i + 1));

                    sw.WriteLine("For Layer {0} : As[{1}]* K * P_Di[{1}] * tan δ",
                        pft_list[i].Layers,
                        (i + 1));
                    sw.WriteLine("            = {0} * {1} * {2} * tan {3}",
                         pft_list[i].SurfaceArea,
                         K,
                         pft_list[i].P_Di,
                         pft_list[i].Delta);
                    sw.WriteLine("            = {0} Ton", sk_frc);
                    sw.WriteLine();
                }


                sw.WriteLine("Total Ultimate Resistance due to Skin Friction = Rfs = {0} Ton", Rfs);

                for (int i = 0; i < pft_list.Count; i++)
                {
                }

                sw.WriteLine();

                #endregion

                #region END BEARING
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("END BEARING");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Ultimate Resistance by End Bearing :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine("Referring to Table No. 2, given at the end of this report,");
                sw.WriteLine();
                sw.WriteLine("For the value of φ = {0} deg, Nc = {1}, Nq = {2} and Nγ = Nr = {3}", phi, Nc, Nq, N_gamma);
                sw.WriteLine();
                sw.WriteLine();

                double R_us = Ap * ((1.0 / 2.0) * 0.92 * D * N_gamma);

                int cnt = pft_list.Count;

                if (cnt >= 1)
                {
                    R_us = Ap * ((1.0 / 2.0) * pft_list[cnt - 1].GammaSub * D * N_gamma + (pft_list[cnt - 1].P_D * Nq));

                    sw.WriteLine("R_us = Ap * ((1/2) * γ * D * Nγ + P_D[{0}] * Nq) ", cnt);
                    sw.WriteLine("     = {0:f3} * (0.5 * {1:f3} * {2} * {3:f3} + {4:f3} * {5:f3})) ",
                        Ap,
                        pft_list[cnt - 1].GammaSub,
                        D,
                        N_gamma,
                        pft_list[cnt - 1].P_D,
                        Nq);
                    sw.WriteLine();
                    sw.WriteLine("     = {0:f3} Ton", R_us);
                }
                sw.WriteLine();

                double total_resist = Rfs + R_us;
                sw.WriteLine("Total Ultimate Resistance of Pile = Rfs + R_us");
                sw.WriteLine("                                  = {0:f3} + {1:f3}", Rfs, R_us);
                sw.WriteLine("                                  = {0:f3} Ton", total_resist);
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("Factor of Safety = FS = {0}", FS);
                double Qus = total_resist / FS;

                sw.WriteLine();
                sw.WriteLine("Safe Load on Pile = {0:f3} / {1} = {2:f3} Ton", total_resist, FS, Qus);

                #endregion

                #region END BEARING
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("(B) FOR COHESIVE COMPONENT OF SOIL :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("-----------------------------------------------------------------------------");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "Layers",
                    "Layer",
                    "Depth",
                    "Surface",
                    "",
                    "",
                    "Ultimate");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "",
                    "Thickness",
                    "below Scour",
                    "Area  ",
                    "α  ",
                    "c  ",
                    "resistance");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "",
                    "[D](m)",
                    "Level[H](m)",
                    "[As](sq.m)",
                    "",
                    "",
                    "[As*α*c](Ton)");
                sw.WriteLine("-----------------------------------------------------------------------------");

                double Rfc = 0.0;

                for (int i = 0; i < pft_list.Count; i++)
                {
                    sk_frc = (pft_list[i].SurfaceArea * pft_list[i].Alpha * pft_list[i].Cohesion);
                    Rfc += sk_frc;
                    sw.WriteLine("{0,-6} {1,10:f3} {2,14:f3} {3,14:f3} {4,7:f3} {5,7:f3} {6,7:f3}",
                    pft_list[i].Layers,
                    pft_list[i].Thickness,
                    pft_list[i].H_DepthBelowScourLevel,
                    pft_list[i].SurfaceArea,
                    pft_list[i].Alpha,
                    pft_list[i].Cohesion,
                    sk_frc);
                }
                sw.WriteLine("-----------------------------------------------------------------------------");
                sw.WriteLine("{0,63} {1,7:f3} Ton",
                    "Total Ultimate Resistance = ",
                    Rfc);
                sw.WriteLine();
                //sw.WriteLine("Total Ultimate Resistance = {0:f3} Ton", Rfc);
                //sw.WriteLine();

                //Chiranjit [2013 06 17]

                sw.WriteLine("Referring to Table No. 2, given at the end of this report,");
                sw.WriteLine();
                sw.WriteLine("For the value of φ = {0} deg, Nc = {1}, Nq = {2} and Nr = {3}", phi, Nc, Nq, N_gamma);
                sw.WriteLine();

                double end_brng = Ap * pft_list[cnt - 1].Cohesion * Nc;
                sw.WriteLine("End Bearing = Ap * C[{0}] * Nc", cnt);
                sw.WriteLine("            = {0} * {1} * {2}", Ap, pft_list[cnt - 1].Cohesion, Nc);
                sw.WriteLine("            = {0:f3} ", end_brng);
                sw.WriteLine();

                double Qu = Rfc + end_brng;
                sw.WriteLine("Total Ultimate Resistance of Pile = Qu");
                sw.WriteLine("    Qu = {0:f3} + {1:f3} = {2:f3} Ton", Rfc, end_brng, Qu);
                sw.WriteLine();
                sw.WriteLine("Factor of Safety = FS = {0}", FS);
                sw.WriteLine();

                double Quc = Qu / FS;
                sw.WriteLine("Safe Load on Pile = {0:f3}/{1} = {2:f3} Ton", Qu, FS, Quc);
                sw.WriteLine();

                double perm_load = Qus + Quc;
                sw.WriteLine("Permissible safe Load on Pile = Qus + Quc");
                sw.WriteLine("                              = {0:f3} + {1:f3}", Qus, Quc);
                sw.WriteLine("                              = {0:f3} Ton", perm_load);
                sw.WriteLine();
                sw.WriteLine("Applied Load on Pile = P = {0} Ton", P);
                sw.WriteLine();



                double load_cap = (LPC * BPC * DPC / 10E8) * gamma_c;
                //sw.WriteLine("Applied Load on Pile Group         = P = 216.000 Ton");
                sw.WriteLine("");
                sw.WriteLine("Load by Pile Cap on Pile Group = LPC x BPC x DPC x γ_c ");
                sw.WriteLine("                               = {0:f3} x {1:f3} x {2:f3} x {3:f3}", (LPC / 1000.0), (BPC / 1000.0), (DPC / 1000.0), gamma_c);
                sw.WriteLine("                               = {0:f3} Ton", load_cap);
                sw.WriteLine("");
                double self_wt = Ap * L1 * (gamma_c - 1.0);

                sw.WriteLine("Self weight of each Pile = Ap * L1 * (γ_c - 1)");
                sw.WriteLine("                    = {0:f3} * {1} * ({2} - 1)", Ap, L1, gamma_c);
                sw.WriteLine("                    = {0:f3} Ton", self_wt);
                sw.WriteLine();
                //sw.WriteLine("Self weight of each Pile                 = Ap * L1 * (γ_c - 1)");
                //sw.WriteLine("                                    = 0.785 * 25 * (2.5 - 1)");
                //sw.WriteLine("                                    = 29.438 Ton");
                sw.WriteLine("");

                double total_load = (P + load_cap) / Np + self_wt;
                sw.WriteLine("Total Load on Pile  = Pu");
                sw.WriteLine("                    = (P + Load by Pile Cap on Pile Group)/ Total Piles [Np] + Self weight of Pile");
                sw.WriteLine("                    = ({0:f3} + {1:f3})/{2:f0} + {3:f3} ", P, load_cap, Np, self_wt);
                sw.WriteLine("                    = {0:f3} + {1:f3}", ((P + load_cap) / Np), self_wt);
                //sw.WriteLine("= 100.772 Ton < 449.824 Ton, Hence, Safe");
                sw.WriteLine("");

                double Pu = total_load;


                //double total_load = P + self_wt;
                if (total_load < perm_load)
                    sw.WriteLine("                    = {0:f3} Ton < {1:f3} Ton, Hence, Safe", total_load, perm_load);
                else
                {
                    IS_DESIGN_OK = false;
                    sw.WriteLine("                    = {0:f3} Ton > {1:f3} Ton, Hence, Unsafe, NOT OK", total_load, perm_load);
                }


                #endregion

                #region STEP 2 : STRUCTURAL DESIGN OF PILE
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine("STEP {0}.2 : STRUCTURAL DESIGN OF PILE", step);
                sw.WriteLine("STEP 2 : STRUCTURAL DESIGN OF PILE", step);
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();


                sw.WriteLine("Pile Dia = D = {0} m = {1} mm", D, (D * 1000));
                D = D * 1000;
                sw.WriteLine();
                double cover = 0.1 * D;
                frmPile_Graph fpg = new frmPile_Graph();

                sw.WriteLine("Cover = d' = 0.1 * D = 0.1 * {0} = {1} mm", D, cover);
                sw.WriteLine();
                sw.WriteLine("Cover / Pile Dia = d' / D = {0} / {1} = {2}", cover, D, (cover / D));
                fpg.txt_ddash.Text = (cover / D).ToString("0.00");
                sw.WriteLine();

                double val1 = Pu * 1000 * 10 / (sigma_ck * D * D);
                sw.WriteLine("Pu/(σ_ck*D*D) = {0}*1000*10/({1}*{2}*{2})", Pu, sigma_ck, D);
                sw.WriteLine("              = {0:f4}", val1);
                fpg.txt_Pu.Text = val1.ToString("0.0000");
                sw.WriteLine();

                val1 = (AM * 1000 * 10 * 1000) / (sigma_ck * D * D * D);
                sw.WriteLine("Mu/(σ_ck*D**3) = {0}/({1}*{2}^3)", AM, sigma_ck, D);
                sw.WriteLine("               = {0:f4}", val1);
                fpg.txt_Mu.Text = val1.ToString("0.0000");
                sw.WriteLine();
                fpg.txt_sigma_y.Text = fy.ToString();
                fpg.txt_sigma_ck.Text = sigma_ck.ToString();
                fpg.txt_obtaned_value.Text = "0.0";

                fpg.ShowDialog();
                val1 = MyList.StringToDouble(fpg.txt_obtaned_value.Text, 0.0);
                sw.WriteLine("From figure, we get p/σ_ck = {0}", val1);
                sw.WriteLine();
                if (val1 < 0.4)
                {
                    val1 = 0.4;
                }
                sw.WriteLine("In piles provide minimum {0}% Steel.", val1);
                sw.WriteLine();

                double area_mn_st = (val1 / 100) * (Math.PI / 4.0) * D * D;
                sw.WriteLine("Area of Main Steel Reinforcement = As");
                sw.WriteLine("   As = ({0}/100) * (π / 4) * D * D", val1);
                sw.WriteLine("      = ({0}/100) * (π / 4) * {1} * {1}", val1, D);
                sw.WriteLine("      = {0:f2} sq.mm", area_mn_st);
                sw.WriteLine();

                double ar_one_st_br = (Math.PI * d1 * d1) / 4.0;
                sw.WriteLine("Area of one Steel reinforcement bar = π * {0} * {0} / 4", d1);
                sw.WriteLine("                                    = {0:f2} sq.mm", ar_one_st_br);
                sw.WriteLine();

                double total_bar = (int)((area_mn_st / ar_one_st_br) + 1);


                Steel_Reinforcement ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[1]";
                ssr.Number_Of_Bars = (int)total_bar;
                ssr.Bar_Dia = d1;
                ssr.Length = BOQ.Pile_Length;
                BOQ.Steel_Reinforcement.Add(ssr);

                sw.WriteLine("Total number of bars = {0:f2} / {1:f2} = {2:f0}", area_mn_st, ar_one_st_br, total_bar);
                sw.WriteLine();

                bno_1 = total_bar;
                sw.WriteLine("Provide {0} numbers T{1} mm dia bars.", total_bar, d1);
                sw.WriteLine();
                sw.WriteLine("Use 8 mm diameter lateral MS bars as Ties / Binders");
                sw.WriteLine();
                sw.WriteLine("the pitch / spacing = r < 500 mm");
                sw.WriteLine("                        < 16*d1 = 16*{0} = {1} mm", d1, (16 * d1));

                val1 = (int)((16 * d1) / 100.0);
                val1 *= 100;

                double provide_spacing = val1;
                sw.WriteLine("                        < {0} mm", val1);
                sw.WriteLine();


                ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[2]";
                ssr.Number_Of_Bars = (int)(BOQ.Pile_Length * 1000 / provide_spacing);
                ssr.Bar_Dia = 8;
                ssr.Length = 2 * Math.PI * ((D - cover) / 1000.0);


                total_bar = (int)(1000 / provide_spacing);
                total_bar += 1.0;

                BOQ.Steel_Reinforcement.Add(ssr);

                bspc_2 = provide_spacing;
                sw.WriteLine("Provide {0} numbers T{1} mm dia bars with spacing of {2} mm c/c.",
                    total_bar, d4, provide_spacing);
                //(4)  Main Bars 10 Nos. Dia. 20 MM. in Piles
                _4 = string.Format("Main Bars {0} Nos. Dia. {1} mm. in Piles", ssr.Number_Of_Bars, ssr.Bar_Dia, provide_spacing);


                #endregion

                #region STEP 3 : STRUCTURAL DESIGN OF PILE

                BOQ.Pile_Cap_Length = LPC / 1000;
                BOQ.Pile_Cap_Width = BPC / 1000;
                BOQ.Pile_Cap_Thickness = DPC / 1000;


                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine("STEP {0}.3 : DESIGN OF PILE CAP :", step);
                sw.WriteLine("STEP 3 : DESIGN OF PILE CAP :", step);
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();

                double n = (m * sigma_cbc) / (sigma_st + (m * sigma_cbc));
                sw.WriteLine("Neutral Axis Factor = n = (m * σ_cbc) / (σ_st + (m * σ_cbc))");
                sw.WriteLine("         = ({0} * {1}) / ({2} + ({0} * {1}))", m, sigma_cbc, sigma_st);
                sw.WriteLine("         = {0:f3}", n);
                sw.WriteLine();

                double j = (1 - (n / 3));
                sw.WriteLine("Lever Arm Factor = j = 1 - (n/3) = 1 - ({0:f3}/3) = {1:f3}", n, j);
                sw.WriteLine();


                double Q = 0.5 * sigma_cbc * j * n;
                sw.WriteLine("Q = 0.5 * σ_cbc * j * n");
                sw.WriteLine("  = 0.5 * {0} * {1:f3} * {2:f3}", sigma_cbc, j, n);
                sw.WriteLine("  = {0:f3}", Q);
                sw.WriteLine();
                double P2 = N * Pu;
                sw.WriteLine("Sum of Forces on Piles in front row = P2 = N X Pu = {0} X {1} = {2} Ton", N, Pu, P2);
                //sw.WriteLine("  P2 = {0} + {1} = {2} Ton", N, P, P2);
                sw.WriteLine();

                double mom_pier = P2 * ((l1 / 1000.0) - (l2 / 1000.0));
                sw.WriteLine("Moment at the Face of Pier = P2 * ((L1 / 1000.0) - (L2 / 1000.0))");
                sw.WriteLine("                           = {0} * (({1} / 1000.0) - ({2} / 1000.0))", P2, l1, l2);
                sw.WriteLine("                           = {0:f2} Ton-m", mom_pier);
                sw.WriteLine();

                double P3 = (l1 / 1000.0) * (LPC / 1000.0) * (DPC / 1000.0) * gamma_c;
                sw.WriteLine("Relief due to self wt of Pile Cap = P3");
                sw.WriteLine(" = P3 = (L1 / 1000.0) * (LPC / 1000.0) * (DPC / 1000.0) * γ_c");
                sw.WriteLine(" = ({0} / 1000.0) * ({1} / 1000.0) * ({2} / 1000.0) * {3}", l1, LPC, DPC, gamma_c);
                sw.WriteLine(" = {0:f3} Ton", P3);
                sw.WriteLine();

                double mom_self_wt = P3 * (l1 / (1000.0 * 2));
                sw.WriteLine("Moment due to self wt of Pile Cap");
                sw.WriteLine("  = {0:f3} * (L1 / (1000.0 * 2))", P3);
                sw.WriteLine("  = {0:f3} * ({1} / (1000.0 * 2))", P3, l1);
                sw.WriteLine("  = {0:f3} Ton-m", mom_self_wt);
                sw.WriteLine();

                double total_mom = mom_pier - mom_self_wt;
                sw.WriteLine("Total Moment at the Face of Pier = {0:f3} - {1:f3} = {2:f3} Ton-m", mom_pier, mom_self_wt, total_mom);

                sw.WriteLine();


                double M = total_mom / (LPC / 1000.0);
                sw.WriteLine("Moment per Linear metre = {0:f3} / (LPC/1000)", total_mom);
                sw.WriteLine("                        = {0:f3} / ({1}/1000)", total_mom, LPC);
                sw.WriteLine("                        = {0:f2} Ton-m/m", M);
                sw.WriteLine();


                double req_dep = (M * 10E4) / (Q * 100);
                req_dep = Math.Sqrt(req_dep);

                sw.WriteLine("Depth required = √(({0:f2}*10^5)/(Q*100))", M);
                sw.WriteLine("               = √(({0:f2}*10^5)/({1:f2}*100))", M, Q);
                sw.WriteLine("               = {0:f2} cm = {1:f2} mm", req_dep, (req_dep * 10));

                req_dep = req_dep * 10;
                sw.WriteLine();
                sw.WriteLine("Overall Depth Provided = {0} mm", DPC);
                sw.WriteLine();
                sw.WriteLine("Clear Cover = 175 mm");
                sw.WriteLine();
                double half_bar_dia = d2 / 2.0;
                sw.WriteLine("Half Bar diameter of Steel Reinforcements = {0} m", half_bar_dia);
                sw.WriteLine();

                double eff_dep = DPC - 175 - half_bar_dia;
                sw.WriteLine("Effective Depth Provided = {0} - 175 - {1}", DPC, half_bar_dia);
                if (eff_dep > req_dep)
                {
                    sw.WriteLine("                         = {0:f3} mm > {1:f2} mm, Hence OK", eff_dep, req_dep);
                }
                else
                {
                    IS_DESIGN_OK = false;
                    sw.WriteLine("                         = {0:f3} mm < {1:f3} mm, Hence NOT OK", eff_dep, req_dep);
                }
                double deff = eff_dep / 10;
                sw.WriteLine();
                sw.WriteLine("deff = {0} mm = {1} cm", eff_dep, deff);
                sw.WriteLine();

                double req_st_renf = (M * 10E4) / (j * sigma_st * deff * 1);
                sw.WriteLine("Required Steel Reinforcement = M * 10^5/(j*σ_st*deff*1)");
                sw.WriteLine("                             = {0:f3} * 10^5/({1:f3}*{2}*{3}*1)", M, j, sigma_st, deff);
                sw.WriteLine("                             = {0:f3} sq.cm/m", req_st_renf);
                sw.WriteLine();

                double req_min_tension = (0.2 / 100) * deff;
                sw.WriteLine("Required minimum Steel for tension = 0.2%");
                sw.WriteLine("                                   = (0.2/100) * {0}", deff);
                sw.WriteLine("                                   = {0:f3} sq.cm/m", req_min_tension);
                sw.WriteLine();



                bspa_3 = 150.0;
                ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[3]";
                ssr.Number_Of_Bars = ((int)(1000.0 / 150.0) + 1);
                ssr.Bar_Dia = d2;
                ssr.Length = BOQ.Pile_Cap_Length;
                BOQ.Steel_Reinforcement.Add(ssr);

                sw.WriteLine("Provide Steel Reinforcements {0} Diameter bars @150 mm c/c spacing.", d2);
                //(2)  Main Bottom Bars Dia. 25 @ 150 c/c
                _2 = string.Format("Main Bottom Bars Dia. {0} @ 150 c/c", d2);


                sw.WriteLine();
                double pro_area_st = (Math.PI * d2 * d2 / 4.0) * (1000.0 / 150.0);

                pro_area_st = pro_area_st / 100;

                if (pro_area_st > req_min_tension)
                {
                    sw.WriteLine("Area of Steel Provided at the bottom of the Pile Cap");
                    sw.WriteLine("in Longitudinal direction = {0:f3} sq.cm/m > {1:f3} sq.cm/m, Hence OK",
                        pro_area_st, req_min_tension);
                }
                else
                {
                    IS_DESIGN_OK = false;
                    sw.WriteLine("Area of Steel Provided at the bottom of the Pile Cap");
                    sw.WriteLine("in Longitudinal direction = {0:f3} sq.cm/m < {1:f3} sq.cm/m, Hence NOT OK",
                        pro_area_st, req_min_tension);
                }
                sw.WriteLine();

                double nom_steel = (0.06 / 100) * deff;
                sw.WriteLine("Steel Provided in Longitudinal derection at the top of ");
                sw.WriteLine("Pile Cap = Nominal Steel = 0.06% of Area");
                sw.WriteLine("         = (0.06/100) * deff");
                sw.WriteLine("         = (0.06/100) * {0}", deff);
                sw.WriteLine("         = {0:f3} sq.cm/m", nom_steel);
                sw.WriteLine();

                ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[3]";
                ssr.Number_Of_Bars = ((int)(1000.0 / 150.0) + 1);
                ssr.Bar_Dia = d3;
                ssr.Length = BOQ.Pile_Cap_Length;
                BOQ.Steel_Reinforcement.Add(ssr);

                bspa_4 = 150;


                sw.WriteLine("Provided {0} mm dia bars at 150 mm c/c spacing.", d3);
                //(1)  Main Top Bars Dia. 16 @ 150 c/c
                _1 = string.Format("Main Top Bars Dia. {0} @ 150 c/c", d3);

                sw.WriteLine();

                double area_top = (Math.PI * d3 * d3 / 4.0) * (1000.0 / 150.0);
                sw.WriteLine("Area of Steel Provided = (π*{0}*{0}/4)*(1000/150)", d3);
                sw.WriteLine("                       = {0:f2} sq.mm/m", area_top);
                area_top = area_top / 100;
                sw.WriteLine("                       = {0:f2} sq.cm/m", area_top);

                sw.WriteLine();
                bspa_4 = 150;

                sw.WriteLine("Distribution Steel provided at top and bottom of Pile Cap");
                sw.WriteLine(" {0} mm dia bars at 150 mm c/c spacing", d3);
                sw.WriteLine();
                area_top = (Math.PI * d3 * d3 / 4.0) * (1000.0 / 150.0);
                sw.WriteLine("Area of Steel Provided = (π*{0}*{0}/4)*(1000/150)", d3);
                sw.WriteLine("                       = {0:f2} sq.mm/m", area_top);
                area_top = area_top / 100;
                sw.WriteLine("                       = {0:f2} sq.cm/m", area_top);
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Shear Reinforcement :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                deff = deff / 100;
                sw.WriteLine("Critical section at deff = {0} m from face of Pier", deff);
                sw.WriteLine();
                //sw.WriteLine("Factor for Distribution of Load = 0.1375");
                sw.WriteLine();

                //double P4 = P2 * 0.1375;
                double P4 = P2;

                //sw.WriteLine("Reaction on Piles in Front row  = P4 = {0} * 0.1375 = {1:f2} Ton", P2, P4);
                sw.WriteLine("Reaction on Piles in Front row  = P2 = {0:f2} Ton", P4);
                sw.WriteLine();

                //val1 = (((LPC - (l1 - deff)) / 1000.0) * DPC * gamma_c);
                deff = deff * 1000;
                val1 = (LPC / 1000.0) * ((l1 / 1000.0) - (deff / 1000.0)) * (DPC / 1000.0) * gamma_c;
                double tau_v = (P4 - val1) / (deff);

                //double _tau_v = P4 * 10 * (LPC / 1000.0) * ((l1 / 1000.0) - (deff / 1000.0));
                double _tau_v = P4 * 10 * LPC * (l1 - deff);

                tau_v = (_tau_v) / (LPC * deff * 1000);
                tau_v = double.Parse(tau_v.ToString("0.000"));

                sw.WriteLine("Nominnal Shear stress = τ_v");
                sw.WriteLine();
                //sw.WriteLine("τ_v = ((P4 - (LPC * ((LPC - (l1 - deff)) / 1000.0) * DPC * γ_c)) / (deff * 1000.0))");
                //sw.WriteLine("    = (({0:f2} - ({1} * (({1} - ({2} - {3})) / 1000.0) * {4} * {5})) / ({3} * 1000.0))",
                //    P4, LPC, l1, deff, DPC, gamma_c);


                sw.WriteLine("τ_v = (P2*10*LPC*(l1 - deff)) / (LPC * deff * 1000)");
                sw.WriteLine("    = ({0}*10*{1}*({2} - {3})) / ({1} * {3} * 1000)", P4, LPC, l1, deff);
                //sw.WriteLine();
                sw.WriteLine("    = {0:f4} N/sq.mm", tau_v);
                sw.WriteLine();

                deff = deff / 10;
                double percent = (100 * pro_area_st) / (100.0 * deff);
                percent = double.Parse(percent.ToString("0.000"));
                sw.WriteLine("Percent of bottom main reinforcement");
                sw.WriteLine(" p = (100 * {0:f3}) / (100.0 * {1})", pro_area_st, deff);
                sw.WriteLine("   = {0:f3}", percent);
                sw.WriteLine();

                double tau_c = Get_Table_1_Value(percent, cap_sigma_ck, ref ref_string);
                sw.WriteLine("Permissible Shear Stress for p = {0} and for M{1:f0} Concrete", percent, cap_sigma_ck);
                sw.WriteLine("from Table 1 (given at the end of the report). {0}", ref_string);
                sw.WriteLine();
                if (tau_c > tau_v)
                {
                    sw.WriteLine("τ_c = {0:f2} N/sq.mm > τ_v", tau_c);

                    sw.WriteLine();

                    sw.WriteLine("So, no shear Reinforcement is required and provide");
                    sw.WriteLine("provide minimum shear reinforcement.");
                    sw.WriteLine();
                    double min_shr_renf = 0.0011 * 100 * 250;
                    sw.WriteLine("Minimum Shear Reinforcement = 0.0011 * b * S");
                    sw.WriteLine("                            = 0.0011 * 100 * 250");
                    sw.WriteLine("                            = 27.50 sq.cm/m");
                    sw.WriteLine();
                    sw.WriteLine("Provide 8 mm diameter 42 legged at 200 mm c/c spacing");
                    sw.WriteLine();

                    ssr = new Steel_Reinforcement();
                    ssr.BarMark = "P_AST[4]";
                    ssr.Number_Of_Bars = ((int)(1000.0 / 200));
                    ssr.Bar_Dia = 8;
                    ssr.Length = BOQ.Pile_Cap_Length;
                    BOQ.Steel_Reinforcement.Add(ssr);

                    bspa_5 = 200;

                    pro_area_st = (Math.PI * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0);
                    sw.WriteLine();
                    sw.WriteLine("Area of Steel Provided = (π * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0)");
                    sw.WriteLine("                       = {0:f2} sq.mm/m", pro_area_st);

                    pro_area_st = pro_area_st / 100.0;
                    sw.WriteLine("                       = {0:f2} sq.cm/m", pro_area_st);
                }
                else
                {
                    sw.WriteLine("τ_c = {0:f2} N/sq.mm < (τ_v) {1:f2} N/sq.mm ", tau_c, tau_v);
                    sw.WriteLine();

                    double bal_sh_strs = tau_v - tau_c;
                    bal_sh_strs = double.Parse(bal_sh_strs.ToString("0.000"));
                    sw.WriteLine("Balance Shear Stress");
                    sw.WriteLine();
                    sw.WriteLine("τ_v - τ_c = {0} - {1} = {2} N/sq.mm", tau_v, tau_c, bal_sh_strs);
                    sw.WriteLine();

                    double bal_shr_frc = bal_sh_strs * l1 * deff / 1000.0;
                    bal_shr_frc = double.Parse(bal_shr_frc.ToString("0"));
                    sw.WriteLine("Balance Shear Force");
                    sw.WriteLine();
                    sw.WriteLine(" = ({0} * {1} * {2}) / 1000", bal_sh_strs, l1, deff);
                    sw.WriteLine(" = {0} kN", bal_shr_frc);
                    sw.WriteLine();
                    sw.WriteLine("Using 10 mm bars @200 mm c/c ");
                    //(3)  Shear Reinf. Bars Dia. 10, 42 Legged, Spacing 200 
                    _3 = string.Format("Shear Reinf. Bars Dia. 10, 42 Legged, Spacing 200");

                    sw.WriteLine();

                    double Ast = (bal_shr_frc * 200.0 * 1000.0) / (200.0 * deff);
                    Ast = double.Parse(Ast.ToString("0"));
                    sw.WriteLine("Required Shear Reinforcement Steel");
                    sw.WriteLine("Ast = ({0} * 200.0 * 1000.0) / (200.0 * {1})", bal_shr_frc, deff);
                    sw.WriteLine("    = {0} sq.mm", Ast);
                    sw.WriteLine("    = {0} sq.cm", (Ast / 100.0));
                    sw.WriteLine();
                    double min_shr_renf = 0.0011 * 100 * 250;
                    sw.WriteLine("Minimum Shear Reinforcement = 0.0011 * b * S");
                    sw.WriteLine("                            = 0.0011 * 100 * 250");
                    sw.WriteLine("                            = 27.50 sq.cm/m");
                    sw.WriteLine();
                    if (Ast < min_shr_renf)
                    {
                        sw.WriteLine();
                        sw.WriteLine("Provide 8 mm diameter 42 legged at 200 mm c/c spacing");
                        sw.WriteLine();

                        pro_area_st = (Math.PI * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0);
                        sw.WriteLine();
                        sw.WriteLine("Area of Steel Provided = (π * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0)");
                        sw.WriteLine("                       = {0:f2} sq.mm/m", pro_area_st);

                        pro_area_st = pro_area_st / 100.0;
                        sw.WriteLine("                       = {0:f2} sq.cm/m", pro_area_st);
                    }

                    bspa_5 = 200;
                    ssr = new Steel_Reinforcement();
                    ssr.BarMark = "P_AST[4]";
                    ssr.Number_Of_Bars = ((int)(1000.0 / 200));
                    ssr.Bar_Dia = 8;
                    ssr.Length = BOQ.Pile_Cap_Length;
                    BOQ.Steel_Reinforcement.Add(ssr);

                    //sw.WriteLine("τ_c = {0} N/sq.mm < τ_v", tau_c);
                    //sw.WriteLine();
                    //sw.WriteLine("Provide Shear reinforcement for balance of");
                    //sw.WriteLine("Shear Stress (τ_v - τ_c) N/sq.mm");
                    sw.WriteLine();
                }
                #endregion


                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("");
                #region
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("STEP 4: DESIGN SUMMARY");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("");


                PL = L1;
                Design_Summary.Add(string.Format("Pile Size and Reinforcements"));
                Design_Summary.Add(string.Format("----------------------------"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Pile Diameter = {0} mm.", D));
                Design_Summary.Add(string.Format("Reinforcement Clear Cover = {0} mm.", cover));
                Design_Summary.Add(string.Format("Pile Length = {0} m.", PL));
                Design_Summary.Add(string.Format("Total Piles = {0} Nos.", Np));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format(""));

                // bspa_3 = 150;
                // bspa_4 = 150;
                // bspa_5 = 150;
                // bno_1 = 10;

                Design_Summary.Add(string.Format("Main Vertical Reinforcements"));
                Design_Summary.Add(string.Format("Provide {0} numbers T{1} mm dia bars, ", bno_1, d1));
                Design_Summary.Add(string.Format("Bar Mark in Drawing P_Ast [1]"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Lateral MS Bars as Ties / Binders"));

                //bspc_2 = 300;
                //d4 = 8;

                Design_Summary.Add(string.Format("Provide {0} mm diameter lateral MS bars as Ties / Binders, @ {1} mm c/c.", d4, bspc_2));
                Design_Summary.Add(string.Format("Bar Mark in Drawing P_Ast [2]"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Pile Cap Size and Reinforcements"));
                Design_Summary.Add(string.Format("--------------------------------"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Pile Cap Length        = {0,6} mm          Marked as (LPC) in the Drawing", LPC));
                Design_Summary.Add(string.Format("Pile Cap Width         = {0,6} mm          Marked as (BPC) in the Drawing", BPC));
                Design_Summary.Add(string.Format("Thickness of Pile Cap  = {0,6} mm          Marked as (DPC) in the Drawing", DPC));
                Design_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L1) in the Drawing", l1));
                Design_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L2) in the Drawing", l2));
                Design_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L3) in the Drawing", l3));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format(""));

                Design_Summary.Add(string.Format("Main Longitudinal Steel Reinforcements, at Top & Bottom"));
                Design_Summary.Add(string.Format("Provide {0} mm Diameter bars @ {1} mm c/c spacing", d2, bspa_3));
                Design_Summary.Add(string.Format("Bar Mark in Drawing P_Ast[3]"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Transverse Distribution Steel Reinforcements, at Top & Bottom"));
                Design_Summary.Add(string.Format("Provide {0} mm Diameter bars @ {1} mm c/c spacing", d3, bspa_4));
                Design_Summary.Add(string.Format("Bar Mark in Drawing P_Ast[4]"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Vertical Shear Reinforcements"));
                Design_Summary.Add(string.Format("Provide {0} mm diameter 42 legged at {1} mm c/c spacing", d4, bspa_5));
                Design_Summary.Add(string.Format("Bar Mark in Drawing P_Ast[5]"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format(""));

                foreach (var item in Design_Summary)
                {
                    sw.WriteLine(item);
                }

                #endregion


                #region BOQ SUMMARY
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("STEP 5: BILL OF QUANTITY");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("");

                BOQ_Summary = new List<string>();
                PL = L1;
                BOQ_Summary.Add(string.Format("--------------------------"));
                BOQ_Summary.Add(string.Format("PILE NO : P{0}", step));
                BOQ_Summary.Add(string.Format("--------------------------"));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Pile Size and Reinforcements"));
                BOQ_Summary.Add(string.Format("----------------------------"));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Pile Diameter = {0} m.", D/1000));
                BOQ_Summary.Add(string.Format("Reinforcement Clear Cover = {0} m.", cover/1000));
                BOQ_Summary.Add(string.Format("Pile Length = {0} m.", PL));
                BOQ_Summary.Add(string.Format("Total Piles = {0} Nos.", Np));
                BOQ_Summary.Add(string.Format(""));



                BOQ_Summary.Add(string.Format(""));

                double conc_qty = Np * Math.PI * Math.Pow(D / 1000, 2) / 4.0 * PL;
                //BOQ_Summary.Add(string.Format("Concrete Quantity = Nos x 3.1416 x (D)^2 / 4 x PL"));
                BOQ_Summary.Add(string.Format("Concrete Quantity = {0} x 3.1416 x ({1:f3})^2 / 4 x {2:f3}  = {3:f3} Cu.m", Np, (D / 1000), PL, conc_qty));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("--------------------------------------"));
                BOQ_Summary.Add(string.Format("REBARS QUANTITY"));
                BOQ_Summary.Add(string.Format("--------------------------------------"));
                BOQ_Summary.Add(string.Format(""));
              
                // bspa_3 = 150;
                // bspa_4 = 150;
                // bspa_5 = 150;
                // bno_1 = 10;

                BOQ_Summary.Add(string.Format("Main Vertical Reinforcements"));


                double tot_weight = bno_1 * PL * Tables.Rebars.Get_Rebar_Weight(d1);
                BOQ_Summary.Add(string.Format("Provide {0} numbers T{1} mm dia bars, ", bno_1, d1));
                BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
                    bno_1, PL, Tables.Rebars.Get_Rebar_Weight(d1), tot_weight));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Lateral MS Bars as Ties / Binders"));

                //bspc_2 = 300;
                //d4 = 8;

                BOQ_Summary.Add(string.Format("Provide {0} mm diameter lateral MS bars as Ties / Binders, @ {1} mm c/c.", d4, bspc_2));
                //BOQ_Summary.Add(string.Format("Bar Mark in Drawing P_Ast [2]"));

                //bno_1 = (int)((2 * Math.PI * (D / 2)) / bspc_2);
                bno_1 = (int)(PL*1000/ bspc_2);



                tot_weight = bno_1 * (2 * Math.PI * (D / 2))/1000.0 * Tables.Rebars.Get_Rebar_Weight(d4);

                BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
            bno_1, (2 * Math.PI * (D / 2)) / 1000.0, Tables.Rebars.Get_Rebar_Weight(d4), tot_weight));
                BOQ_Summary.Add(string.Format(""));
        

                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Pile Cap Size and Reinforcements"));
                BOQ_Summary.Add(string.Format("--------------------------------"));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Pile Cap Length        = {0:f3} m", LPC/1000));
                BOQ_Summary.Add(string.Format("Pile Cap Width         = {0:f3} m", BPC / 1000));
                BOQ_Summary.Add(string.Format("Thickness of Pile Cap  = {0:f3} m", DPC / 1000));
                //BOQ_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L1) in the Drawing", l1));
                //BOQ_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L2) in the Drawing", l2));
                //BOQ_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L3) in the Drawing", l3));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));

                conc_qty = (LPC / 1000) * (BPC / 1000) * (DPC / 1000);

                BOQ_Summary.Add(string.Format("Concrete Quantity = {0:f3} x {1:f3} x {2:f3} = {3:f3} Cu.m",
                    (LPC / 1000), (BPC / 1000), (DPC / 1000), conc_qty));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("--------------------------------------"));
                BOQ_Summary.Add(string.Format("REBARS QUANTITY"));
                BOQ_Summary.Add(string.Format("--------------------------------------"));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));

                BOQ_Summary.Add(string.Format("Main Longitudinal Steel Reinforcements, at Top & Bottom"));
                BOQ_Summary.Add(string.Format("Provide {0} mm Diameter bars @ {1} mm c/c spacing", d2, bspa_3));

                tot_weight = (BPC / bspa_3) * (LPC / 1000) * Tables.Rebars.Get_Rebar_Weight(d2);

                BOQ_Summary.Add(string.Format("Total Weight = {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton",
                           (BPC / bspa_3), (LPC / 1000), Tables.Rebars.Get_Rebar_Weight(d2), tot_weight));
                BOQ_Summary.Add(string.Format(""));
        
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Transverse Distribution Steel Reinforcements, at Top & Bottom"));
                BOQ_Summary.Add(string.Format("Provide {0} mm Diameter bars @ {1} mm c/c spacing", d3, bspa_4));

                tot_weight = (LPC / bspa_4) * (BPC / 1000) * Tables.Rebars.Get_Rebar_Weight(d3);

                BOQ_Summary.Add(string.Format("Total Weight = {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton",
                           (LPC / bspa_4), (BPC / 1000), Tables.Rebars.Get_Rebar_Weight(d3), tot_weight));
                BOQ_Summary.Add(string.Format(""));



                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Vertical Shear Reinforcements"));
                BOQ_Summary.Add(string.Format("Provide {0} mm diameter 42 legged at {1} mm c/c spacing", d4, bspa_5));

                //tot_weight = (2 * (LPC + BPC) - 4 * cover) / 1000 ;
                tot_weight = 42 * (DPC / bspa_5) * ((2 * (LPC + DPC) - 4 * cover) / 1000) * Tables.Rebars.Get_Rebar_Weight(d4);

                BOQ_Summary.Add(string.Format("Total Weight = 42 x {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton",
                           (DPC / bspa_5), ((2 * (LPC + DPC) - 4 * cover) / 1000),
                           Tables.Rebars.Get_Rebar_Weight(d4), tot_weight));
                BOQ_Summary.Add(string.Format(""));


                foreach (var item in BOQ_Summary)
                {
                    sw.WriteLine(item);
                }

                #endregion

                //sw.WriteLine();
                //sw.WriteLine("------------------------------------------------------------");
                ////sw.WriteLine("STEP {0}.4 : BILL OF QUANTITY ", step);
                //sw.WriteLine("STEP 5 : BILL OF QUANTITY ", step);
                //sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine();
                //foreach (var item in BOQ.Get_Text())
                //{
                //    sw.WriteLine(item);

                //}
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine();
                Write_Table_1(sw);


                #region END OF REPORT
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("---------------------------------------------------------------------------");
                sw.WriteLine("---------------------       END OF DESIGN        --------------------------");
                sw.WriteLine("---------------------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                //sw.WriteLine("---------------------------------------------------------------------------");
                //sw.WriteLine("---------            Thank you for using ASTRA Pro          ---------------");
                //sw.WriteLine("---------------------------------------------------------------------------");

                #endregion
            }
            catch (Exception ex) { }
            finally
            {
                sw.Flush();
                sw.Close();
            }

            if (Report_File != "")
            {
                File.WriteAllLines(Get_BOQ_File(step), BOQ_Summary.ToArray());
                File.WriteAllLines(Get_Design_Summary_File(step), Design_Summary.ToArray());
                return new List<string>(File.ReadAllLines(Get_Report_File(step)));
            }
            


            return new List<string>();
        }


        public void Design_Program_Individual(int step)
        {
            double bno_1, bspc_2, d4, bspa_3, bspa_4, bspa_5;
            d4 = 8;
            Design_Summary = new List<string>();

            BOQ = new Pile_Foundation_BOQ();
            IS_DESIGN_OK = true;
            string ref_string = "";
            string filename = Report_File;
            //StreamWriter sw = new StreamWriter(new FileStream(Report_File, FileMode.Create));
            StreamWriter sw = new StreamWriter(new FileStream(filename, FileMode.Create));
            try
            {
                #region TechSOFT Banner
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("\t\t***********************************************");
                sw.WriteLine("\t\t*            ASTRA Pro Release 18.0           *");
                sw.WriteLine("\t\t*        TechSOFT Engineering Services        *");
                sw.WriteLine("\t\t*                                             *");
                sw.WriteLine("\t\t*       DESIGN OF RCC PILE FOUNDATION         *");
                sw.WriteLine("\t\t*                                             *");
                sw.WriteLine("\t\t***********************************************");
                sw.WriteLine("\t\t----------------------------------------------");
                sw.WriteLine("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
                sw.WriteLine("\t\t----------------------------------------------");

                #endregion


                //if (ColumnNo != "")
                //{
                //    sw.WriteLine(string.Format(""));
                //    sw.WriteLine(string.Format(""));
                //    sw.WriteLine(string.Format("--------------------------------------------------"));
                //    //sw.WriteLine(string.Format("STEP {0}.0 : PILE DESIGN MEMBER NO : {1}", step, ColumnNo));
                //    sw.WriteLine(string.Format("PILE DESIGN {0} : MEMBER NO : {1}", step, ColumnNo));
                //    sw.WriteLine(string.Format("--------------------------------------------------"));
                //    sw.WriteLine(string.Format(""));
                //    sw.WriteLine(string.Format(""));
                //    BOQ.ColumnNos = ColumnNo;
                //}

                #region USER DATA

                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("USER'S DATA");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("FOR DESIGN OF PILE");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                sw.WriteLine("Pile Diameter [D] = {0} m", D);

                BOQ.Pile_Dia = D;

                sw.WriteLine("Applied Load on Pile Group = {0} Ton", P);
                sw.WriteLine("Applied Moment on Pile Group  = {0} Ton-m", AM);
                sw.WriteLine("Coefficient of Active Earth Pressure [K] = {0}", K);


                double phi = pft_list[pft_list.Count - 1].Phi;

                if (pft_list.Count > 0)
                    Tables.Terzaghi_Bearing_Capacity_Factors(phi, ref Nc, ref Nq, ref N_gamma, ref ref_string);   //Chiranjit [2013 06 17;


                //sw.WriteLine("Nγ = {0}",  N_gamma );
                //sw.WriteLine("Nq = {0}",  Nq );
                //sw.WriteLine("Nc = {0}",  Nc );
                sw.WriteLine("Factor of Safety [FS] = {0}", FS);
                sw.WriteLine("Pile Cap Bottom Level [PCBL] = {0} m", PCBL);
                sw.WriteLine("Scour Level [SL) = {0} m", SL);
                sw.WriteLine("Founding Level [FL] = {0}", FL);
                sw.WriteLine("Concrete Grade [σ_ck] = M{0:f0}", sigma_ck);
                sw.WriteLine("Steel Grade [fy] = Fe{0:f0}", fy);
                sw.WriteLine("Unit Weight of Concrete [γ_c] = {0} Ton/cm", gamma_c);
                sw.WriteLine("Total Piles [Np] = {0}", Np);
                sw.WriteLine("Total Piles in front row [N] = {0}", N);
                //sw.WriteLine("γ_sub = {0} Ton/cu.m",  gamma_sub );

                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("FOR DESIGN OF PILE CAP");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                sw.WriteLine("Concrete Grade [σ_ck] = M {0:f0}", cap_sigma_ck);
                sw.WriteLine("Steel Grade [fy] = Fe {0:f0}", cap_fy);
                sw.WriteLine();
                sw.WriteLine("Allowable Stress in concrete");
                sw.WriteLine("in bending compression [σ_cbc] = {0} N/sq.mm = {1} kg/sq.cm", sigma_cbc, (sigma_cbc * 10));
                sw.WriteLine("Allowable stress in steel [σ_st] = {0} N/sq.mm = {1} kg/sq.cm", sigma_st, (sigma_st * 10));
                sw.WriteLine("Modular Ratio [m] = {0}", m);
                sw.WriteLine("Load Factor [F] = {0}", F);


                sw.WriteLine("Pile Main Steel Reinforcement bar Diameter [d1] = {0} mm", d1);
                sw.WriteLine("Pile Cap Main Reinforcement (Top & Bottom) Bar Diameter [d2] = {0} mm", d2);
                sw.WriteLine("Pile Cap Distribution Reinforcement (Top & Bottom) Bar Diameter [d3] = {0} mm", d3);
                sw.WriteLine();
                sw.WriteLine("Pile Cap Length [LPC] = {0} mm                  Marked as (LPC) in the Drawing", LPC);
                sw.WriteLine("Pile Cap Width [BPC] = {0} mm                   Marked as (BPC) in the Drawing", BPC);
                //sw.WriteLine("Pier Length [LPr] = {0} mm                      Marked as (LPr) in the Drawing", LPr);
                //sw.WriteLine("Pier Width [BPr] = {0} mm                       Marked as (BPr) in the Drawing", BPr);
                sw.WriteLine("Depth of Pile Cap [DPC] = {0} mm                Marked as (DPC) in the Drawing", DPC);
                sw.WriteLine("Distance   [L1] = {0} mm                        Marked as (L1) in the Drawing", l1);
                sw.WriteLine("Distance   [L2] = {0} mm                         Marked as (L2) in the Drawing", l2);
                sw.WriteLine("Distance   [L3] = {0} mm                        Marked as (L3) in the Drawing", l3);

                #endregion

                #region DESIGN CALCULATIONS
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("STEP 1 : DESIGN CALCULATIONS");
                sw.WriteLine("------------------------------------------------------------");
                #endregion

                #region STEP 1 : CAPACITY FROM SOIL STRUCTURE INTERACTION
                sw.WriteLine();
                //sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine("STEP {0}.1 : CAPACITY FROM SOIL STRUCTURE INTERACTION", step);
                sw.WriteLine("CAPACITY FROM SOIL STRUCTURE INTERACTION", step);
                sw.WriteLine("----------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                double L1 = PCBL - FL;
                L1 = double.Parse(L1.ToString("0.000"));
                sw.WriteLine("Pile Length = PL = PCBL - FL");
                sw.WriteLine("                 = {0:f3} - {1:f3}", PCBL, FL);
                sw.WriteLine("                 = {0:f3} m", L1);
                BOQ.Pile_Length = L1;

                double L2 = SL - FL;
                L2 = double.Parse(L2.ToString("0.000"));
                sw.WriteLine();
                sw.WriteLine("Embedded Length = EL = SL - FL");
                sw.WriteLine("                     = {0:f3} - {1:f3}", SL, FL);
                sw.WriteLine("                     = {0:f3} m", L2);
                sw.WriteLine();

                BOQ.Pile_Nos = Np;



                double Ap = Math.PI * D * D / 4.0;
                Ap = double.Parse(Ap.ToString("0.000"));
                sw.WriteLine("Cross Sectional Area of PIle = Ap = π*D*D/4");
                sw.WriteLine("                             = π*{0}*{0}/4", D);
                sw.WriteLine("                             = {0:f3} sq.m", Ap);
                sw.WriteLine();

                //BOQ.Pile_Area = Ap;

                #region (A) FOR COHESIONLESS COMPONENT OF SOIL
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("(A) FOR COHESIONLESS COMPONENT OF SOIL :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                #endregion

                #region SKIN FRICTION
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("SKIN FRICTION :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                #endregion

                //sw.WriteLine("Layers ,Thickness, Depth below, Surface, φ (deg), δ (deg), γ_sub, P_D, P_Di");
                //sw.WriteLine("Layers ,of Sub soil Layer, scour level(H), Area (As), φ (deg), δ (deg), γ_sub, Pd, Pdi");
                sw.WriteLine();
                sw.WriteLine("Borehole No. : {0}", BoreholeNo);
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                       "Layer",
                       "Depth upto",
                       "Thickness",
                       "Depth below",
                       "Surface",
                       "φ    ",
                       "δ    ",
                       "γ_sub",
                       "P_D   ",
                       "P_Di  ");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                       "Nos.",
                                       "bottom ",
                                       "of Sub ",
                                       "scour  ",
                                       "Area  ",
                                       "(deg)",
                                       "(deg)",
                                       "Ton /",
                                       "γ_sub*H",
                                       "Ton /");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                                      "",
                                                      "of Layer",
                                                      "soil Layer",
                                                      "level(H) ",
                                                      "(As)  ",
                                                      "",
                                                      "",
                                                      "cu.m",
                                                      "Ton /",
                                                      "sq.mm");
                sw.WriteLine("{0,-6} {1,10} {2,12} {3,12} {4,5} {5,7} {6,7} {7,7} {8,10} {9,7}",
                                                        "",
                                                        "(m)   ",
                                                        "(m)    ",
                                                        "(m)   ",
                                                        "",
                                                        "",
                                                        "",
                                                        "",
                                                        "sq.m",
                                                        "");
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                for (int i = 0; i < pft_list.Count; i++)
                {
                    sw.WriteLine("{0,-6:f0} {1,10:f3} {2,10:f3} {3,12:f3} {4,8:f2} {5,6:f1}° {6,6:f1}° {7,7:f3} {8,10:f3} {9,7:f3}",
                        pft_list[i].Layers,
                        pft_list[i].Depth,
                        pft_list[i].Thickness,
                        pft_list[i].H_DepthBelowScourLevel,
                        pft_list[i].SurfaceArea,
                        pft_list[i].Phi,
                        pft_list[i].Delta,
                        pft_list[i].GammaSub,
                        pft_list[i].P_D,
                        pft_list[i].P_Di);
                }
                sw.WriteLine("----------------------------------------------------------------------------------------------");

                sw.WriteLine();
                for (int i = 0; i < pft_list.Count; i++)
                {
                    if (i == 0)
                    {
                        sw.WriteLine("P_Di[1] = (0 + {0})/2 = {1} Ton/sq.m", pft_list[0].P_D, pft_list[0].P_Di);
                    }
                    else
                    {
                        //sw.WriteLine("P_Di1 = (0 + {0})/2 = {1} Ton/sq.m", pft_list[0].P_D, pft_list[0].P_Di);
                        sw.WriteLine("P_Di[{0}] = ({1} + {2})/2 = {3} Ton/sq.m",
                            (i + 1),
                            pft_list[i - 1].P_D,
                            pft_list[i].P_D,
                            pft_list[i].P_Di);

                    }
                }
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Ultimate Resistance by Skin Friction :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                double sk_frc, Rfs;
                sk_frc = 0;
                Rfs = 0;

                List<double> list_dbl = new List<double>();
                for (int i = 0; i < pft_list.Count; i++)
                {
                    sk_frc = pft_list[i].SurfaceArea * K * pft_list[i].P_Di * Math.Tan((Math.PI / 180.0) * pft_list[i].Delta);
                    sk_frc = double.Parse(sk_frc.ToString("0.000"));
                    Rfs += sk_frc;

                    list_dbl.Add(sk_frc);
                    //sw.WriteLine("For Layer {0} : As{1}* K * P_Di{1} * tan δ", pft_list[i].Layers, (i + 1));

                    sw.WriteLine("For Layer {0} : As[{1}]* K * P_Di[{1}] * tan δ",
                        pft_list[i].Layers,
                        (i + 1));
                    sw.WriteLine("            = {0} * {1} * {2} * tan {3}",
                         pft_list[i].SurfaceArea,
                         K,
                         pft_list[i].P_Di,
                         pft_list[i].Delta);
                    sw.WriteLine("            = {0} Ton", sk_frc);
                    sw.WriteLine();
                }


                sw.WriteLine("Total Ultimate Resistance due to Skin Friction = Rfs = {0} Ton", Rfs);

                for (int i = 0; i < pft_list.Count; i++)
                {
                }

                sw.WriteLine();

                #endregion

                #region END BEARING
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("END BEARING");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Ultimate Resistance by End Bearing :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine("Referring to Table No. 2, given at the end of this report,");
                sw.WriteLine();
                sw.WriteLine("For the value of φ = {0} deg, Nc = {1}, Nq = {2} and Nγ = Nr = {3}", phi, Nc, Nq, N_gamma);
                sw.WriteLine();
                sw.WriteLine();

                double R_us = Ap * ((1.0 / 2.0) * 0.92 * D * N_gamma);

                int cnt = pft_list.Count;

                if (cnt >= 1)
                {
                    R_us = Ap * ((1.0 / 2.0) * pft_list[cnt - 1].GammaSub * D * N_gamma + (pft_list[cnt - 1].P_D * Nq));

                    sw.WriteLine("R_us = Ap * ((1/2) * γ * D * Nγ + P_D[{0}] * Nq) ", cnt);
                    sw.WriteLine("     = {0:f3} * (0.5 * {1:f3} * {2} * {3:f3} + {4:f3} * {5:f3})) ",
                        Ap,
                        pft_list[cnt - 1].GammaSub,
                        D,
                        N_gamma,
                        pft_list[cnt - 1].P_D,
                        Nq);
                    sw.WriteLine();
                    sw.WriteLine("     = {0:f3} Ton", R_us);
                }
                sw.WriteLine();

                double total_resist = Rfs + R_us;
                sw.WriteLine("Total Ultimate Resistance of Pile = Rfs + R_us");
                sw.WriteLine("                                  = {0:f3} + {1:f3}", Rfs, R_us);
                sw.WriteLine("                                  = {0:f3} Ton", total_resist);
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("Factor of Safety = FS = {0}", FS);
                double Qus = total_resist / FS;

                sw.WriteLine();
                sw.WriteLine("Safe Load on Pile = {0:f3} / {1} = {2:f3} Ton", total_resist, FS, Qus);

                #endregion

                #region END BEARING
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("(B) FOR COHESIVE COMPONENT OF SOIL :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("-----------------------------------------------------------------------------");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "Layers",
                    "Layer",
                    "Depth",
                    "Surface",
                    "",
                    "",
                    "Ultimate");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "",
                    "Thickness",
                    "below Scour",
                    "Area  ",
                    "α  ",
                    "c  ",
                    "resistance");
                sw.WriteLine("{0,-6} {1,10} {2,14} {3,14} {4,7} {5,7} {6,7}",
                    "",
                    "[D](m)",
                    "Level[H](m)",
                    "[As](sq.m)",
                    "",
                    "",
                    "[As*α*c](Ton)");
                sw.WriteLine("-----------------------------------------------------------------------------");

                double Rfc = 0.0;

                for (int i = 0; i < pft_list.Count; i++)
                {
                    sk_frc = (pft_list[i].SurfaceArea * pft_list[i].Alpha * pft_list[i].Cohesion);
                    Rfc += sk_frc;
                    sw.WriteLine("{0,-6} {1,10:f3} {2,14:f3} {3,14:f3} {4,7:f3} {5,7:f3} {6,7:f3}",
                    pft_list[i].Layers,
                    pft_list[i].Thickness,
                    pft_list[i].H_DepthBelowScourLevel,
                    pft_list[i].SurfaceArea,
                    pft_list[i].Alpha,
                    pft_list[i].Cohesion,
                    sk_frc);
                }
                sw.WriteLine("-----------------------------------------------------------------------------");
                sw.WriteLine("{0,63} {1,7:f3} Ton",
                    "Total Ultimate Resistance = ",
                    Rfc);
                sw.WriteLine();
                //sw.WriteLine("Total Ultimate Resistance = {0:f3} Ton", Rfc);
                //sw.WriteLine();

                //Chiranjit [2013 06 17]

                sw.WriteLine("Referring to Table No. 2, given at the end of this report,");
                sw.WriteLine();
                sw.WriteLine("For the value of φ = {0} deg, Nc = {1}, Nq = {2} and Nr = {3}", phi, Nc, Nq, N_gamma);
                sw.WriteLine();

                double end_brng = Ap * pft_list[cnt - 1].Cohesion * Nc;
                sw.WriteLine("End Bearing = Ap * C[{0}] * Nc", cnt);
                sw.WriteLine("            = {0} * {1} * {2}", Ap, pft_list[cnt - 1].Cohesion, Nc);
                sw.WriteLine("            = {0:f3} ", end_brng);
                sw.WriteLine();

                double Qu = Rfc + end_brng;
                sw.WriteLine("Total Ultimate Resistance of Pile = Qu");
                sw.WriteLine("    Qu = {0:f3} + {1:f3} = {2:f3} Ton", Rfc, end_brng, Qu);
                sw.WriteLine();
                sw.WriteLine("Factor of Safety = FS = {0}", FS);
                sw.WriteLine();

                double Quc = Qu / FS;
                sw.WriteLine("Safe Load on Pile = {0:f3}/{1} = {2:f3} Ton", Qu, FS, Quc);
                sw.WriteLine();

                double perm_load = Qus + Quc;
                sw.WriteLine("Permissible safe Load on Pile = Qus + Quc");
                sw.WriteLine("                              = {0:f3} + {1:f3}", Qus, Quc);
                sw.WriteLine("                              = {0:f3} Ton", perm_load);
                sw.WriteLine();
                sw.WriteLine("Applied Load on Pile = P = {0} Ton", P);
                sw.WriteLine();



                double load_cap = (LPC * BPC * DPC / 10E8) * gamma_c;
                //sw.WriteLine("Applied Load on Pile Group         = P = 216.000 Ton");
                sw.WriteLine("");
                sw.WriteLine("Load by Pile Cap on Pile Group = LPC x BPC x DPC x γ_c ");
                sw.WriteLine("                               = {0:f3} x {1:f3} x {2:f3} x {3:f3}", (LPC / 1000.0), (BPC / 1000.0), (DPC / 1000.0), gamma_c);
                sw.WriteLine("                               = {0:f3} Ton", load_cap);
                sw.WriteLine("");
                double self_wt = Ap * L1 * (gamma_c - 1.0);

                sw.WriteLine("Self weight of each Pile = Ap * L1 * (γ_c - 1)");
                sw.WriteLine("                    = {0:f3} * {1} * ({2} - 1)", Ap, L1, gamma_c);
                sw.WriteLine("                    = {0:f3} Ton", self_wt);
                sw.WriteLine();
                //sw.WriteLine("Self weight of each Pile                 = Ap * L1 * (γ_c - 1)");
                //sw.WriteLine("                                    = 0.785 * 25 * (2.5 - 1)");
                //sw.WriteLine("                                    = 29.438 Ton");
                sw.WriteLine("");

                double total_load = (P + load_cap) / Np + self_wt;
                sw.WriteLine("Total Load on Pile  = Pu");
                sw.WriteLine("                    = (P + Load by Pile Cap on Pile Group)/ Total Piles [Np] + Self weight of Pile");
                sw.WriteLine("                    = ({0:f3} + {1:f3})/{2:f0} + {3:f3} ", P, load_cap, Np, self_wt);
                sw.WriteLine("                    = {0:f3} + {1:f3}", ((P + load_cap) / Np), self_wt);
                //sw.WriteLine("= 100.772 Ton < 449.824 Ton, Hence, Safe");
                sw.WriteLine("");

                double Pu = total_load;


                //double total_load = P + self_wt;
                if (total_load < perm_load)
                    sw.WriteLine("                    = {0:f3} Ton < {1:f3} Ton, Hence, Safe", total_load, perm_load);
                else
                {
                    IS_DESIGN_OK = false;
                    sw.WriteLine("                    = {0:f3} Ton > {1:f3} Ton, Hence, Unsafe, NOT OK", total_load, perm_load);
                }


                #endregion

                #region STEP 2 : STRUCTURAL DESIGN OF PILE
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine("STEP {0}.2 : STRUCTURAL DESIGN OF PILE", step);
                sw.WriteLine("STEP 2 : STRUCTURAL DESIGN OF PILE", step);
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();


                sw.WriteLine("Pile Dia = D = {0} m = {1} mm", D, (D * 1000));
                D = D * 1000;
                sw.WriteLine();
                double cover = 0.1 * D;
                frmPile_Graph fpg = new frmPile_Graph();

                sw.WriteLine("Cover = d' = 0.1 * D = 0.1 * {0} = {1} mm", D, cover);
                sw.WriteLine();
                sw.WriteLine("Cover / Pile Dia = d' / D = {0} / {1} = {2}", cover, D, (cover / D));
                fpg.txt_ddash.Text = (cover / D).ToString("0.00");
                sw.WriteLine();

                double val1 = Pu * 1000 * 10 / (sigma_ck * D * D);
                sw.WriteLine("Pu/(σ_ck*D*D) = {0}*1000*10/({1}*{2}*{2})", Pu, sigma_ck, D);
                sw.WriteLine("              = {0:f4}", val1);
                fpg.txt_Pu.Text = val1.ToString("0.0000");
                sw.WriteLine();

                val1 = (AM * 1000 * 10 * 1000) / (sigma_ck * D * D * D);
                sw.WriteLine("Mu/(σ_ck*D**3) = {0}/({1}*{2}^3)", AM, sigma_ck, D);
                sw.WriteLine("               = {0:f4}", val1);
                fpg.txt_Mu.Text = val1.ToString("0.0000");
                sw.WriteLine();
                fpg.txt_sigma_y.Text = fy.ToString();
                fpg.txt_sigma_ck.Text = sigma_ck.ToString();
                fpg.txt_obtaned_value.Text = "0.0";

                fpg.ShowDialog();
                val1 = MyList.StringToDouble(fpg.txt_obtaned_value.Text, 0.0);
                sw.WriteLine("From figure, we get p/σ_ck = {0}", val1);
                sw.WriteLine();
                if (val1 < 0.4)
                {
                    val1 = 0.4;
                }
                sw.WriteLine("In piles provide minimum {0}% Steel.", val1);
                sw.WriteLine();

                double area_mn_st = (val1 / 100) * (Math.PI / 4.0) * D * D;
                sw.WriteLine("Area of Main Steel Reinforcement = As");
                sw.WriteLine("   As = ({0}/100) * (π / 4) * D * D", val1);
                sw.WriteLine("      = ({0}/100) * (π / 4) * {1} * {1}", val1, D);
                sw.WriteLine("      = {0:f2} sq.mm", area_mn_st);
                sw.WriteLine();

                double ar_one_st_br = (Math.PI * d1 * d1) / 4.0;
                sw.WriteLine("Area of one Steel reinforcement bar = π * {0} * {0} / 4", d1);
                sw.WriteLine("                                    = {0:f2} sq.mm", ar_one_st_br);
                sw.WriteLine();

                double total_bar = (int)((area_mn_st / ar_one_st_br) + 1);


                Steel_Reinforcement ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[1]";
                ssr.Number_Of_Bars = (int)total_bar;
                ssr.Bar_Dia = d1;
                ssr.Length = BOQ.Pile_Length;
                BOQ.Steel_Reinforcement.Add(ssr);

                sw.WriteLine("Total number of bars = {0:f2} / {1:f2} = {2:f0}", area_mn_st, ar_one_st_br, total_bar);
                sw.WriteLine();

                bno_1 = total_bar;
                sw.WriteLine("Provide {0} numbers T{1} mm dia bars.", total_bar, d1);
                sw.WriteLine();
                sw.WriteLine("Use 8 mm diameter lateral MS bars as Ties / Binders");
                sw.WriteLine();
                sw.WriteLine("the pitch / spacing = r < 500 mm");
                sw.WriteLine("                        < 16*d1 = 16*{0} = {1} mm", d1, (16 * d1));

                val1 = (int)((16 * d1) / 100.0);
                val1 *= 100;

                double provide_spacing = val1;
                sw.WriteLine("                        < {0} mm", val1);
                sw.WriteLine();


                ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[2]";
                ssr.Number_Of_Bars = (int)(BOQ.Pile_Length * 1000 / provide_spacing);
                ssr.Bar_Dia = 8;
                ssr.Length = 2 * Math.PI * ((D - cover) / 1000.0);


                total_bar = (int)(1000 / provide_spacing);
                total_bar += 1.0;

                BOQ.Steel_Reinforcement.Add(ssr);

                bspc_2 = provide_spacing;
                sw.WriteLine("Provide {0} numbers T{1} mm dia bars with spacing of {2} mm c/c.",
                    total_bar, d4, provide_spacing);
                //(4)  Main Bars 10 Nos. Dia. 20 MM. in Piles
                _4 = string.Format("Main Bars {0} Nos. Dia. {1} mm. in Piles", ssr.Number_Of_Bars, ssr.Bar_Dia, provide_spacing);


                #endregion

                #region STEP 3 : STRUCTURAL DESIGN OF PILE

                BOQ.Pile_Cap_Length = LPC / 1000;
                BOQ.Pile_Cap_Width = BPC / 1000;
                BOQ.Pile_Cap_Thickness = DPC / 1000;


                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine("STEP {0}.3 : DESIGN OF PILE CAP :", step);
                sw.WriteLine("STEP 3 : DESIGN OF PILE CAP :", step);
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();

                double n = (m * sigma_cbc) / (sigma_st + (m * sigma_cbc));
                sw.WriteLine("Neutral Axis Factor = n = (m * σ_cbc) / (σ_st + (m * σ_cbc))");
                sw.WriteLine("         = ({0} * {1}) / ({2} + ({0} * {1}))", m, sigma_cbc, sigma_st);
                sw.WriteLine("         = {0:f3}", n);
                sw.WriteLine();

                double j = (1 - (n / 3));
                sw.WriteLine("Lever Arm Factor = j = 1 - (n/3) = 1 - ({0:f3}/3) = {1:f3}", n, j);
                sw.WriteLine();


                double Q = 0.5 * sigma_cbc * j * n;
                sw.WriteLine("Q = 0.5 * σ_cbc * j * n");
                sw.WriteLine("  = 0.5 * {0} * {1:f3} * {2:f3}", sigma_cbc, j, n);
                sw.WriteLine("  = {0:f3}", Q);
                sw.WriteLine();
                double P2 = N * Pu;
                sw.WriteLine("Sum of Forces on Piles in front row = P2 = N X Pu = {0} X {1} = {2} Ton", N, Pu, P2);
                //sw.WriteLine("  P2 = {0} + {1} = {2} Ton", N, P, P2);
                sw.WriteLine();

                double mom_pier = P2 * ((l1 / 1000.0) - (l2 / 1000.0));
                sw.WriteLine("Moment at the Face of Pier = P2 * ((L1 / 1000.0) - (L2 / 1000.0))");
                sw.WriteLine("                           = {0} * (({1} / 1000.0) - ({2} / 1000.0))", P2, l1, l2);
                sw.WriteLine("                           = {0:f2} Ton-m", mom_pier);
                sw.WriteLine();

                double P3 = (l1 / 1000.0) * (LPC / 1000.0) * (DPC / 1000.0) * gamma_c;
                sw.WriteLine("Relief due to self wt of Pile Cap = P3");
                sw.WriteLine(" = P3 = (L1 / 1000.0) * (LPC / 1000.0) * (DPC / 1000.0) * γ_c");
                sw.WriteLine(" = ({0} / 1000.0) * ({1} / 1000.0) * ({2} / 1000.0) * {3}", l1, LPC, DPC, gamma_c);
                sw.WriteLine(" = {0:f3} Ton", P3);
                sw.WriteLine();

                double mom_self_wt = P3 * (l1 / (1000.0 * 2));
                sw.WriteLine("Moment due to self wt of Pile Cap");
                sw.WriteLine("  = {0:f3} * (L1 / (1000.0 * 2))", P3);
                sw.WriteLine("  = {0:f3} * ({1} / (1000.0 * 2))", P3, l1);
                sw.WriteLine("  = {0:f3} Ton-m", mom_self_wt);
                sw.WriteLine();

                double total_mom = mom_pier - mom_self_wt;
                sw.WriteLine("Total Moment at the Face of Pier = {0:f3} - {1:f3} = {2:f3} Ton-m", mom_pier, mom_self_wt, total_mom);

                sw.WriteLine();


                double M = total_mom / (LPC / 1000.0);
                sw.WriteLine("Moment per Linear metre = {0:f3} / (LPC/1000)", total_mom);
                sw.WriteLine("                        = {0:f3} / ({1}/1000)", total_mom, LPC);
                sw.WriteLine("                        = {0:f2} Ton-m/m", M);
                sw.WriteLine();


                double req_dep = (M * 10E4) / (Q * 100);
                req_dep = Math.Sqrt(req_dep);

                sw.WriteLine("Depth required = √(({0:f2}*10^5)/(Q*100))", M);
                sw.WriteLine("               = √(({0:f2}*10^5)/({1:f2}*100))", M, Q);
                sw.WriteLine("               = {0:f2} cm = {1:f2} mm", req_dep, (req_dep * 10));

                req_dep = req_dep * 10;
                sw.WriteLine();
                sw.WriteLine("Overall Depth Provided = {0} mm", DPC);
                sw.WriteLine();
                sw.WriteLine("Clear Cover = 175 mm");
                sw.WriteLine();
                double half_bar_dia = d2 / 2.0;
                sw.WriteLine("Half Bar diameter of Steel Reinforcements = {0} m", half_bar_dia);
                sw.WriteLine();

                double eff_dep = DPC - 175 - half_bar_dia;
                sw.WriteLine("Effective Depth Provided = {0} - 175 - {1}", DPC, half_bar_dia);
                if (eff_dep > req_dep)
                {
                    sw.WriteLine("                         = {0:f3} mm > {1:f2} mm, Hence OK", eff_dep, req_dep);
                }
                else
                {
                    IS_DESIGN_OK = false;
                    sw.WriteLine("                         = {0:f3} mm < {1:f3} mm, Hence NOT OK", eff_dep, req_dep);
                }
                double deff = eff_dep / 10;
                sw.WriteLine();
                sw.WriteLine("deff = {0} mm = {1} cm", eff_dep, deff);
                sw.WriteLine();

                double req_st_renf = (M * 10E4) / (j * sigma_st * deff * 1);
                sw.WriteLine("Required Steel Reinforcement = M * 10^5/(j*σ_st*deff*1)");
                sw.WriteLine("                             = {0:f3} * 10^5/({1:f3}*{2}*{3}*1)", M, j, sigma_st, deff);
                sw.WriteLine("                             = {0:f3} sq.cm/m", req_st_renf);
                sw.WriteLine();

                double req_min_tension = (0.2 / 100) * deff;
                sw.WriteLine("Required minimum Steel for tension = 0.2%");
                sw.WriteLine("                                   = (0.2/100) * {0}", deff);
                sw.WriteLine("                                   = {0:f3} sq.cm/m", req_min_tension);
                sw.WriteLine();



                bspa_3 = 150.0;
                ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[3]";
                ssr.Number_Of_Bars = ((int)(1000.0 / 150.0) + 1);
                ssr.Bar_Dia = d2;
                ssr.Length = BOQ.Pile_Cap_Length;
                BOQ.Steel_Reinforcement.Add(ssr);

                sw.WriteLine("Provide Steel Reinforcements {0} Diameter bars @150 mm c/c spacing.", d2);
                //(2)  Main Bottom Bars Dia. 25 @ 150 c/c
                _2 = string.Format("Main Bottom Bars Dia. {0} @ 150 c/c", d2);


                sw.WriteLine();
                double pro_area_st = (Math.PI * d2 * d2 / 4.0) * (1000.0 / 150.0);

                pro_area_st = pro_area_st / 100;

                if (pro_area_st > req_min_tension)
                {
                    sw.WriteLine("Area of Steel Provided at the bottom of the Pile Cap");
                    sw.WriteLine("in Longitudinal direction = {0:f3} sq.cm/m > {1:f3} sq.cm/m, Hence OK",
                        pro_area_st, req_min_tension);
                }
                else
                {
                    IS_DESIGN_OK = false;
                    sw.WriteLine("Area of Steel Provided at the bottom of the Pile Cap");
                    sw.WriteLine("in Longitudinal direction = {0:f3} sq.cm/m < {1:f3} sq.cm/m, Hence NOT OK",
                        pro_area_st, req_min_tension);
                }
                sw.WriteLine();

                double nom_steel = (0.06 / 100) * deff;
                sw.WriteLine("Steel Provided in Longitudinal derection at the top of ");
                sw.WriteLine("Pile Cap = Nominal Steel = 0.06% of Area");
                sw.WriteLine("         = (0.06/100) * deff");
                sw.WriteLine("         = (0.06/100) * {0}", deff);
                sw.WriteLine("         = {0:f3} sq.cm/m", nom_steel);
                sw.WriteLine();

                ssr = new Steel_Reinforcement();
                ssr.BarMark = "P_AST[3]";
                ssr.Number_Of_Bars = ((int)(1000.0 / 150.0) + 1);
                ssr.Bar_Dia = d3;
                ssr.Length = BOQ.Pile_Cap_Length;
                BOQ.Steel_Reinforcement.Add(ssr);

                bspa_4 = 150;


                sw.WriteLine("Provided {0} mm dia bars at 150 mm c/c spacing.", d3);
                //(1)  Main Top Bars Dia. 16 @ 150 c/c
                _1 = string.Format("Main Top Bars Dia. {0} @ 150 c/c", d3);

                sw.WriteLine();

                double area_top = (Math.PI * d3 * d3 / 4.0) * (1000.0 / 150.0);
                sw.WriteLine("Area of Steel Provided = (π*{0}*{0}/4)*(1000/150)", d3);
                sw.WriteLine("                       = {0:f2} sq.mm/m", area_top);
                area_top = area_top / 100;
                sw.WriteLine("                       = {0:f2} sq.cm/m", area_top);

                sw.WriteLine();
                bspa_4 = 150;

                sw.WriteLine("Distribution Steel provided at top and bottom of Pile Cap");
                sw.WriteLine(" {0} mm dia bars at 150 mm c/c spacing", d3);
                sw.WriteLine();
                area_top = (Math.PI * d3 * d3 / 4.0) * (1000.0 / 150.0);
                sw.WriteLine("Area of Steel Provided = (π*{0}*{0}/4)*(1000/150)", d3);
                sw.WriteLine("                       = {0:f2} sq.mm/m", area_top);
                area_top = area_top / 100;
                sw.WriteLine("                       = {0:f2} sq.cm/m", area_top);
                sw.WriteLine();
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("Shear Reinforcement :");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine();

                deff = deff / 100;
                sw.WriteLine("Critical section at deff = {0} m from face of Pier", deff);
                sw.WriteLine();
                //sw.WriteLine("Factor for Distribution of Load = 0.1375");
                sw.WriteLine();

                //double P4 = P2 * 0.1375;
                double P4 = P2;

                //sw.WriteLine("Reaction on Piles in Front row  = P4 = {0} * 0.1375 = {1:f2} Ton", P2, P4);
                sw.WriteLine("Reaction on Piles in Front row  = P2 = {0:f2} Ton", P4);
                sw.WriteLine();

                //val1 = (((LPC - (l1 - deff)) / 1000.0) * DPC * gamma_c);
                deff = deff * 1000;
                val1 = (LPC / 1000.0) * ((l1 / 1000.0) - (deff / 1000.0)) * (DPC / 1000.0) * gamma_c;
                double tau_v = (P4 - val1) / (deff);

                //double _tau_v = P4 * 10 * (LPC / 1000.0) * ((l1 / 1000.0) - (deff / 1000.0));
                double _tau_v = P4 * 10 * LPC * (l1 - deff);

                tau_v = (_tau_v) / (LPC * deff * 1000);
                tau_v = double.Parse(tau_v.ToString("0.000"));

                sw.WriteLine("Nominnal Shear stress = τ_v");
                sw.WriteLine();
                //sw.WriteLine("τ_v = ((P4 - (LPC * ((LPC - (l1 - deff)) / 1000.0) * DPC * γ_c)) / (deff * 1000.0))");
                //sw.WriteLine("    = (({0:f2} - ({1} * (({1} - ({2} - {3})) / 1000.0) * {4} * {5})) / ({3} * 1000.0))",
                //    P4, LPC, l1, deff, DPC, gamma_c);


                sw.WriteLine("τ_v = (P2*10*LPC*(l1 - deff)) / (LPC * deff * 1000)");
                sw.WriteLine("    = ({0}*10*{1}*({2} - {3})) / ({1} * {3} * 1000)", P4, LPC, l1, deff);
                //sw.WriteLine();
                sw.WriteLine("    = {0:f4} N/sq.mm", tau_v);
                sw.WriteLine();

                deff = deff / 10;
                double percent = (100 * pro_area_st) / (100.0 * deff);
                percent = double.Parse(percent.ToString("0.000"));
                sw.WriteLine("Percent of bottom main reinforcement");
                sw.WriteLine(" p = (100 * {0:f3}) / (100.0 * {1})", pro_area_st, deff);
                sw.WriteLine("   = {0:f3}", percent);
                sw.WriteLine();

                double tau_c = Get_Table_1_Value(percent, cap_sigma_ck, ref ref_string);
                sw.WriteLine("Permissible Shear Stress for p = {0} and for M{1:f0} Concrete", percent, cap_sigma_ck);
                sw.WriteLine("from Table 1 (given at the end of the report). {0}", ref_string);
                sw.WriteLine();
                if (tau_c > tau_v)
                {
                    sw.WriteLine("τ_c = {0:f2} N/sq.mm > τ_v", tau_c);

                    sw.WriteLine();

                    sw.WriteLine("So, no shear Reinforcement is required and provide");
                    sw.WriteLine("provide minimum shear reinforcement.");
                    sw.WriteLine();
                    double min_shr_renf = 0.0011 * 100 * 250;
                    sw.WriteLine("Minimum Shear Reinforcement = 0.0011 * b * S");
                    sw.WriteLine("                            = 0.0011 * 100 * 250");
                    sw.WriteLine("                            = 27.50 sq.cm/m");
                    sw.WriteLine();
                    sw.WriteLine("Provide 8 mm diameter 42 legged at 200 mm c/c spacing");
                    sw.WriteLine();

                    ssr = new Steel_Reinforcement();
                    ssr.BarMark = "P_AST[4]";
                    ssr.Number_Of_Bars = ((int)(1000.0 / 200));
                    ssr.Bar_Dia = 8;
                    ssr.Length = BOQ.Pile_Cap_Length;
                    BOQ.Steel_Reinforcement.Add(ssr);

                    bspa_5 = 200;

                    pro_area_st = (Math.PI * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0);
                    sw.WriteLine();
                    sw.WriteLine("Area of Steel Provided = (π * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0)");
                    sw.WriteLine("                       = {0:f2} sq.mm/m", pro_area_st);

                    pro_area_st = pro_area_st / 100.0;
                    sw.WriteLine("                       = {0:f2} sq.cm/m", pro_area_st);
                }
                else
                {
                    sw.WriteLine("τ_c = {0:f2} N/sq.mm < (τ_v) {1:f2} N/sq.mm ", tau_c, tau_v);
                    sw.WriteLine();

                    double bal_sh_strs = tau_v - tau_c;
                    bal_sh_strs = double.Parse(bal_sh_strs.ToString("0.000"));
                    sw.WriteLine("Balance Shear Stress");
                    sw.WriteLine();
                    sw.WriteLine("τ_v - τ_c = {0} - {1} = {2} N/sq.mm", tau_v, tau_c, bal_sh_strs);
                    sw.WriteLine();

                    double bal_shr_frc = bal_sh_strs * l1 * deff / 1000.0;
                    bal_shr_frc = double.Parse(bal_shr_frc.ToString("0"));
                    sw.WriteLine("Balance Shear Force");
                    sw.WriteLine();
                    sw.WriteLine(" = ({0} * {1} * {2}) / 1000", bal_sh_strs, l1, deff);
                    sw.WriteLine(" = {0} kN", bal_shr_frc);
                    sw.WriteLine();
                    sw.WriteLine("Using 10 mm bars @200 mm c/c ");
                    //(3)  Shear Reinf. Bars Dia. 10, 42 Legged, Spacing 200 
                    _3 = string.Format("Shear Reinf. Bars Dia. 10, 42 Legged, Spacing 200");

                    sw.WriteLine();

                    double Ast = (bal_shr_frc * 200.0 * 1000.0) / (200.0 * deff);
                    Ast = double.Parse(Ast.ToString("0"));
                    sw.WriteLine("Required Shear Reinforcement Steel");
                    sw.WriteLine("Ast = ({0} * 200.0 * 1000.0) / (200.0 * {1})", bal_shr_frc, deff);
                    sw.WriteLine("    = {0} sq.mm", Ast);
                    sw.WriteLine("    = {0} sq.cm", (Ast / 100.0));
                    sw.WriteLine();
                    double min_shr_renf = 0.0011 * 100 * 250;
                    sw.WriteLine("Minimum Shear Reinforcement = 0.0011 * b * S");
                    sw.WriteLine("                            = 0.0011 * 100 * 250");
                    sw.WriteLine("                            = 27.50 sq.cm/m");
                    sw.WriteLine();
                    if (Ast < min_shr_renf)
                    {
                        sw.WriteLine();
                        sw.WriteLine("Provide 8 mm diameter 42 legged at 200 mm c/c spacing");
                        sw.WriteLine();

                        pro_area_st = (Math.PI * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0);
                        sw.WriteLine();
                        sw.WriteLine("Area of Steel Provided = (π * 8 * 8 / 4.0) * 42.0 * (1000.0 / 200.0)");
                        sw.WriteLine("                       = {0:f2} sq.mm/m", pro_area_st);

                        pro_area_st = pro_area_st / 100.0;
                        sw.WriteLine("                       = {0:f2} sq.cm/m", pro_area_st);
                    }

                    bspa_5 = 200;
                    ssr = new Steel_Reinforcement();
                    ssr.BarMark = "P_AST[4]";
                    ssr.Number_Of_Bars = ((int)(1000.0 / 200));
                    ssr.Bar_Dia = 8;
                    ssr.Length = BOQ.Pile_Cap_Length;
                    BOQ.Steel_Reinforcement.Add(ssr);

                    //sw.WriteLine("τ_c = {0} N/sq.mm < τ_v", tau_c);
                    //sw.WriteLine();
                    //sw.WriteLine("Provide Shear reinforcement for balance of");
                    //sw.WriteLine("Shear Stress (τ_v - τ_c) N/sq.mm");
                    sw.WriteLine();
                }
                #endregion

                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("");
                #region
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("STEP 4: DESIGN SUMMARY");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("");


                PL = L1;
                Design_Summary.Add(string.Format("Pile Size and Reinforcements"));
                Design_Summary.Add(string.Format("----------------------------"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Pile Diameter = {0} mm.", D));
                Design_Summary.Add(string.Format("Reinforcement Clear Cover = {0} mm.", cover));
                Design_Summary.Add(string.Format("Pile Length = {0} m.", PL));
                Design_Summary.Add(string.Format("Total Piles = {0} Nos.", Np));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format(""));

                // bspa_3 = 150;
                // bspa_4 = 150;
                // bspa_5 = 150;
                // bno_1 = 10;

                Design_Summary.Add(string.Format("Main Vertical Reinforcements"));
                Design_Summary.Add(string.Format("Provide {0} numbers T{1} mm dia bars, ", bno_1, d1));
                Design_Summary.Add(string.Format("Bar Mark in Drawing P_Ast [1]"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Lateral MS Bars as Ties / Binders"));

                //bspc_2 = 300;
                //d4 = 8;

                Design_Summary.Add(string.Format("Provide {0} mm diameter lateral MS bars as Ties / Binders, @ {1} mm c/c.", d4, bspc_2));
                Design_Summary.Add(string.Format("Bar Mark in Drawing P_Ast [2]"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Pile Cap Size and Reinforcements"));
                Design_Summary.Add(string.Format("--------------------------------"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Pile Cap Length        = {0,6} mm          Marked as (LPC) in the Drawing", LPC));
                Design_Summary.Add(string.Format("Pile Cap Width         = {0,6} mm          Marked as (BPC) in the Drawing", BPC));
                Design_Summary.Add(string.Format("Thickness of Pile Cap  = {0,6} mm          Marked as (DPC) in the Drawing", DPC));
                Design_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L1) in the Drawing", l1));
                Design_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L2) in the Drawing", l2));
                Design_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L3) in the Drawing", l3));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format(""));

                Design_Summary.Add(string.Format("Main Longitudinal Steel Reinforcements, at Top & Bottom"));
                Design_Summary.Add(string.Format("Provide {0} mm Diameter bars @ {1} mm c/c spacing", d2, bspa_3));
                Design_Summary.Add(string.Format("Bar Mark in Drawing P_Ast[3]"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Transverse Distribution Steel Reinforcements, at Top & Bottom"));
                Design_Summary.Add(string.Format("Provide {0} mm Diameter bars @ {1} mm c/c spacing", d3, bspa_4));
                Design_Summary.Add(string.Format("Bar Mark in Drawing P_Ast[4]"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format("Vertical Shear Reinforcements"));
                Design_Summary.Add(string.Format("Provide {0} mm diameter 42 legged at {1} mm c/c spacing", d4, bspa_5));
                Design_Summary.Add(string.Format("Bar Mark in Drawing P_Ast[5]"));
                Design_Summary.Add(string.Format(""));
                Design_Summary.Add(string.Format(""));

                foreach (var item in Design_Summary)
                {
                    sw.WriteLine(item);
                }

                #endregion
                //sw.WriteLine();
                //sw.WriteLine("------------------------------------------------------------");
                ////sw.WriteLine("STEP {0}.4 : BILL OF QUANTITY ", step);
                //sw.WriteLine("STEP 5 : BILL OF QUANTITY ", step);
                //sw.WriteLine("------------------------------------------------------------");
                //sw.WriteLine();
                //foreach (var item in BOQ.Get_Text())
                //{
                //    sw.WriteLine(item);

                //}


                #region BOQ SUMMARY
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("STEP 5: BILL OF QUANTITY");
                sw.WriteLine("------------------------------------------------------------");
                sw.WriteLine("");

                BOQ_Summary = new List<string>();
                PL = L1;

                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Pile Size and Reinforcements"));
                BOQ_Summary.Add(string.Format("----------------------------"));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Pile Diameter = {0} m.", D / 1000));
                BOQ_Summary.Add(string.Format("Reinforcement Clear Cover = {0} m.", cover / 1000));
                BOQ_Summary.Add(string.Format("Pile Length = {0} m.", PL));
                BOQ_Summary.Add(string.Format("Total Piles = {0} Nos.", Np));
                BOQ_Summary.Add(string.Format(""));



                BOQ_Summary.Add(string.Format(""));

                double conc_qty = Np * Math.PI * Math.Pow(D / 1000, 2) / 4.0 * PL;
                //BOQ_Summary.Add(string.Format("Concrete Quantity = Nos x 3.1416 x (D)^2 / 4 x PL"));
                BOQ_Summary.Add(string.Format("Concrete Quantity = {0} x 3.1416 x ({1:f3})^2 / 4 x {2:f3}  = {3:f3} Cu.m", Np, (D / 1000), PL, conc_qty));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("--------------------------------------"));
                BOQ_Summary.Add(string.Format("REBARS QUANTITY"));
                BOQ_Summary.Add(string.Format("--------------------------------------"));
                BOQ_Summary.Add(string.Format(""));

                // bspa_3 = 150;
                // bspa_4 = 150;
                // bspa_5 = 150;
                // bno_1 = 10;

                BOQ_Summary.Add(string.Format("Main Vertical Reinforcements"));


                double tot_weight = bno_1 * PL * Tables.Rebars.Get_Rebar_Weight(d1);
                BOQ_Summary.Add(string.Format("Provide {0} numbers T{1} mm dia bars, ", bno_1, d1));
                BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
                    bno_1, PL, Tables.Rebars.Get_Rebar_Weight(d1), tot_weight));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Lateral MS Bars as Ties / Binders"));

                //bspc_2 = 300;
                //d4 = 8;

                BOQ_Summary.Add(string.Format("Provide {0} mm diameter lateral MS bars as Ties / Binders, @ {1} mm c/c.", d4, bspc_2));
                //BOQ_Summary.Add(string.Format("Bar Mark in Drawing P_Ast [2]"));

                //bno_1 = (int)((2 * Math.PI * (D / 2)) / bspc_2);
                bno_1 = (int)(PL * 1000 / bspc_2);



                tot_weight = bno_1 * (2 * Math.PI * (D / 2)) / 1000.0 * Tables.Rebars.Get_Rebar_Weight(d4);

                BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
            bno_1, (2 * Math.PI * (D / 2)) / 1000.0, Tables.Rebars.Get_Rebar_Weight(d4), tot_weight));
                BOQ_Summary.Add(string.Format(""));


                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Pile Cap Size and Reinforcements"));
                BOQ_Summary.Add(string.Format("--------------------------------"));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Pile Cap Length        = {0:f3} m", LPC / 1000));
                BOQ_Summary.Add(string.Format("Pile Cap Width         = {0:f3} m", BPC / 1000));
                BOQ_Summary.Add(string.Format("Thickness of Pile Cap  = {0:f3} m", DPC / 1000));
                //BOQ_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L1) in the Drawing", l1));
                //BOQ_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L2) in the Drawing", l2));
                //BOQ_Summary.Add(string.Format("Distance               = {0,6} mm          Marked as (L3) in the Drawing", l3));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));

                conc_qty = (LPC / 1000) * (BPC / 1000) * (DPC / 1000);

                BOQ_Summary.Add(string.Format("Concrete Quantity = {0:f3} x {1:f3} x {2:f3} = {3:f3} Cu.m",
                    (LPC / 1000), (BPC / 1000), (DPC / 1000), conc_qty));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("--------------------------------------"));
                BOQ_Summary.Add(string.Format("REBARS QUANTITY"));
                BOQ_Summary.Add(string.Format("--------------------------------------"));
                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format(""));

                BOQ_Summary.Add(string.Format("Main Longitudinal Steel Reinforcements, at Top & Bottom"));
                BOQ_Summary.Add(string.Format("Provide {0} mm Diameter bars @ {1} mm c/c spacing", d2, bspa_3));

                tot_weight = (BPC / bspa_3) * (LPC / 1000) * Tables.Rebars.Get_Rebar_Weight(d2);

                BOQ_Summary.Add(string.Format("Total Weight = {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton",
                           (BPC / bspa_3), (LPC / 1000), Tables.Rebars.Get_Rebar_Weight(d2), tot_weight));
                BOQ_Summary.Add(string.Format(""));

                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Transverse Distribution Steel Reinforcements, at Top & Bottom"));
                BOQ_Summary.Add(string.Format("Provide {0} mm Diameter bars @ {1} mm c/c spacing", d3, bspa_4));

                tot_weight = (LPC / bspa_4) * (BPC / 1000) * Tables.Rebars.Get_Rebar_Weight(d3);

                BOQ_Summary.Add(string.Format("Total Weight = {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton",
                           (LPC / bspa_4), (BPC / 1000), Tables.Rebars.Get_Rebar_Weight(d3), tot_weight));
                BOQ_Summary.Add(string.Format(""));



                BOQ_Summary.Add(string.Format(""));
                BOQ_Summary.Add(string.Format("Vertical Shear Reinforcements"));
                BOQ_Summary.Add(string.Format("Provide {0} mm diameter 42 legged at {1} mm c/c spacing", d4, bspa_5));

                //tot_weight = (2 * (LPC + BPC) - 4 * cover) / 1000 ;
                tot_weight = 42 * (DPC / bspa_5) * ((2 * (LPC + DPC) - 4 * cover) / 1000) * Tables.Rebars.Get_Rebar_Weight(d4);

                BOQ_Summary.Add(string.Format("Total Weight = 42 x {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton",
                           (DPC / bspa_5), ((2 * (LPC + DPC) - 4 * cover) / 1000),
                           Tables.Rebars.Get_Rebar_Weight(d4), tot_weight));
                BOQ_Summary.Add(string.Format(""));


                foreach (var item in BOQ_Summary)
                {
                    sw.WriteLine(item);
                }

                #endregion


                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine();
                Write_Table_1(sw);
                #region END OF REPORT
                sw.WriteLine();
                sw.WriteLine();
                sw.WriteLine("---------------------------------------------------------------------------");
                sw.WriteLine("---------------------       END OF DESIGN        --------------------------");
                sw.WriteLine("---------------------------------------------------------------------------");
                sw.WriteLine();
                sw.WriteLine();
                //sw.WriteLine("---------------------------------------------------------------------------");
                //sw.WriteLine("---------            Thank you for using ASTRA Pro          ---------------");
                //sw.WriteLine("---------------------------------------------------------------------------");

                #endregion
            }
            catch (Exception ex) { }
            finally
            {
                sw.Flush();
                sw.Close();
            }

            if (Report_File != "")
            {
                File.WriteAllLines(Get_BOQ_File(step), BOQ_Summary.ToArray());
                File.WriteAllLines(Get_Design_Summary_File(step), Design_Summary.ToArray());
                //return new List<string>(File.ReadAllLines(Get_Report_File(step)));
            }
            

            //if (Report_File != "")
            //return new List<string>(File.ReadAllLines(Report_File));
        }

        public void Write_Drawing_File()
        {
            //StreamWriter sw = new StreamWriter(new FileStream(user_drawing_file, FileMode.Create));
            //try
            //{
            //    //Length of Pile Cap = LPC = 8800 mm.
            //    //Width of Pile Cap = BPC = 4300 mm.
            //    //Thickness of Pile Cap = DPC = 1500 mm.
            //    //Length of Pier = LPr = 6100 mm.
            //    //Width of Pier = BPr = 1100 mm.
            //    //Diameter of Pile = D = 1000 mm.
            //    //Distance = l1 = 1600 mm.
            //    //Distance = l2 = 650 mm.
            //    //Distance = l3 = 1500 mm.

            //    //(1)  Main Top Bars Dia. 16 @ 150 c/c
            //    //(2)  Main Bottom Bars Dia. 25 @ 150 c/c
            //    //(3)  Shear Reinf. Bars Dia. 10, 42 Legged, Spacing 200 
            //    //(4)  Main Bars 10 Nos. Dia. 20 MM. in Piles


            //    sw.WriteLine("_LPC=Length of Pile Cap = LPC = {0} mm.", LPC);
            //    sw.WriteLine("_BPC=Width of Pile Cap = BPC = {0} mm.", BPC);
            //    sw.WriteLine("_DPC=Thickness of Pile Cap = DPC = {0} mm.", DPC);
            //    sw.WriteLine("_LPr=Length of Pier = LPr = {0} mm.", LPr);
            //    sw.WriteLine("_BPr=Width of Pier = BPr = {0} mm.", BPr);
            //    sw.WriteLine("_D=Diameter of Pile = D = {0} mm.", D * 1000);
            //    sw.WriteLine("_l1=Distance = l1 = {0} mm.", l1);
            //    sw.WriteLine("_l2=Distance = l2 = {0} mm.", l2);
            //    sw.WriteLine("_l3=Distance = l3 = {0} mm.", l3);
            //    sw.WriteLine("_1={0}", _1);
            //    sw.WriteLine("_2={0}", _2);
            //    sw.WriteLine("_3={0}", _3);
            //    sw.WriteLine("_4={0}", _4);
            //}
            //catch (Exception ex) { }
            //finally
            //{
            //    sw.Flush();
            //    sw.Close();
            //}
        }
        #endregion

        public double Get_Table_1_Value(double percent, double con_grade, ref string ref_string)
        {
            return Tables.Permissible_Shear_Stress(percent, (int)con_grade, ref  ref_string);
        }
        public void Write_Table_1(StreamWriter sw)
        {

            List<string> lst_content = Tables.Get_Tables_Permissible_Shear_Stress();

            sw.WriteLine("------------------------------------------------------------");
            sw.WriteLine("TABLE 1 : PERMISSIBLE SHEAR STRESS");
            sw.WriteLine("------------------------------------------------------------");
            for (int i = 0; i < lst_content.Count; i++)
            {
                sw.WriteLine(lst_content[i]);
            }
            sw.WriteLine();
            sw.WriteLine();
            sw.WriteLine();
            lst_content.Clear();

            lst_content = Tables.Get_Tables_Terzaghi_Bearing_Capacity_Factors();
            sw.WriteLine("------------------------------------------------------------");
            sw.WriteLine("TABLE 2 : Terzaghi's Bearing Capacity");
            sw.WriteLine("------------------------------------------------------------");
            for (int i = 0; i < lst_content.Count; i++)
            {
                sw.WriteLine(lst_content[i]);
            }
            lst_content.Clear();
        }

        public string Get_Report_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "DESIGN_P" + step.ToString("000") + ".TXT");
            return tmp_file;
        }
        public string Get_BOQ_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            tmp_file = Path.Combine(tmp_file, "BOQ");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "BOQ_F" + step.ToString("000") + ".TXT");
            return tmp_file;
        }


        public string Get_Design_Summary_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);

            tmp_file = Path.Combine(tmp_file, "DESIGN SUMMARY");
            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            //tmp_file = Path.Combine(tmp_file, "B" + step + ".tmp");
            tmp_file = Path.Combine(tmp_file, "DESIGN_SUMMARY_F" + step.ToString("000") + ".TXT");
            return tmp_file;
        }

    }
    public class PileFoundationTable
    {
        int sl_n, layers;
        double thickness, phi, alpha, cohesion, H, thick_sub_soil_layer, surface_area, delta, gamma_sub, p_d, p_di;

        public double Depth { get; set; }//Chiranjit
        public PileFoundationTable()
        {
            sl_n = -1;
            thickness = 0.0d;
            phi = 0.0d;
            alpha = 0.0d;
            cohesion = 0.0d;
            H = 0.0d;
            thick_sub_soil_layer = 0.0d;
            surface_area = 0.0d;
            delta = 0.0d;
            gamma_sub = 0.0d;
            p_d = 0.0d;
            p_di = 0.0d;

            Depth = 0.0;
        }
        public int SL_No
        {
            get
            {
                return sl_n;
            }
            set
            {
                sl_n = value;
            }
        }
        public int Layers
        {
            get
            {
                return layers;
            }
            set
            {
                layers = value;
            }
        }
        public double Thickness
        {
            get
            {
                return thickness;
            }
            set
            {
                thickness = double.Parse(value.ToString("0.000"));
            }
        }
        public double Phi
        {
            get
            {
                return phi;
            }
            set
            {
                phi = double.Parse(value.ToString("0.000"));
            }
        }
        public double Alpha
        {
            get
            {
                return alpha;
            }
            set
            {
                alpha = double.Parse(value.ToString("0.000"));
            }
        }
        public double Cohesion
        {
            get
            {
                return cohesion;
            }
            set
            {
                cohesion = double.Parse(value.ToString("0.000"));
            }
        }
        public double H_DepthBelowScourLevel
        {
            get
            {
                return H;
            }
            set
            {
                H = double.Parse(value.ToString("0.000"));
            }
        }
        public double ThicknessSubSoil
        {
            get
            {
                return thick_sub_soil_layer;
            }
            set
            {
                thick_sub_soil_layer = double.Parse(value.ToString("0.000"));
            }
        }
        public double SurfaceArea
        {
            get
            {
                return surface_area;
            }
            set
            {
                surface_area = double.Parse(value.ToString("0.000"));
            }
        }
        public double Delta
        {
            get
            {
                return delta;
            }
            set
            {
                delta = double.Parse(value.ToString("0.000"));
            }
        }
        public double GammaSub
        {
            get
            {
                return gamma_sub;
            }
            set
            {
                gamma_sub = double.Parse(value.ToString("0.000"));
            }
        }
        public double P_D
        {
            get
            {
                return p_d;
            }
            set
            {
                p_d = double.Parse(value.ToString("0.000"));
            }
        }
        public double P_Di
        {
            get
            {
                return p_di;
            }
            set
            {
                p_di = double.Parse(value.ToString("0.000"));
            }
        }
        public override string ToString()
        {
            return string.Format("{0} {1} {2} {3} {4} {5}", Layers, Thickness, Phi, Alpha, Cohesion, GammaSub);
        }
        public static PileFoundationTable Parse(string str)
        {
            string temp = str;

            temp = MyList.RemoveAllSpaces(temp);
            MyList mList = new MyList(temp, ' ');

            PileFoundationTable pft = new PileFoundationTable();
            if (mList.Count == 7)
            {
                pft.Layers = mList.GetInt(0);
                pft.Delta = mList.GetDouble(1);
                pft.Thickness = mList.GetDouble(2);
                pft.Phi = mList.GetDouble(3);
                pft.Alpha = mList.GetDouble(4);
                pft.Cohesion = mList.GetDouble(5);
                pft.GammaSub = mList.GetDouble(6);
            }
            else
                throw new Exception("Wrong Data!");
            return pft;
        }

    }
    public class PileFoundationTableCollection : IList<PileFoundationTable>
    {
        List<PileFoundationTable> list = null;
        double pile_dia, gama_sub;
        public PileFoundationTableCollection(double pile_diameter)
        {
            list = new List<PileFoundationTable>();
            pile_dia = pile_diameter;
        }

        #region IList<PileFoundationTable> Members

        public int IndexOf(PileFoundationTable item)
        {
            for (int i = 0; i < list.Count; i++)
            {
                if ((list[i].Layers == item.Layers) && (item.Thickness == list[i].Thickness))
                {
                    return i;
                }
            }
            return -1;
        }

        public void Insert(int index, PileFoundationTable item)
        {
            list.Insert(index, item);
        }

        public void RemoveAt(int index)
        {
            list.RemoveAt(index);
        }

        public PileFoundationTable this[int index]
        {
            get
            {
                return list[index];
            }
            set
            {
                list[index] = value;
            }
        }

        #endregion

        #region ICollection<PileFoundationTable> Members

        public void Add(PileFoundationTable item)
        {
            double val = 0.0;

            int cnt = list.Count - 1;
            if (cnt >= 0)
            {
                item.SL_No = cnt + 2;
                item.H_DepthBelowScourLevel = item.Thickness + list[cnt].Thickness;
                item.SurfaceArea = Math.PI * pile_dia * item.Thickness;
                if (item.Cohesion == 0.0)
                {
                    item.Delta = item.Phi;
                }
                else
                {
                    item.Delta = (2.0 / 3.0) * item.Phi;
                }
                item.P_D = item.H_DepthBelowScourLevel * item.GammaSub;
                item.P_Di = (list[cnt].P_D + item.P_D) / 2.0;
            }
            else
            {
                item.SL_No = 1;
                item.H_DepthBelowScourLevel = item.Thickness;
                item.SurfaceArea = Math.PI * pile_dia * item.Thickness;
                if (item.Cohesion == 0.0)
                {
                    item.Delta = item.Phi;
                }
                else
                {
                    item.Delta = (2.0 / 3.0) * item.Phi;
                }
                item.P_D = item.H_DepthBelowScourLevel * item.GammaSub;
                item.P_Di = (0 + item.P_D) / 2.0;
            }
            //item.GammaSub = gama_sub;


            if (list.Count > 0)
                item.Thickness = item.Depth - list[list.Count - 1].Depth;
            else
                item.Thickness = item.Depth;

            list.Add(item);
        }

        public void Clear()
        {
            list.Clear();
        }

        public bool Contains(PileFoundationTable item)
        {
            return ((IndexOf(item) != -1) ? true : false);
        }

        public void CopyTo(PileFoundationTable[] array, int arrayIndex)
        {
            list.CopyTo(array, arrayIndex);
        }

        public int Count
        {
            get { return list.Count; }
        }

        public bool IsReadOnly
        {
            get { return false; }
        }

        public bool Remove(PileFoundationTable item)
        {
            int i = IndexOf(item);
            if (i != -1)
            {
                RemoveAt(i);
                return true;
            }
            return false;
        }

        #endregion

        #region IEnumerable<PileFoundationTable> Members

        public IEnumerator<PileFoundationTable> GetEnumerator()
        {
            return list.GetEnumerator();
        }

        #endregion

        #region IEnumerable Members

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return list.GetEnumerator();
        }

        #endregion
    }
    /**/

    public class RaftFoundationDesign
    {
        public string Report_File = "";
        public string user_input_file = "";
        public bool is_process = false;

        public double sbc, fck, fy, d1, d2, cover, Le, Be, LSpan, BSpan;

        public double column_b = 0.3;
        public double column_d = 0.6;

        public List<string> Design_Summary { get; set; }
        public List<string> BOQ_Summary { get; set; }

        public RaftTableCollection Raft_Data { get; set; }

        public RaftFoundationDesign()
        {
            Raft_Data = new RaftTableCollection();
        }

        private static List<string> Get_Banner()
        {

            List<string> list = new List<string>();


            #region TechSOFT Banner
            list.Add("");
            list.Add("");
            list.Add("\t\t**********************************************");
            list.Add("\t\t*          ASTRA Pro Release 18.0            *");
            list.Add("\t\t*      TechSOFT Engineering Services         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t*      DESIGN OF RCC RAFT FOUNDATION         *");
            list.Add("\t\t*                                            *");
            list.Add("\t\t**********************************************");
            list.Add("\t\t----------------------------------------------");
            list.Add("\t\tTHIS RESULT CREATED ON " + System.DateTime.Now.ToString("dd.MM.yyyy  AT HH:mm:ss") + " ");
            list.Add("\t\t----------------------------------------------");
            #endregion TechSOFT Banner

            return list;
        }

        public bool Calculate_Program()
        {
            List<string> list = new List<string>();
            Design_Summary = new List<string>();


            list.AddRange(Get_Banner());


            #region User's Data

            list.Add("");
            list.Add("User's Data");
            list.Add("-----------");
            list.Add("");
            list.Add(string.Format("Bearing Capacity of Soil = sbc = {0} kN/Sq.m", sbc));
            list.Add(string.Format("Concrete Grade = fck = M{0}", fck));
            list.Add(string.Format("Steel Grade = fy = Fe{0}", fy));
            list.Add(string.Format("Main Reinforcement Bar Diameter = d1 = {0} mm", d1));
            list.Add(string.Format("Transverse Distrbution Reinforcement Bar Diameter = d2 = {0} mm", d2));
            list.Add(string.Format(""));
            list.Add(string.Format("Clear Cover = cover = {0} mm", cover));
            list.Add(string.Format("Extra Overhanging in Longer direction from Column Centre = Le = {0} m", Le));
            list.Add(string.Format("Extra Overhanging in Shorter direction from Column Centre = Be = {0} m", Be));
            //list.Add(string.Format("Longest Span in Longer direction = LSpan = {0} m", LSpan));
            //list.Add(string.Format("Longest Span in Shorter direction = BSpan = {0} m", BSpan));

            LSpan = Raft_Data.Get_Max_L();
            BSpan = Raft_Data.Get_Max_B();
            list.Add("");
            list.Add("");
            if (Raft_Data.Count > 0)
                list.AddRange(Raft_Data.Get_Table_Data().ToArray());

            list.Add(string.Format(""));
            list.Add(string.Format("Longest Distance between two Columns in a Row in Longer direction = LSpan = {0:f3} m", LSpan));
            list.Add(string.Format("Longest Distance between two Columns in a Row in Shorter direction = BSpan = {0:f3} m", BSpan));
            list.Add(string.Format(""));
            #endregion User's Data

            #region Step 1 : Design Calculation

            list.Add("");
            list.Add("----------------------------------------------------");
            list.Add("STEP 1 : DESIGN CALCULATION");
            list.Add("----------------------------------------------------");
            list.Add("");


            double x, z, P;

            x = Raft_Data.Get_Max_Cx();
            z = Raft_Data.Get_Max_Cz();
            P = Raft_Data.Get_Max_Cp();
            list.Add(string.Format("Finally, x = {0:f3} m,  z = {1:f3} m ,  and  P = {2:f3} kN", x, z, P));
            //list.Add;
            list.Add("");
            list.Add(string.Format("Consider Extended length = Le = {0:f3} m", Le));
            list.Add(string.Format("         Extended Width = Be = {0:f3} m", Be));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("C.G FOR ALL LOADS"));
            list.Add(string.Format("------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Eccentricity along X-Direction : "));
            list.Add(string.Format("Taking moment of all loads about left most columns"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double x_dash = 0.0;
            double dval = 0.0;

            string text1 = " x' = [";
            string text2 = "    = [";

            foreach (var item in Raft_Data)
            {
                foreach (var item2 in item)
                {
                    dval += item2.Vertical_Load * item2.X_Distance;

                    text1 += string.Format(" + {0}P x {0}X", item2.ColumnNo);
                    //text2 += string.Format(" + {0:f3} x {1:f3}", item2.Vertical_Load, item2.X_Distance);
                    text2 += string.Format(" + {0} x {1}", item2.Vertical_Load, item2.X_Distance);
                }
                text1 += string.Format("\n     ");
                text2 += string.Format("\n     ");
            }

            text1 += string.Format("]/P");
            text2 += string.Format("]/{0:f3}", P);



            list.Add(string.Format(text1));
            list.Add(string.Format(""));
            list.Add(string.Format(text2));
            list.Add(string.Format(""));
            list.Add(string.Format("  = {0:f3}/ {1:f3}", dval, P));
            x_dash = dval / P;
            list.Add(string.Format("  = {0:f3} m", x_dash));
            list.Add(string.Format(""));


            double ex = x_dash - (x / 2);
            list.Add(string.Format("  ex = x' - (x/2) = {0:f3} - {1:f3} = {2:f3} m", x_dash, (x / 2), ex));
            list.Add(string.Format(""));




            list.Add(string.Format(""));
            list.Add(string.Format("Eccentricity along Y-Direction : "));
            list.Add(string.Format("Taking moment of all loads about Firft row of columns, "));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            text1 = " z' = [";
            text2 = "    [";
            dval = 0;
            foreach (var item in Raft_Data)
            {
                foreach (var item2 in item)
                {
                    dval += item2.Vertical_Load * item2.Z_Distance;

                    text1 += string.Format(" + {0}P x {0}Z", item2.ColumnNo);
                    //text2 += string.Format(" + {0:f3} x {1:f3}", item2.Vertical_Load, item2.Z_Distance);
                    text2 += string.Format(" + {0} x {1}", item2.Vertical_Load, item2.Z_Distance);
                }
                text1 += string.Format("\n     ");
                text2 += string.Format("\n     ");
            }

            text1 += string.Format("]/P");
            text2 += string.Format("]/{0:f3}", P);



            list.Add(string.Format(text1));
            list.Add(string.Format(text2));
            list.Add(string.Format(""));
            list.Add(string.Format("  = {0:f3}/ {1:f3}", dval, P));
            double z_dash = dval / P;
            list.Add(string.Format("  = {0:f3} m", z_dash));
            list.Add(string.Format(""));
            list.Add(string.Format(""));


            double ez = z_dash - (z / 2);
            list.Add(string.Format("  ez = z' - (z/2) = {0:f3} - {1:f3} = {2:f3} m", z_dash, (z / 2), ez));
            list.Add(string.Format(""));

            #endregion Step 1 : Design Calculation

            #region Step 2
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------"));
            list.Add(string.Format("STEP 2 "));
            list.Add(string.Format("-----------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(" x = {0:f3} m,  z = {1:f3} m,  Le = {2:f3} m,  Be = {3:f3} m", x, z, Le, Be));

            list.Add(string.Format(""));
            list.Add(string.Format("ex = {0:f4} m", ex));
            list.Add(string.Format("ez = {0:f4} m", ez));
            list.Add(string.Format("P = {0:f3} kN", P));


            double Ix = (x + 2 * Le) * Math.Pow((z + 2 * Be), 3.0) / 12.0;
            list.Add(string.Format(""));
            list.Add(string.Format("Ix = (x + 2 * Le) * ((z + 2 * Be)^3.0) / 12.0"));
            list.Add(string.Format("   = ({0:f3} + 2 * {1:f3}) * (({2:f3} + 2 * {3:f3})^3.0) / 12.0", x, Le, z, Be));
            list.Add(string.Format("   = {0:f3} Sq.Sq.m", Ix));
            list.Add(string.Format(""));





            double Iz = (z + 2 * Be) * Math.Pow((x + 2 * Le), 3.0) / 12.0;
            list.Add(string.Format(""));
            list.Add(string.Format("Iz = (z + 2 * Be) * ((x + 2 * Le)^3.0) / 12.0"));
            list.Add(string.Format("   = ({0:f3} + 2 * {1:f3}) * (({2:f3} + 2 * {3:f3})^3.0) / 12.0", z, Be, x, Le));
            list.Add(string.Format("   = {0:f3} Sq.Sq.m", Iz));
            list.Add(string.Format(""));



            double A = (x + 2 * Le) * (z + 2 * Be);
            list.Add(string.Format(""));
            list.Add(string.Format("A = (x + 2 * Le) * (z + 2 * Be)"));
            list.Add(string.Format("  = ({0:f3} + 2 * {1:f3}) * ({2:f3} + 2 * {3:f3})", x, Le, z, Be));
            list.Add(string.Format("  = {0:f3} Sq.m", A));
            list.Add(string.Format("   "));
            list.Add(string.Format(""));

            double Mx = P * ex;
            list.Add(string.Format("Mx = P * ex = {0:f3} * {1:f3} = {2:f3}", P, ex, Mx));
            double Mz = P * ez;
            list.Add(string.Format("Mz = P * ez = {0:f3} * {1:f3} = {2:f3}", P, ez, Mz));
            list.Add(string.Format(""));
            double P_by_A = P / A;
            list.Add(string.Format("  P/A =  {0:f3} / {1:f3} = {2:f3}", P, A, P_by_A));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion  Step 2

            #region  Step 3
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("-----------------------------------"));
            list.Add(string.Format("STEP 3 : CHECK STRESS"));
            list.Add(string.Format("-----------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #region  (i) Stress at the Upper Right Raft Corner :

            list.Add(string.Format("(i) Stress at the Upper Right Raft Corner :"));
            list.Add(string.Format(""));
            double x1 = (x / 2.0) + Le;
            list.Add(string.Format("     x1 = Distance along x from Raft Centre"));
            list.Add(string.Format("        = (x/2) + Le"));
            list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Le));
            list.Add(string.Format("        = {0:f3} m", x1));
            double x2 = ((x / 2.0) - ex) + Le;
            list.Add(string.Format("     x2 = Distance along x from CG of Loads"));
            list.Add(string.Format("        = ((x/2) - ex) + Le"));
            list.Add(string.Format("        = ({0:f3}/2 - ({1:f3})) + {2:f3}", x, ex, Le, x2));
            list.Add(string.Format("        = {0:f3} m", x2));
            list.Add(string.Format(""));

            double signx = 1.0;
            if (x1 > x2)
            {
                signx = 1;
                list.Add(string.Format("if  x1 > x2 so, signx = 1"));
            }
            else
            {
                signx = -1;
                list.Add(string.Format("if  x1 < x2 so, signx = -1"));
            }

            double z1 = (z / 2.0) + Be;
            list.Add(string.Format("     z1 = Distance along Z from Raft Centre"));
            list.Add(string.Format("        = (z/2) + Be"));
            list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Be));
            list.Add(string.Format("        = {0:f3} m", z1));
            double z2 = ((z / 2.0) - ez) + Be;
            list.Add(string.Format("     z2 = Distance along x from CG of Loads"));
            list.Add(string.Format("        = ((z/2) - ez) + Be"));
            list.Add(string.Format("        = ({0:f3}/2 - ({1:f3})) + {2:f3}", z, ez, Be));
            list.Add(string.Format("        = {0:f3} m", z2));
            list.Add(string.Format(""));

            double signz = 1.0;
            if (z1 > z2)
            {
                signz = 1;
                list.Add(string.Format("if  x1 > x2 so, signz = 1"));
            }
            else
            {
                signz = -1;
                list.Add(string.Format("if  x1 < x2 so, signz = -1"));
            }



            double sigma = (P / A) + (signx) * Mz * x1 / Iz + (signz) * Mx * z1 / Ix;
            double sigma_1 = sigma;
            list.Add(string.Format(" σ1 =  (P / A) + (signx) * Mz * x1 / Iz"));
            list.Add(string.Format("       + (signz) * Mx * z1 / Ix"));
            list.Add(string.Format(""));
            list.Add(string.Format("    = ({0:f3} / {1:f3}) + ({2}) * {3:f3} * {4:f3} / {5:f3}", P, A, signx, Mz, x1, Iz));
            list.Add(string.Format("       + ({0}) * {1:f3} * {2:f3} / {3:f3}", signz, Mx, z1, Ix));
            list.Add(string.Format(""));
            if (sigma < sbc)
                list.Add(string.Format("    = {0:f3} kN/Sq.m < {1} kN.Sq.m, Hence OK", sigma, sbc));
            else
                list.Add(string.Format("    = {0:f3} kN/Sq.m > {1} kN.Sq.m, Hence NOT OK", sigma, sbc));
            list.Add(string.Format(""));


            #endregion (i) Stress at the Upper Right Raft Corner :

            #region  (ii) Stress at the Upper Right Raft Corner :

            list.Add(string.Format("(i) Stress at the Right Edge at Raft Corner :"));
            list.Add(string.Format(""));
            x1 = (x / 2.0) + Le;
            list.Add(string.Format("     x1 = Distance along x from Raft Centre"));
            list.Add(string.Format("        = (x/2) + Le"));
            list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Le));
            list.Add(string.Format("        = {0:f3} m", x1));
            x2 = ((x / 2.0) - ex) + Le;
            list.Add(string.Format("     x2 = Distance along x from CG of Loads"));
            list.Add(string.Format("        = ((x/2) - ex) + Le"));
            list.Add(string.Format("        = ({0:f3}/2 - ({1:f3})) + {2:f3}", x, ex, Le, x2));
            list.Add(string.Format("        = {0:f3} m", x2));
            list.Add(string.Format(""));

            signx = 1.0;
            if (x1 > x2)
            {
                signx = 1;
                list.Add(string.Format("if  x1 > x2 so, signx = 1"));
            }
            else
            {
                signx = -1;
                list.Add(string.Format("if  x1 < x2 so, signx = -1"));
            }

            z1 = 0.0;
            list.Add(string.Format("     z1 = Distance along Z from Raft Centre"));
            //list.Add(string.Format("        = {z/2) + Be"));
            //list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Be));
            list.Add(string.Format("        = {0:f3} m", z1));
            list.Add(string.Format(""));
            //z2 = ((z / 2.0) - ez) + Be;
            //list.Add(string.Format("     z2 = Distance along x from CG of Loads"));
            //list.Add(string.Format("        = ({z/2) - ez) + Be"));
            //list.Add(string.Format("        = ({0:f3}/2 - ({1:f3})) + {2:f3}", z, ez, Be));
            //list.Add(string.Format("        = {0:f3} m", z2));
            //list.Add(string.Format(""));

            signz = 1.0;
            if (z1 > z2)
            {
                signz = 1;
                list.Add(string.Format("if  z1 > z2 so, signz = 1"));
            }
            else
            {
                signz = -1;
                list.Add(string.Format("if  z1 < z2 so, signz = -1"));
            }




            sigma = (P / A) + (signx) * Mz * x1 / Iz + (signz) * Mx * z1 / Ix;

            double sigma_2 = sigma;

            list.Add(string.Format(" σ2 =  (P / A) + (signx) * Mz * x1 / Iz"));
            list.Add(string.Format("       + (signz) * Mx * z1 / Ix"));
            list.Add(string.Format(""));
            list.Add(string.Format("    = ({0:f3} / {1:f3}) + ({2}) * {3:f3} * {4:f3} / {5:f3}", P, A, signx, Mz, x1, Iz));
            list.Add(string.Format("       + ({0}) * {1:f3} * {2:f3} / {3:f3}", signz, Mx, z1, Ix));
            list.Add(string.Format(""));
            if (sigma_2 < sbc)
                list.Add(string.Format("    = {0:f3} kN/Sq.m < {1} kN.Sq.m, Hence OK", sigma_2, sbc));
            else
                list.Add(string.Format("    = {0:f3} kN/Sq.m > {1} kN.Sq.m, Hence NOT OK", sigma_2, sbc));
            list.Add(string.Format(""));


            #endregion (ii) Stress at the Upper Right Raft Corner :

            #region  (iii) Stress at the Lower Right Raft Corner :

            list.Add(string.Format("(iii) Stress at the Right Edge at Raft Corner :"));
            list.Add(string.Format(""));
            x1 = (x / 2.0) + Le;
            list.Add(string.Format("     x1 = Distance along x from Raft Centre"));
            list.Add(string.Format("        = (x/2) + Le"));
            list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Le));
            list.Add(string.Format("        = {0:f3} m", x1));
            x2 = ((x / 2.0) - ex) + Le;
            list.Add(string.Format("     x2 = Distance along x from CG of Loads"));
            list.Add(string.Format("        = ((x/2) - ex) + Le"));
            list.Add(string.Format("        = ({0:f3}/2 - ({1:f3})) + {2:f3}", x, ex, Le, x2));
            list.Add(string.Format("        = {0:f3} m", x2));
            list.Add(string.Format(""));

            signx = 1.0;
            if (x1 > x2)
            {
                signx = 1;
                list.Add(string.Format("if  x1 > x2 so, signx = 1"));
            }
            else
            {
                signx = -1;
                list.Add(string.Format("if  x1 < x2 so, signx = -1"));
            }

            z1 = (z / 2.0) + Be;
            list.Add(string.Format("     z1 = Distance along Z from Raft Centre"));
            list.Add(string.Format("        = (z/2) + Be"));
            list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Be));
            list.Add(string.Format("        = {0:f3} m", z1));
            z2 = ((z / 2.0) + ez) + Be;
            list.Add(string.Format("     z2 = Distance along x from CG of Loads"));
            list.Add(string.Format("        = ((z/2) + ez) + Be"));
            list.Add(string.Format("        = ({0:f3}/2 + ({1:f3})) + {2:f3}", z, ez, Be));
            list.Add(string.Format("        = {0:f3} m", z2));
            list.Add(string.Format(""));

            signz = 1.0;
            if (z1 > z2)
            {
                signz = 1;
                list.Add(string.Format("if  z1 > z2 so, signz = 1"));
            }
            else
            {
                signz = -1;
                list.Add(string.Format("if  z1 < z2 so, signz = -1"));
            }




            sigma = (P / A) + (signx) * Mz * x1 / Iz + (signz) * Mx * z1 / Ix;

            double sigma_3 = sigma;
            list.Add(string.Format(" σ3 =  (P / A) + (signx) * Mz * x1 / Iz"));
            list.Add(string.Format("       + (signz) * Mx * z1 / Ix"));
            list.Add(string.Format(""));
            list.Add(string.Format("    = ({0:f3} / {1:f3}) + ({2}) * {3:f3} * {4:f3} / {5:f3}", P, A, signx, Mz, x1, Iz));
            list.Add(string.Format("       + ({0}) * {1:f3} * {2:f3} / {3:f3}", signz, Mx, z1, Ix));
            list.Add(string.Format(""));
            if (sigma_3 < sbc)
                list.Add(string.Format("    = {0:f3} kN/Sq.m < {1} kN.Sq.m, Hence OK", sigma_3, sbc));
            else
                list.Add(string.Format("    = {0:f3} kN/Sq.m > {1} kN.Sq.m, Hence NOT OK", sigma_3, sbc));
            list.Add(string.Format(""));


            #endregion (i) Stress at the Upper Right Raft Corner :

            #region  (iv) Stress at the Upper Left Raft Corner :

            list.Add(string.Format("(iv) Stress at the Upper Left Raft Corner :"));
            list.Add(string.Format(""));
            x1 = (x / 2.0) + Le;
            list.Add(string.Format("     x1 = Distance along x from Raft Centre"));
            list.Add(string.Format("        = (x/2) + Le"));
            list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Le));
            list.Add(string.Format("        = {0:f3} m", x1));
            x2 = ((x / 2.0) + ex) + Le;
            list.Add(string.Format("     x2 = Distance along x from CG of Loads"));
            list.Add(string.Format("        = ((x/2) + ex) + Le"));
            list.Add(string.Format("        = ({0:f3}/2 + ({1:f3})) + {2:f3}", x, ex, Le, x2));
            list.Add(string.Format("        = {0:f3} m", x2));
            list.Add(string.Format(""));

            signx = 1.0;
            if (x1 > x2)
            {
                signx = 1;
                list.Add(string.Format("if  x1 > x2 so, signx = 1"));
            }
            else
            {
                signx = -1;
                list.Add(string.Format("if  x1 < x2 so, signx = -1"));
            }

            z1 = (z / 2.0) + Be;
            list.Add(string.Format("     z1 = Distance along Z from Raft Centre"));
            list.Add(string.Format("        = (z/2) + Be"));
            list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Be));
            list.Add(string.Format("        = {0:f3} m", z1));
            z2 = ((z / 2.0) - ez) + Be;
            list.Add(string.Format("     z2 = Distance along x from CG of Loads"));
            list.Add(string.Format("        = ((z/2) - ez) + Be"));
            list.Add(string.Format("        = ({0:f3}/2 - ({1:f3})) + {2:f3}", z, ez, Be));
            list.Add(string.Format("        = {0:f3} m", z2));
            list.Add(string.Format(""));

            signz = 1.0;
            if (z1 > z2)
            {
                signz = 1;
                list.Add(string.Format("if  z1 > z2 so, signz = 1"));
            }
            else
            {
                signz = -1;
                list.Add(string.Format("if  z1 < z2 so, signz = -1"));
            }



            sigma = (P / A) + (signx) * Mz * x1 / Iz + (signz) * Mx * z1 / Ix;

            double sigma_4 = sigma;

            list.Add(string.Format(" σ4 =  (P / A) + (signx) * Mz * x1 / Iz"));
            list.Add(string.Format("       + (signz) * Mx * z1 / Ix"));
            list.Add(string.Format(""));
            list.Add(string.Format("    = ({0:f3} / {1:f3}) + ({2}) * {3:f3} * {4:f3} / {5:f3}", P, A, signx, Mz, x1, Iz));
            list.Add(string.Format("       + ({0}) * {1:f3} * {2:f3} / {3:f3}", signz, Mx, z1, Ix));
            list.Add(string.Format(""));
            if (sigma < sbc)
                list.Add(string.Format("    = {0:f3} kN/Sq.m < {1} kN.Sq.m, Hence OK", sigma, sbc));
            else
                list.Add(string.Format("    = {0:f3} kN/Sq.m > {1} kN.Sq.m, Hence NOT OK", sigma, sbc));
            list.Add(string.Format(""));


            #endregion  (iv) Stress at the Upper Left Raft Corner

            #region  (v) Stress at the Left Edge at Raft Corner :

            list.Add(string.Format("(v) Stress at the Left Edge at Raft Corner :"));
            list.Add(string.Format(""));
            x1 = (x / 2.0) + Le;
            list.Add(string.Format("     x1 = Distance along x from Raft Centre"));
            list.Add(string.Format("        = (x/2) + Le"));
            list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Le));
            list.Add(string.Format("        = {0:f3} m", x1));
            x2 = ((x / 2.0) + ex) + Le;
            list.Add(string.Format("     x2 = Distance along x from CG of Loads"));
            list.Add(string.Format("        = ((x/2) + ex) + Le"));
            list.Add(string.Format("        = ({0:f3}/2 + ({1:f3})) + {2:f3}", x, ex, Le, x2));
            list.Add(string.Format("        = {0:f3} m", x2));
            list.Add(string.Format(""));

            signx = 1.0;
            if (x1 > x2)
            {
                signx = 1;
                list.Add(string.Format("if  x1 > x2 so, signx = 1"));
            }
            else
            {
                signx = -1;
                list.Add(string.Format("if  x1 < x2 so, signx = -1"));
            }

            z1 = 0.0;
            list.Add(string.Format("     z1 = Distance along Z from Raft Centre = 0.0"));
            //list.Add(string.Format("        = (z/2) + Be"));
            //list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Be));
            //list.Add(string.Format("        = {0:f3} m", z1));
            //z2 = ((z / 2.0) - ez) + Be;
            //list.Add(string.Format("     z2 = Distance along x from CG of Loads"));
            //list.Add(string.Format("        = ((z/2) - ez) + Be"));
            //list.Add(string.Format("        = ({0:f3}/2 - ({1:f3})) + {2:f3}", z, ez, Be));
            //list.Add(string.Format("        = {0:f3} m", z2));
            //list.Add(string.Format(""));

            signz = 1.0;
            if (z1 > z2)
            {
                signz = 1;
                list.Add(string.Format("if  z1 > z2 so, signz = 1"));
            }
            else
            {
                signz = -1;
                list.Add(string.Format("if  z1 < z2 so, signz = -1"));
            }



            sigma = (P / A) + (signx) * Mz * x1 / Iz + (signz) * Mx * z1 / Ix;

            double sigma_5 = sigma;

            list.Add(string.Format(" σ5 =  (P / A) + (signx) * Mz * x1 / Iz"));
            list.Add(string.Format("       + (signz) * Mx * z1 / Ix"));
            list.Add(string.Format(""));
            list.Add(string.Format("    = ({0:f3} / {1:f3}) + ({2}) * {3:f3} * {4:f3} / {5:f3}", P, A, signx, Mz, x1, Iz));
            list.Add(string.Format("       + ({0}) * {1:f3} * {2:f3} / {3:f3}", signz, Mx, z1, Ix));
            list.Add(string.Format(""));
            if (sigma < sbc)
                list.Add(string.Format("    = {0:f3} kN/Sq.m < {1} kN.Sq.m, Hence OK", sigma, sbc));
            else
                list.Add(string.Format("    = {0:f3} kN/Sq.m > {1} kN.Sq.m, Hence NOT OK", sigma, sbc));
            list.Add(string.Format(""));

            #endregion  (v) Stress at the Left Edge at Raft Corner

            #region  (vi) Stress at the Lower Left Raft Corner :

            list.Add(string.Format("(vi) Stress at the Lower Left Raft Corner :"));
            list.Add(string.Format(""));
            x1 = (x / 2.0) + Le;
            list.Add(string.Format("     x1 = Distance along x from Raft Centre"));
            list.Add(string.Format("        = (x/2) + Le"));
            list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Le));
            list.Add(string.Format("        = {0:f3} m", x1));
            x2 = ((x / 2.0) + ex) + Le;
            list.Add(string.Format("     x2 = Distance along x from CG of Loads"));
            list.Add(string.Format("        = ((x/2) + ex) + Le"));
            list.Add(string.Format("        = ({0:f3}/2 + ({1:f3})) + {2:f3}", x, ex, Le, x2));
            list.Add(string.Format("        = {0:f3} m", x2));
            list.Add(string.Format(""));

            signx = 1.0;
            if (x1 > x2)
            {
                signx = 1;
                list.Add(string.Format("if  x1 > x2 so, signx = 1"));
            }
            else
            {
                signx = -1;
                list.Add(string.Format("if  x1 < x2 so, signx = -1"));
            }

            z1 = (z / 2.0) + Be;
            list.Add(string.Format("     z1 = Distance along Z from Raft Centre"));
            list.Add(string.Format("        = (z/2) + Be"));
            list.Add(string.Format("        = {0:f3}/2 + {1:f3}", x, Be));
            list.Add(string.Format("        = {0:f3} m", z1));
            z2 = ((z / 2.0) + ez) + Be;
            list.Add(string.Format("     z2 = Distance along x from CG of Loads"));
            list.Add(string.Format("        = ((z/2) + ez) + Be"));
            list.Add(string.Format("        = ({0:f3}/2 + ({1:f3})) + {2:f3}", z, ez, Be));
            list.Add(string.Format("        = {0:f3} m", z2));
            list.Add(string.Format(""));

            signz = 1.0;
            if (z1 > z2)
            {
                signz = 1;
                list.Add(string.Format("if  z1 > z2 so, signz = 1"));
            }
            else
            {
                signz = -1;
                list.Add(string.Format("if  z1 < z2 so, signz = -1"));
            }



            sigma = (P / A) + (signx) * Mz * x1 / Iz + (signz) * Mx * z1 / Ix;

            double sigma_6 = sigma;

            list.Add(string.Format(" σ6 =  (P / A) + (signx) * Mz * x1 / Iz"));
            list.Add(string.Format("       + (signz) * Mx * z1 / Ix"));
            list.Add(string.Format(""));
            list.Add(string.Format("    = ({0:f3} / {1:f3}) + ({2}) * {3:f3} * {4:f3} / {5:f3}", P, A, signx, Mz, x1, Iz));
            list.Add(string.Format("       + ({0}) * {1:f3} * {2:f3} / {3:f3}", signz, Mx, z1, Ix));
            list.Add(string.Format(""));
            if (sigma < sbc)
                list.Add(string.Format("    = {0:f3} kN/Sq.m < {1} kN.Sq.m, Hence OK", sigma, sbc));
            else
                list.Add(string.Format("    = {0:f3} kN/Sq.m > {1} kN.Sq.m, Hence NOT OK", sigma, sbc));
            list.Add(string.Format(""));


            #endregion  (iv) Stress at the Upper Left Raft Corner





            #endregion  Step 3
            list.Add(string.Format(""));

            #region Step 4

            list.Add(string.Format("----------------------------------------"));
            list.Add(string.Format("STEP 4 : "));
            list.Add(string.Format("----------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Let us divide the Raft into three Equivalent Beam Strips"));
            list.Add(string.Format(""));

            #region (i)
            double lx = x + 2 * Le;


            list.Add(string.Format("(i) Length along X-Direction = x + 2*Le = {0:f3} + 2 * {1:f3} = {2:f3} m", x, Le, lx));

            double lz = (z / 2 / 2) + Be;

            list.Add(string.Format("    Width along Z-Direction = (z/2/2) + Be = ({0:f3}/2/2) + {1:f3} = {2:f3} m", z, Be, lz));
            list.Add(string.Format(""));

            double p1 = sigma_1;
            list.Add(string.Format("   Soil Pressure = p1 = σ1 = {0:f3} kN/Sq.m", p1));
            list.Add(string.Format(""));

            #endregion (i)

            #region (ii)
            list.Add(string.Format(""));
            list.Add(string.Format("(ii) Length along X-Direction = {0:f3} m", lx));

            lz = (z / 2 / 2) + (z / 2 / 2);

            list.Add(string.Format("    Width along Z-Direction = (z/2/2) + (z/2/2) = ({0:f3}/2/2) + ({0:f3}/2/2) = {1:f3} m", z, lz));
            list.Add(string.Format(""));

            double p2 = (sigma_1 + sigma_2) / 2.0;
            list.Add(string.Format("   Soil Pressure = p2 = (σ1 + σ2)/2 = ({0:f3} + {1:f3})/2 = {2:f3} kN/Sq.m", sigma_1, sigma_2, p2));
            list.Add(string.Format(""));

            #endregion (ii)


            #region (ii)
            lx = x + 2 * Le;


            list.Add(string.Format(""));
            list.Add(string.Format("(iii) Length along X-Direction = x + 2*Le = {0:f3} + 2 * {1:f3} = {2:f3} m", x, Le, lx));

            lz = (z / 2 / 2) + Be;

            list.Add(string.Format("    Width along Z-Direction = (z/2/2) + Be = ({0:f3}/2/2) + {1:f3} = {2:f3} m", z, Be, lz));
            list.Add(string.Format(""));

            double p3 = (sigma_3 + sigma_2) / 2.0;
            list.Add(string.Format("   Soil Pressure = p2 = (σ2 + σ3)/2 = ({0:f3} + {1:f3})/2 = {2:f3} kN/Sq.m", sigma_2, sigma_3, p3));
            list.Add(string.Format(""));

            #endregion (ii)




            #endregion Step 4


            #region Step 5
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------"));
            list.Add(string.Format("STEP 5"));
            list.Add(string.Format("---------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Bending Moments in Equivalent Beam Strips along X-Direction"));
            list.Add(string.Format(""));

            #region (i) M1

            list.Add(string.Format(" (i) In the first equivalent beam Strip :"));
            list.Add(string.Format(""));
            list.Add(string.Format(" Maximum span length in this strips = LSpan = {0} m", LSpan));
            list.Add(string.Format(""));
            list.Add(string.Format("M1 = Maximum Bending Moment"));

            double M1 = p1 * LSpan * LSpan / 10.0;
            list.Add(string.Format("   = p1 * LSpan^2/10"));
            list.Add(string.Format("   = {0:f3} * {1:f3}^2/10", p1, LSpan));
            list.Add(string.Format("   = {0:f3} kN-m", M1));
            list.Add(string.Format(""));

            #endregion (i) M1


            #region (ii) M2

            list.Add(string.Format(" (ii) In the middle equivalent beam Strip :"));
            list.Add(string.Format(""));
            list.Add(string.Format(" Maximum span length in this strips = LSpan = {0} m", LSpan));
            list.Add(string.Format(""));
            list.Add(string.Format("M2 = Maximum Bending Moment"));

            double M2 = p2 * LSpan * LSpan / 10.0;
            list.Add(string.Format("   = p2 * LSpan^2/10"));
            list.Add(string.Format("   = {0:f3} * {1:f3}^2/10", p2, LSpan));
            list.Add(string.Format("   = {0:f3} kN-m", M2));
            list.Add(string.Format(""));

            #endregion (ii) M2

            #region (iii) M3

            list.Add(string.Format(" (iii) In the Third equivalent beam Strip :"));
            list.Add(string.Format(""));
            list.Add(string.Format(" Maximum span length in this strips = LSpan = {0} m", LSpan));
            list.Add(string.Format(""));
            list.Add(string.Format("M3 = Maximum Bending Moment"));

            double M3 = p3 * LSpan * LSpan / 10.0;
            list.Add(string.Format("   = p2 * LSpan^2/10"));
            list.Add(string.Format("   = {0:f3} * {1:f3}^2/10", p3, LSpan));
            list.Add(string.Format("   = {0:f3} kN-m", M3));
            list.Add(string.Format(""));

            #endregion (iii) M3


            list.Add(string.Format(""));
            list.Add(string.Format("For any beam strip in Z-Direction, "));
            list.Add(string.Format(""));
            list.Add(string.Format("The maximum span length = BSpan = {0:f3} m", BSpan));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            #endregion Step 5



            #region Step 6 Raft Thickness

            list.Add(string.Format("------------------------------------------"));
            list.Add(string.Format("STEP 6 : RAFT THICKNESS"));
            list.Add(string.Format("------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("The Thickness of Raft will be governed by two way"));
            list.Add(string.Format("shear at one of the exterior column"));
            list.Add(string.Format(""));


            double tau_c1 = 0.25 * Math.Sqrt(fck);
            list.Add(string.Format("Shear Strength of Concrete = τc1 = 0.25 x √σck", fck));
            list.Add(string.Format("                                 = 0.25 x √{0}  (σck = fck = {0}", fck));
            list.Add(string.Format("                                 = {0:f3} N/Sq.mm", tau_c1));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double C1P = Raft_Data[0][0].Vertical_Load;


            #region (i) Considering a Corner Column C1

            list.Add(string.Format("(i) Considering a Corner Column {0}, P =  {1:f3} kN", Raft_Data[0][0].ColumnNo, C1P));
            list.Add(string.Format(""));

            double Vu = 1.5 * C1P * 1000;
            list.Add(string.Format("  Vu = Shear Force"));
            list.Add(string.Format("     = 1.5 x P x 1000 N"));
            list.Add(string.Format("     = 1.5 x {0:f3} x 1000 N", C1P));
            list.Add(string.Format("     = {0:f3} N", Vu));
            list.Add(string.Format(""));

            double a = column_b + Le;
            list.Add(string.Format("    a = width of column + Le "));
            list.Add(string.Format("      = {0:f3} + {1:f3} ", column_b, Le));
            list.Add(string.Format("      = {0:f3} m", a));

            a = a * 1000;
            list.Add(string.Format("  = {0} mm", a));
            list.Add(string.Format(""));

            double b = 0.0;
            list.Add(string.Format("    b = Perimeter "));
            list.Add(string.Format("      = 2 x [(d/2) + a] ", a));
            list.Add(string.Format("      = 2 x [(d/2) + {0}]", a));
            list.Add(string.Format("      = d + {0} ", a * 2));

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("  Vu / (b x d) = τc'"));
            list.Add(string.Format("  Vu = τc' x (b x d)"));
            list.Add(string.Format("     = τc' x 2 x [(d/2) + a] x d"));
            list.Add(string.Format("     = τc' x d^2 + 2 x d x a"));
            list.Add(string.Format(""));
            list.Add(string.Format("     τc' x d^2 + 2 x a x d - Vu = 0"));
            list.Add(string.Format(""));

            double d = (-2 * a + Math.Sqrt((2 * a) * (2 * a) - 4 * tau_c1 * (-Vu))) / (2 * tau_c1);
            list.Add(string.Format("   d = (-2 x a + SQRT[(2 x a)^2 - 4 x τc' x (-Vu)]) / (2 x τc')"));
            list.Add(string.Format("     = (-2 x {0} + SQRT[(2 x {0})^2 - 4 x {1:f3} x (-{2:f3})]) / (2 x {1:f3})", a, tau_c1, Vu));
            list.Add(string.Format("     = {0:f3} mm", d));

            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion (i) Considering a Corner Column C1




            double C5P = Raft_Data[0][Raft_Data[0].Count - 1].Vertical_Load;


            #region (ii) Considering a Corner Column C5

            list.Add(string.Format(""));
            list.Add(string.Format("(ii) Considering a Side Column {0}, P = {1:f3} kN", Raft_Data[0][Raft_Data[0].Count - 1].ColumnNo, C5P));
            list.Add(string.Format(""));

            double bc = column_b * 1000;
            double dc = column_d * 1000;


            list.Add(string.Format(" Size = bc x dc = {0} x {1}", bc, dc));
            list.Add(string.Format(""));

            Vu = 1.5 * C5P * 1000;
            list.Add(string.Format("   Vu = Shear Force"));
            list.Add(string.Format("      = 1.5 x P x 1000 N"));
            list.Add(string.Format("      = 1.5 x {0:f3} x 1000 N", C5P));
            list.Add(string.Format("      = {0:f3} N", Vu));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            //double column_b = 0.3;
            //double column_d = 0.6;

            a = column_b + Le;
            list.Add(string.Format("    a = Width of Column + Le "));
            list.Add(string.Format("      = {0:f3} + {1:f3} ", column_b, Le));
            list.Add(string.Format("      = {0:f3} m", a));

            a = a * 1000;
            list.Add(string.Format("      = {0} mm", a));
            list.Add(string.Format(""));

            b = 0.0;
            list.Add(string.Format("    b = Perimeter"));
            list.Add(string.Format("      = 2 x [(d/2) + a] + [d + bc]", a));
            list.Add(string.Format("      = 2 x [(d/2) + {0}] + [d + {1}]", a, bc));
            list.Add(string.Format("      = d + {0} + d + {1}", a * 2, bc));
            list.Add(string.Format("      = 2d + {0}", a * 2 + bc));

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("  τv = Vu / (b x d)"));
            list.Add(string.Format("     = {0:f3} / [(2d + {1}) x d]", Vu, (a * 2 + bc)));
            list.Add(string.Format("     = τc' = {0:f3} ", tau_c1));

            dval = Vu / (tau_c1);
            list.Add(string.Format(""));
            list.Add(string.Format(" 2d^2 + {0}d = Vu/τc' = {1:f3}/{2:f3} = {3:f3} ", (a * 2 + bc),
                Vu, tau_c1, dval));
            list.Add(string.Format(""));
            dval = Vu / (2 * tau_c1);
            list.Add(string.Format(""));
            list.Add(string.Format(" d^2 + {0}d = {1:f3} ", (a * 2 + bc) / 2, dval));
            list.Add(string.Format(""));
            list.Add(string.Format(" d^2 + {0}d  - {1:f3} = 0", (a * 2 + bc) / 2, dval));
            list.Add(string.Format(""));

            double _b = (a * 2 + bc) / 2;

            double d_ii = (-_b + Math.Sqrt((_b * _b - 4 * (-dval)))) / 2;
            list.Add(string.Format("   d = (-{0} + SQRT[({0}^2 - 4 * (-{1:f3}))]) / 2", _b, dval));
            //list.Add(string.Format("     = (-2 x {0} + SQRT[(2 x {0})^2 - 4 x {1:f3} x (-{2:f3})]) / (2 x {1:f3})", a, tau_c1, Vu));
            list.Add(string.Format("     = {0:f3} mm", d_ii));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            d = Math.Max(d, d_ii);

            double _d = d;
            d = (int)(d / 10.0);

            d += 1.0;

            d = d * 10.0;
            list.Add(string.Format("Let us take d = {0:f3} = {1:f0} mm", _d, d));
            list.Add(string.Format(""));

            double prov_d = d + cover;
            list.Add(string.Format("Provided overall thickness of Raft = d + Cover"));
            list.Add(string.Format("                                   = {0} + {1}", d, cover));
            list.Add(string.Format("                                   = {0}", prov_d));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            #endregion (ii) Considering a Corner Column C5




            #endregion Step 6 Raft Thickness

            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format("STEP 7 : RAFT REINFORCEMENT STEEL "));
            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format("Reinforcement along longer direction Top & Bottom"));
            list.Add(string.Format(""));

            double BM = Math.Max(Math.Max(M1, M2), M3);
            list.Add(string.Format("B.M. = Largest of M1, M2 and M3 = {0:f3} kN-m", BM));
            list.Add(string.Format(""));
            list.Add(string.Format("M1 = 0.87 x fy x Ast x [d - (fy x Ast)/(fck x b)]"));
            list.Add(string.Format("   = 0.87 x fy x Ast x [(d x (fck x b) - (fy x Ast))/(fck x b)]"));
            list.Add(string.Format(""));
            list.Add(string.Format(" M1 x (fck x b)  = (0.87 x fy x  d x fck x b x Ast) - (0.87 x fy^2 x Ast^2)"));
            list.Add(string.Format(""));
            list.Add(string.Format("0.87 x fy^2 x Ast^2 - (0.87 x fy x  d x fck x b x Ast) + M1 x (fck x b) = 0"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            double k1 = 0.87 * fy * fy;
            list.Add(string.Format(" k1 = 0.87 * fy^2 = 0.87 x {0}^2 = {1:f3}", fy, k1));
            list.Add(string.Format(""));
            double k2 = 0.87 * fy * fck * d * 1000;
            list.Add(string.Format(" k2 = 0.87 x fy x fck x d x b = 0.87 x {0} x {1} x {2} x 1000 = {3:f3}", fy, fck, d, k2));
            list.Add(string.Format(""));
            double k3 = BM * 1000000 * fck * 1000;
            list.Add(string.Format(" k3 = M1 x 10^6 x fck x b = {0:f3} x 10^6 x {1} x 1000 = {2:E3}", BM, fck, k3));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("  k1 x Ast^2 - k2 x Ast + k3 = 0"));
            list.Add(string.Format(""));

            double Ast = (k2 - Math.Sqrt((k2 * k2 - 4 * k1 * k3))) / (2 * k1);
            list.Add(string.Format("Ast = (k2 - SQRT[(k2^2 - 4 x k1 x k3)]) / (2 x k1)"));
            list.Add(string.Format("    = ({0:f3} - SQRT[({0:f3}^2 - 4 x {1:f3} x {2:E3})]) / (2 x {1:f3})", k2, k1, k3));
            list.Add(string.Format("    = {0:f3} Sq.mm", Ast));
            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("Minimum required reinforcements = 0.12%"));

            double req_ast = 0.0012 * prov_d * 1000;
            list.Add(string.Format("                                = 0.0012 x {0} x 1000", prov_d));
            list.Add(string.Format("                                = {0:f3} Sq.mm", req_ast));
            list.Add(string.Format(""));

            double ast_bar = Math.PI * d1 * d1 / 4.0;
            list.Add(string.Format("Provide dia of rebars d1 = {0} mm , Area of a bar = 3.14159 x {0}^2 / 4 = {1:f3} Sq.mm", d1, ast_bar));
            list.Add(string.Format(""));

            double bars = (int)(Ast / ast_bar);
            bars = bars + 1;
            list.Add(string.Format("Nos.  of Rebars in 1000 mm = {0:f3} / {1:f3} = {2:f3}  = {3} bars", Ast, ast_bar, (Ast / ast_bar), bars));
            list.Add(string.Format(""));
            double spc = (int)(1000 / bars);
            list.Add(string.Format("Spacing = 1000/{0} = {1:f0} mm", bars, spc));
            list.Add(string.Format(""));


            spc = (int)(spc / 10);
            spc = spc * 10;
            list.Add(string.Format("Provide {0} mm dia bars @ {1} mm c/c bothways ", d1, spc));
            list.Add(string.Format("at Top and Bottom of Raft with clear cover {0} mm", cover));
            list.Add(string.Format(""));

            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Provide main reinforcements as {0} mm dia bars @ {1} mm c/c bothways at top and bottom ", d1, spc));
            Design_Summary.Add(string.Format("in longitudinal direction of Raft with clear cover {0} mm, Bar mark in the drawing R_AST[1]", cover));
            Design_Summary.Add(string.Format(""));


            BOQ_Summary = new List<string>();

            double ls = Raft_Data.Get_Shorter_Span();
            double ss = Raft_Data.Get_Longer_Span();
            double tot_ws = 0.0;
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            //BOQ_Summary.Add(string.Format("Concrete Quantity"));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format(""));
            BOQ_Summary.Add(string.Format("Provide main reinforcements as {0} mm dia bars @ {1} mm c/c bothways at top and bottom ", d1, spc));
            BOQ_Summary.Add(string.Format("in longitudinal direction of Raft with clear cover {0} mm, Bar mark in the drawing R_AST[1]", cover));
            BOQ_Summary.Add(string.Format(""));



            tot_ws = (ss * 1000 / spc) * ls * Tables.Rebars.Get_Rebar_Weight(d1);


            //BOQ_Summary.Add(string.Format("Total Weight = {0:f0} x {1:f3} x {2:f6} = {3:f3} Ton",
            //   ((ss * 1000 / spc)),
            //    ls, Tables.Rebars.Get_Rebar_Weight(d1)
            //    , tot_ws));

            BOQ_Summary.Add(string.Format(""));



            list.Add(string.Format(""));
            list.Add(string.Format("Transverse distribution reinforcements = 0.12%"));
            list.Add(string.Format("                                       = 0.0012 x {0:f3} x 1000", prov_d));
            list.Add(string.Format("                                       = {0:f3} Sq.mm", req_ast));
            list.Add(string.Format(""));

            ast_bar = Math.PI * d2 * d2 / 4.0;
            list.Add(string.Format("Provide dia of rebars d2 = {0} mm, Area of a bar = 3.14159 x {0}^2 / 4 = {1:f3} Sq.mm", d2, ast_bar));
            list.Add(string.Format(""));

            bars = (int)(req_ast / ast_bar);
            bars += 1.0;
            if (bars < 2)
                bars = 2;
            list.Add(string.Format("Nos. of Rebars in 1000 mm = {0:f3} / {1:f3} = {2:f3} bars = {3:f0} NOS.", req_ast, ast_bar, (req_ast / ast_bar), bars));
            list.Add(string.Format(""));
            spc = 1000 / bars;


            list.Add(string.Format("Spacing = 1000/{0} = {1:f3} mm", bars, spc));


            spc = (int)(spc / 10);
            spc = (int)(spc * 10);
            list.Add(string.Format(""));


            list.Add(string.Format("Provide distribution reinforcements as {0} mm dia bars @ {1} mm c/c bothways at Top and Bottom ", d2, spc));
            list.Add(string.Format("in transverse direction of Raft with clear cover {0} mm, Bar Mark in the drawing R_AST [2]", cover));
            list.Add(string.Format(""));
            list.Add(string.Format("Overall Raft Thickness = {0} mm", prov_d));
            list.Add(string.Format(""));


            Design_Summary.Add(string.Format("Provide distribution reinforcements as {0} mm dia bars @ {1} mm c/c bothways at Top and Bottom ", d2, spc));
            Design_Summary.Add(string.Format("in transverse direction of Raft with clear cover {0} mm, Bar Mark in the drawing R_AST [2]", cover));
            Design_Summary.Add(string.Format(""));
            Design_Summary.Add(string.Format("Overall Raft Thickness = {0} mm", prov_d));
            Design_Summary.Add(string.Format(""));




            BOQ_Summary.Add(string.Format("Provide distribution reinforcements as {0} mm dia bars @ {1} mm c/c bothways at Top and Bottom ", d2, spc));
            BOQ_Summary.Add(string.Format("in transverse direction of Raft with clear cover {0} mm, Bar Mark in the drawing R_AST [2]", cover));

          
            tot_ws = (ls*1000 / spc) * ss * Tables.Rebars.Get_Rebar_Weight(d2);
            
            BOQ_Summary.Add(string.Format(""));

            //BOQ_Summary.Add(string.Format("Total Weight = {0} x {1:f3} x {2:f6} = {3:f3} Ton",
            //   ((ls*1000 / spc)),
            //    ss, Tables.Rebars.Get_Rebar_Weight(d2)
            //    , tot_ws));
            BOQ_Summary.Add(string.Format(""));

            BOQ_Summary.Add(string.Format("Overall Raft Thickness = {0} mm", prov_d));
            BOQ_Summary.Add(string.Format(""));


            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format("STEP 8 : DESIGN SUMMARY "));
            list.Add(string.Format("--------------------------------------------"));
            list.AddRange(Design_Summary.ToArray());
            list.Add(string.Format(""));


            list.Add(string.Format("--------------------------------------------"));
            list.Add(string.Format("STEP 9 : BILL OF QUANTITY "));
            list.Add(string.Format("--------------------------------------------"));
            list.AddRange(BOQ_Summary.ToArray());
            list.Add(string.Format(""));
          
            //list.Add(string.Format("Provide main reinforcements AS 25 mm dia bars @ 160 mm c/c bothways at Top and Bottom "));
            //list.Add(string.Format("in longitudinal direction of Raft with clear cover 40 mm, Bar mark in the drawing R_Ast[1]"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Provide distribution reinforcements AS 12 mm dia bars @ 125 mm c/c bothways at top and bottom "));
            //list.Add(string.Format("in transverse direction of Raft with clear cover 40 mm, Bar mark in the drawing R_Ast[2]"));
            //list.Add(string.Format(""));
            //list.Add(string.Format("Overall Raft Thickness = 685.943019975684 mm"));
            //list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------------------------------------------------"));
            list.Add(string.Format("                                   END DESIGN"));
            list.Add(string.Format("---------------------------------------------------------------------------"));
            list.Add(string.Format(""));
            list.Add(string.Format(""));

            if (Report_File != "")
            {
                File.WriteAllLines(Report_File, list.ToArray());
                File.WriteAllLines(Get_BOQ_File(1), BOQ_Summary.ToArray());
                File.WriteAllLines(Get_Design_Summary_File(1), Design_Summary.ToArray());
            }
            return true;


        }

        public string Get_BOQ_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "BOQ");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "BOQ_R" + step.ToString("000") + ".TXT");

            return tmp_file;
        }


        public string Get_Design_Summary_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "DESIGN SUMMARY");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "DESIGN_SUMMARY_R" + step.ToString("000") + ".TXT");

            return tmp_file;
        }


        public string Get_Report_File(int step)
        {
            string tmp_file = Path.Combine(Path.GetDirectoryName(Report_File), "Reports");

            if (!Directory.Exists(tmp_file))
                Directory.CreateDirectory(tmp_file);
            tmp_file = Path.Combine(tmp_file, "DESIGN_R" + step.ToString("000") + ".TXT");

            return tmp_file;
        }


    }


    public class RaftData
    {
        public string ColumnNo { get; set; }
        public double X_Distance { get; set; }
        public double Z_Distance { get; set; }
        public double Vertical_Load { get; set; }

        public RaftData()
        {
            ColumnNo = "";
            X_Distance = 0.0;
            Z_Distance = 0.0;
            Vertical_Load = 0.0;
        }
        public override string ToString()
        {
            return string.Format("   {0,-10} {0,4}X = {1,-10:f3} {0,4}Z = {2,-10:f3} {0,4}P = {3,-10:f3}",
                ColumnNo, X_Distance, Z_Distance, Vertical_Load);
        }
    }

    public class RaftTableCollection : List<List<RaftData>>
    {
        public RaftTableCollection()
            : base()
        {
        }

        public void Read_Data_From_Grid(DataGridView dgv)
        {
            List<RaftData> list = new List<RaftData>();
            RaftData rf = new RaftData();



            for (int i = 0; i < dgv.RowCount - 1; i++)
            {
                rf = new RaftData();
                rf.ColumnNo = dgv[0, i].Value.ToString();
                rf.X_Distance = MyList.StringToDouble(dgv[1, i].Value.ToString(), 0.0);
                rf.Z_Distance = MyList.StringToDouble(dgv[2, i].Value.ToString(), 0.0);
                rf.Vertical_Load = MyList.StringToDouble(dgv[3, i].Value.ToString(), 0.0);

                if (rf.ColumnNo != "")
                {
                    list.Add(rf);
                }
                else
                {
                    this.Add(list);
                    list = new List<RaftData>();
                }
            }
            this.Add(list);


        }


        public List<string> Get_Table_Data()
        {
            List<string> list = new List<string>();

            list.Add(string.Format(""));
            list.Add(string.Format(""));
            list.Add(string.Format("---------------------------------------------------------------------"));
            list.Add(string.Format("  Columns"));
            list.Add(string.Format("Horizontally    X-Distance         Z-Distance         Vertical Load"));
            list.Add(string.Format("  Row wise        (m)                  (m)                 (kN)"));
            list.Add(string.Format("---------------------------------------------------------------------"));
            //list.Add(string.Format(""));
            foreach (var item in this)
            {
                foreach (var item2 in item)
                {
                    list.Add(item2.ToString());
                }
                list.Add(string.Format("---------------------------------------------------------------------"));
                //list.Add(string.Format("-----------------------------------------------------------------"));
            }
            //list.Add(string.Format("-----------------------------------------------------------------"));



            list.Add(string.Format("   {0,-10} {0,4}X = {1,-10:f3} {0,4}Z = {2,-10:f3} {0,4}P = {3,-10:f3}",
                "C", Get_Max_Cx(), Get_Max_Cz(), Get_Max_Cp()));

            list.Add(string.Format("---------------------------------------------------------------------"));
            return list;
        }
        public double Get_Max_Cx()
        {
            double max_cx = 0.0;

            foreach (var item in this)
            {
                foreach (var item2 in item)
                {
                    if (max_cx < item2.X_Distance)
                        max_cx = item2.X_Distance;
                }
            }
            return max_cx;

        }
        public double Get_Min_Cx()
        {
            double min_cx = double.MaxValue;
          
            foreach (var item in this)
            {
                foreach (var item2 in item)
                {
                    if (min_cx > item2.X_Distance)
                        min_cx = item2.X_Distance;
                }
            }
            return min_cx;

        }

        public double Get_Longer_Span()
        {

            return Math.Max(Get_Max_Cx() - Get_Min_Cx(), Get_Max_Cz() - Get_Min_Cz());

        }
        public double Get_Shorter_Span()
        {

            return Math.Min(Get_Max_Cx() - Get_Min_Cx(), Get_Max_Cz() - Get_Min_Cz());

        }

        public double Get_Max_Cz()
        {
            double max_cz = 0.0;

            foreach (var item in this)
            {
                foreach (var item2 in item)
                {
                    if (max_cz < item2.Z_Distance)
                        max_cz = item2.Z_Distance;
                }
            }
            return max_cz;

        }

        public double Get_Min_Cz()
        {
            double min_cz = double.MaxValue;

            foreach (var item in this)
            {
                foreach (var item2 in item)
                {
                    if (min_cz > item2.Z_Distance)
                        min_cz = item2.Z_Distance;
                }
            }
            return min_cz;

        }

        public double Get_Max_Cp()
        {
            double sum_cp = 0.0;

            foreach (var item in this)
            {
                foreach (var item2 in item)
                {
                    sum_cp += item2.Vertical_Load;
                }
            }
            return sum_cp;
        }


        public double Get_Max_L()
        {
            double max_l = 0.0;
            int i = 0;
            foreach (var item in this)
            {
                for (i = 1; i < item.Count; i++)
                {
                    if (max_l < (item[i].X_Distance - item[i - 1].X_Distance))
                    {
                        max_l = (item[i].X_Distance - item[i - 1].X_Distance);
                    }
                }
            }
            return max_l;
        }

        public double Get_Max_B()
        {
            double max_b = 0.0;
            int i = 0;
            int j = 0;
            for (i = 1; i < this.Count; i++)
            {
                for (j = 0; j < this[i].Count; j++)
                {
                    if (max_b < (this[i][j].Z_Distance - this[i - 1][j].Z_Distance))
                    {
                        max_b = (this[i][j].Z_Distance - this[i - 1][j].Z_Distance);
                    }
                }
            }

            return max_b;
        }

    }
    public sealed class SYMBOLS
    {
        //° θαπ√δτγ√±≠≤≥÷∞µβ∑ɸϒησ
        /// <summary>
        /// DEGREE = "°";
        /// </summary>
        public const string DEGREE = "°";
        /// <summary>
        /// THETA = "θ";
        /// </summary>
        public const string THETA = "θ";
        /// <summary>
        /// ALPHA = "α";
        /// </summary>
        public const string ALPHA = "α";
        /// <summary>
        /// PI = "π";
        /// </summary>
        public const string PI = "π";
        /// <summary>
        /// SQRT = "√";
        /// </summary>
        public const string SQRT = "√";
        /// <summary>
        /// DELTA = "δ";
        /// </summary>
        public const string DELTA = "δ";
        /// <summary>
        /// TAU = "τ";
        /// </summary>
        public const string TAU = "τ";
        /// <summary>
        /// GAMMA = "γ";
        /// </summary>
        public const string GAMMA = "γ";
        /// <summary>
        /// SQUAREROOT = "√";
        /// </summary>
        public const string SQUAREROOT = "√";
        /// <summary>
        /// PLUS_MINUS = "±";
        /// </summary>
        public const string PLUS_MINUS = "±";
        /// <summary>
        /// NOT_EQUALTO = "≠";
        /// </summary>
        public const string NOT_EQUALTO = "≠";
        /// <summary>
        /// LESS_THAN_EQUAL = "≤";
        /// </summary>
        public const string LESS_THAN_EQUAL = "≤";
        /// <summary>
        /// GREATER_THAN_EQUAL = "≥";
        /// </summary>
        public const string GREATER_THAN_EQUAL = "≥";
        /// <summary>
        /// DIVISION = "÷";
        /// </summary>
        public const string DIVISION = "÷";
        /// <summary>
        /// INFINITY = "∞";
        /// </summary>
        public const string INFINITY = "∞";
        /// <summary>
        /// 
        /// </summary>
        public const string MU = "µ";
        /// <summary>
        /// BETA = "β";
        /// </summary>
        public const string BETA = "β";
        /// <summary>
        /// SIGMA_SUM = "∑";
        /// </summary>
        public const string SIGMA_SUM = "∑";
        //public const string PHI = "ɸ";
        /// <summary>
        /// GAMA = "ϒ";
        /// </summary>
        public const string GAMA = "ϒ";

        /// <summary>
        /// ETA = "η";
        /// </summary>
        public const string ETA = "η";
        /// <summary>
        /// LAMDA = "λ";
        /// </summary>
        public const string LAMDA = "λ";
        /// <summary>
        /// XI = "ξ";
        /// </summary>
        public const string XI = "ξ";
        /// <summary>
        /// RHO = "ρ";
        /// </summary>
        public const string RHO = "ρ";
        /// <summary>
        /// SIGMA = "σ";
        /// </summary>
        public const string SIGMA = "σ";

        /// <summary>
        /// PHI = "φ";
        /// </summary>
        public const string PHI = "φ";
        /// <summary>
        /// PSI = "ψ";
        /// </summary>
        public const string PSI = "ψ";
        /// <summary>
        /// OMWGA = "ω";
        /// </summary>
        public const string OMWGA = "ω";
        /// <summary>
        /// INVERSE = "⁻¹";
        /// </summary>
        public const string INVERSE = "⁻¹";
    }



}
